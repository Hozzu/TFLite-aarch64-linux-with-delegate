/**=============================================================================

@file
   cvpTypes.h

@brief
   Types definition for Computer Vision Processor.

Copyright (c) 2017-2018 Qualcomm Technologies, Inc.
All Rights Reserved.
Confidential and Proprietary - Qualcomm Technologies, Inc.

=============================================================================**/

//=============================================================================
///@details CVP common types
///@ingroup cvp_type
//=============================================================================

#ifndef CVP_TYPES_H
#define CVP_TYPES_H

#include <stdio.h>
#include <string.h>
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C"
{
#endif

typedef float  float32_t;
typedef double float64_t;

#if defined(WIN32)
    #ifdef MSVC
        #define CVP_API
    #else
        #define CVP_API __declspec(dllexport)
    #endif
    #define INLINE __forceinline
#else
    #define CVP_API __attribute__ ((visibility ("default")))
    #define INLINE inline
#endif

//------------------------------------------------------------------------------
/// @brief
///    Max cvp image plane
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
#define CVP_MAX_PLANE   2

//------------------------------------------------------------------------------
/// @brief
///    CVP session
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef void* cvpSession;

//------------------------------------------------------------------------------
/// @brief
///    Handle for CVP
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef void* cvpHandle;

//------------------------------------------------------------------------------
/// @brief
///    CVP DSP session Handle
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef uint32_t cvpSessionDSP;

//------------------------------------------------------------------------------
/// @brief
///    DSP Handle for CVP
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef uint32_t cvpHandleDSP;

//------------------------------------------------------------------------------
/// @brief
///    Defines the status returned by a function.
///
/// @param CVP_SUCCESS
///    Success
/// @param CVP_EFAIL
///    General failure
/// @param CVP_EUNALIGNPARAM
///    Unaligned pointer parameter
/// @param CVP_EBADPARAM
///    Bad parameters
/// @param CVP_EINVALSTATE
///    Called at invalid state
/// @param CVP_ENORES
///    Insufficient resources, memory, thread...
/// @param CVP_EUNSUPPORTED
///    Unsupported feature
/// @param CVP_ECLOCKEXCEEDSLIMIT
///    Clock / Bandwidth Requested Exceeds Limits.Unrecoverable Fatal Error.
/// @param CVP_EFATAL
///    Generic Unrecoverable Fatal Error.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef enum
{
   CVP_SUCCESS = 0,
   CVP_EFAIL,
   CVP_EUNALIGNPARAM,
   CVP_EBADPARAM,
   CVP_EINVALSTATE,
   CVP_ENORES,
   CVP_EUNSUPPORTED,
   CVP_ECLOCKEXCEEDSLIMIT,
   CVP_EFATAL,
} cvpStatus;

//------------------------------------------------------------------------------
/// @brief
///    Defines Asynchronous Error Event Generated by CVP Hardware.
///
/// @param CVP_EVFATAL
///    Unrecoverable CVP Hardware Error Event
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef enum
{
   CVP_EVFATAL = 0,
} cvpEvent;
//------------------------------------------------------------------------------
/// @brief
///    Enumeration representing several Color Formats supported throughout
///    CVP.
/// @param CVP_COLORFORMAT_GRAY_8BIT
///    Gray 8 bit in one plane. These are the alignment requirements:
///    - Y (luma) width stride: 128 byte aligned.
///    - Y (luma) height stride: 32 byte aligned.
///    - Y (luma) aligned size: 4096 byte aligned.
/// @param CVP_COLORFORMAT_GRAY_UBWC
///    UBWC Gray format. Contains two planes of a lossless-compressed gray image.
///    First plane is the meta information and the second plane is the actual
///    image data. These are the alignment requirements:
///    - Y (luma) meta width stride: 64 byte aligned
///    - Y (luma) meta height stride: 16 byte aligned
///    - Y (luma) meta aligned size: 4096 byte aligned
///    - Y (luma) width stride: 128 byte aligned
///    - Y (luma) height stride: 32 byte aligned
///    - Y (luma) aligned size: 4096 byte aligned
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef enum
{
   CVP_COLORFORMAT_GRAY_8BIT,
   CVP_COLORFORMAT_GRAY_UBWC
} cvpColorFormat;

// -----------------------------------------------------------------------------
/// @brief
///    Structure representing a CVP version.
/// @details
///     CVP version contains Major.Minor.Revision number.
///     An increase in "Major" indicates that a previously released API has changed,
///     so a developer may encounter compilation issues which require modification
///     of their code in order to adhere to the modified API.  Qualcomm will make
///     every effort to minimize these changes.  Additionally, new functions and
///     implementation modifications may be present.
///     An increase in "Minor" indicates that new functions have been added to the
///     library, so additional functionality is available, however existing APIs
///     have not changed.  Additionally, implementation modifications may be
///     present.
///     An increase in "Revision" indicates that implementation modifications only have
///     been made.
/// @param nMajor
///    Major version number.
/// @param nMinor
///    Minor version number.
/// @param nRevision
///    Revision version number.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpVersion
{
   uint32_t nMajor;
   uint32_t nMinor;
   uint32_t nRevision;

   #ifdef __cplusplus
   INLINE _cvpVersion() : nMajor(0), nMinor(0), nRevision(0){}
   #endif

} cvpVersion;

//------------------------------------------------------------------------------
/// @brief
///    Structure representing the power requirement information.
/// @param ise_cycles
///    ise cycles.
/// @param vpss_cycles
///    vpss cycles.
/// @param ddr_bw
///    DDR bandwidth
/// @param sys_cache_bw
///    sys cache bandwidth
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpPowerReq
{
    uint32_t ise_cycles;
    uint32_t vpss_cycles;
    uint32_t ddr_bw;
    uint32_t sys_cache_bw;

   #ifdef __cplusplus
   INLINE _cvpPowerReq() : ise_cycles(0), vpss_cycles(0),
                           ddr_bw(0), sys_cache_bw(0){}
   #endif

} cvpPowerReq;

//------------------------------------------------------------------------------
/// @brief
///    Structure representing the image information for CVP.
/// @param eFormat
///    Enum representing the color format of the image.
/// @param nWidth
///    Width of the Image.
/// @param nHeight
///    Height of the Image.
/// @param nPlane
///    Number of Image Planes. Valid values are 1 - CVP_MAX_PLANE.
/// @param nWidthStride
///    Array of width stride values. Represent width strides of the planes in the order
///    that they appear in the respective formats. Width stride value is in bytes which
///    is the number of bytes from beginning of one line of the plane buffer to the next.
///    The stride must meet the color format alignment requirement.
/// @param nAlignedSize
///    Array of aligned size values. Represent aligned sizes of the planes in the
///    order that they appear in the respective formats.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpImageInfo {
   cvpColorFormat eFormat;
   uint32_t       nWidth;
   uint32_t       nHeight;
   uint32_t       nPlane;
   uint32_t       nWidthStride[CVP_MAX_PLANE];
   uint32_t       nAlignedSize[CVP_MAX_PLANE];

   #ifdef __cplusplus
   INLINE _cvpImageInfo() : eFormat(CVP_COLORFORMAT_GRAY_8BIT),
                            nWidth(0), nHeight(0), nPlane(1)

   {
      memset(nWidthStride, 0, sizeof(nWidthStride));
      memset(nAlignedSize, 0, sizeof(nAlignedSize));
   };
   #endif
} cvpImageInfo;

//------------------------------------------------------------------------------
/// @brief
///    Structure representing an image for CVP
/// @param pImage
///    Pointer to the memory location which contains the image data.
///    The memory size for pImage is equal to the sum of nAlignedSize of its plane(s).
/// @param sImageInfo
///    Structure of image information.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpImage {
   uint8_t        *pImage;
   cvpImageInfo    sImageInfo;

   #ifdef __cplusplus
   INLINE _cvpImage()
   {
      pImage = NULL;
   }
   #endif
} cvpImage;

// -----------------------------------------------------------------------------
/// @brief
///    Structure representing a pyramid level with uint16_t data type.
/// @param pData
///    Pointer to the uint16_t data.
/// @param nWidth
///    Width of pyramid at the level
/// @param nHeight
///    Height of pyramid at the level
/// @param nStride
///    Width stride which is the number of bytes from beginning of one line of the data
///    buffer to the next.
/// @param nChannels
///    Number of data channels.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpPyramidLevelu16
{
   uint16_t *pData;
   uint32_t  nWidth;
   uint32_t  nHeight;
   uint32_t  nStride;
   uint32_t  nChannels;

   #ifdef __cplusplus
   INLINE _cvpPyramidLevelu16() : pData(NULL), nWidth(0), nHeight(0),
                                   nStride(0), nChannels(0){}
   #endif
} cvpPyramidLevelu16;

// -----------------------------------------------------------------------------
/// @brief
///    Structure representing a pyramid with uint16_t data type.
/// @param pPyramidLevel
///    Pointer to the pyramid level structure. Memory should be allocated
///    nLevels * sizeof(cvpPyramidLevelu16) bytes.
/// @param nOctaves
///    Number of octaves. Image is halved in size between ajacent octaves.
/// @param nScalesPerOctave
///    Number of scales per octave. This includes the octave.
/// @param nLevels
///    Number of pyramid levels.
///
/// @ingroup cvp_type
//------------------------------------------------------------------------------
typedef struct _cvpPyramidu16
{
   cvpPyramidLevelu16 *pPyramidLevel;
   uint32_t            nOctaves;
   uint32_t            nScalesPerOctave;
   uint32_t            nLevels;

   #ifdef __cplusplus
   INLINE _cvpPyramidu16() : pPyramidLevel(NULL), nOctaves(0), nScalesPerOctave(0),
                             nLevels(0){}
   #endif
} cvpPyramidu16;

#ifdef __cplusplus
}//extern "C"
#endif

#endif

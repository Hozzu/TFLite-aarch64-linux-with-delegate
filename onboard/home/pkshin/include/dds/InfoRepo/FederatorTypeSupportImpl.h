/* -*- C++ -*- */
/* Generated by /home/shan/git/bsp/adcm_bsp_sa8195/sources/apps/apps_proc/poky/build/tmp-glibc/work/aarch64-oe-linux/opendds/1.0+gitAUTOINC+0810ffc3f5-r7/recipe-sysroot-native/usr/bin/DDS_HOST_ROOT/bin/opendds_idl version 3.13 (ACE version 6.5.12) running on input file Federator.idl */
#ifndef OPENDDS_IDL_GENERATED_FEDERATORTYPESUPPORTIMPL_H_MWEBVQ
#define OPENDDS_IDL_GENERATED_FEDERATORTYPESUPPORTIMPL_H_MWEBVQ
#include "FederatorC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "FederatorTypeSupportC.h"
#include "dds/DCPS/InfoRepoDiscovery/InfoC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "dds/DdsDcpsGuidC.h"
#include "tao/OctetSeqC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: BuiltinTopicKeyValue */


/* End TYPEDEF: BuiltinTopicKeyValue */


/* Begin TYPEDEF: InstanceHandleSeq */


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */


/* End STRUCT: Duration_t */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin STRUCT: Property_t */


/* End STRUCT: Property_t */


/* Begin TYPEDEF: PropertySeq */


/* End TYPEDEF: PropertySeq */


/* Begin STRUCT: BinaryProperty_t */


/* End STRUCT: BinaryProperty_t */


/* Begin TYPEDEF: BinaryPropertySeq */


/* End TYPEDEF: BinaryPropertySeq */


/* Begin STRUCT: PropertyQosPolicy */


/* End STRUCT: PropertyQosPolicy */


/* Begin STRUCT: UserDataQosPolicy */


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin STRUCT: TopicQos */


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */


/* End STRUCT: DomainParticipantQos */


/* Begin STRUCT: BuiltinTopicKey_t */


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */


/* End STRUCT: Time_t */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin STRUCT: SampleInfo */


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: GuidVendorId_t */


/* End TYPEDEF: GuidVendorId_t */


/* Begin TYPEDEF: GuidPrefix_t */


/* End TYPEDEF: GuidPrefix_t */


/* Begin TYPEDEF: EntityKey_t */


/* End TYPEDEF: EntityKey_t */


/* Begin STRUCT: EntityId_t */


/* End STRUCT: EntityId_t */


/* Begin CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* End CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* Begin CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* End CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_TOPIC */


/* End CONST: ENTITYKIND_BUILTIN_TOPIC */


/* Begin CONST: ENTITYKIND_USER_UNKNOWN */


/* End CONST: ENTITYKIND_USER_UNKNOWN */


/* Begin CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_NO_KEY */


/* End CONST: ENTITYKIND_USER_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* End CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* Begin CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* End CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* Begin CONST: ENTITYKIND_OPENDDS_TOPIC */


/* End CONST: ENTITYKIND_OPENDDS_TOPIC */


/* Begin CONST: ENTITYKIND_OPENDDS_USER */


/* End CONST: ENTITYKIND_OPENDDS_USER */


/* Begin CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* End CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* Begin STRUCT: GUID_t */


/* End STRUCT: GUID_t */


/* Begin TYPEDEF: GUIDSeq */


/* End TYPEDEF: GUIDSeq */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: RepoId */


/* End TYPEDEF: RepoId */


/* Begin TYPEDEF: TransportBLOB */


/* End TYPEDEF: TransportBLOB */


/* Begin STRUCT: TransportLocator */


/* End STRUCT: TransportLocator */


/* Begin TYPEDEF: TransportLocatorSeq */


/* End TYPEDEF: TransportLocatorSeq */


/* Begin STRUCT: IncompatibleQosStatus */


/* End STRUCT: IncompatibleQosStatus */


/* Begin STRUCT: AddDomainStatus */


/* End STRUCT: AddDomainStatus */


/* Begin ENUM: TopicStatus */


/* End ENUM: TopicStatus */


/* Begin STRUCT: WriterAssociation */


/* End STRUCT: WriterAssociation */


/* Begin STRUCT: ReaderAssociation */


/* End STRUCT: ReaderAssociation */


/* Begin TYPEDEF: WriterIdSeq */


/* End TYPEDEF: WriterIdSeq */


/* Begin TYPEDEF: ReaderIdSeq */


/* End TYPEDEF: ReaderIdSeq */


/* Begin TYPEDEF: OctetArray16 */


/* End TYPEDEF: OctetArray16 */


/* Begin STRUCT: Locator_t */


/* End STRUCT: Locator_t */


/* Begin TYPEDEF: LocatorSeq */


/* End TYPEDEF: LocatorSeq */


/* Begin TYPEDEF: String256 */


/* End TYPEDEF: String256 */


/* Begin STRUCT: ContentFilterProperty_t */


/* End STRUCT: ContentFilterProperty_t */


/* Begin STRUCT: ReaderProxy_t */


/* End STRUCT: ReaderProxy_t */


/* Begin STRUCT: DiscoveredReaderData */


/* End STRUCT: DiscoveredReaderData */


/* Begin STRUCT: WriterProxy_t */


/* End STRUCT: WriterProxy_t */


/* Begin STRUCT: DiscoveredWriterData */


/* End STRUCT: DiscoveredWriterData */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: Condition */


/* End INTERFACE-FWD: Condition */


/* Begin TYPEDEF: ConditionSeq */


/* End TYPEDEF: ConditionSeq */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: DomainId_t */


/* End TYPEDEF: DomainId_t */


/* Begin TYPEDEF: ReturnCode_t */


/* End TYPEDEF: ReturnCode_t */


/* Begin CONST: HANDLE_NIL */


/* End CONST: HANDLE_NIL */


/* Begin CONST: LENGTH_UNLIMITED */


/* End CONST: LENGTH_UNLIMITED */


/* Begin CONST: RETCODE_OK */


/* End CONST: RETCODE_OK */


/* Begin CONST: RETCODE_ERROR */


/* End CONST: RETCODE_ERROR */


/* Begin CONST: RETCODE_UNSUPPORTED */


/* End CONST: RETCODE_UNSUPPORTED */


/* Begin CONST: RETCODE_BAD_PARAMETER */


/* End CONST: RETCODE_BAD_PARAMETER */


/* Begin CONST: RETCODE_PRECONDITION_NOT_MET */


/* End CONST: RETCODE_PRECONDITION_NOT_MET */


/* Begin CONST: RETCODE_OUT_OF_RESOURCES */


/* End CONST: RETCODE_OUT_OF_RESOURCES */


/* Begin CONST: RETCODE_NOT_ENABLED */


/* End CONST: RETCODE_NOT_ENABLED */


/* Begin CONST: RETCODE_IMMUTABLE_POLICY */


/* End CONST: RETCODE_IMMUTABLE_POLICY */


/* Begin CONST: RETCODE_INCONSISTENT_POLICY */


/* End CONST: RETCODE_INCONSISTENT_POLICY */


/* Begin CONST: RETCODE_ALREADY_DELETED */


/* End CONST: RETCODE_ALREADY_DELETED */


/* Begin CONST: RETCODE_TIMEOUT */


/* End CONST: RETCODE_TIMEOUT */


/* Begin CONST: RETCODE_NO_DATA */


/* End CONST: RETCODE_NO_DATA */


/* Begin CONST: RETCODE_ILLEGAL_OPERATION */


/* End CONST: RETCODE_ILLEGAL_OPERATION */


/* Begin TYPEDEF: StatusKind */


/* End TYPEDEF: StatusKind */


/* Begin TYPEDEF: StatusMask */


/* End TYPEDEF: StatusMask */


/* Begin CONST: INCONSISTENT_TOPIC_STATUS */


/* End CONST: INCONSISTENT_TOPIC_STATUS */


/* Begin CONST: OFFERED_DEADLINE_MISSED_STATUS */


/* End CONST: OFFERED_DEADLINE_MISSED_STATUS */


/* Begin CONST: REQUESTED_DEADLINE_MISSED_STATUS */


/* End CONST: REQUESTED_DEADLINE_MISSED_STATUS */


/* Begin CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */


/* End CONST: OFFERED_INCOMPATIBLE_QOS_STATUS */


/* Begin CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */


/* End CONST: REQUESTED_INCOMPATIBLE_QOS_STATUS */


/* Begin CONST: SAMPLE_LOST_STATUS */


/* End CONST: SAMPLE_LOST_STATUS */


/* Begin CONST: SAMPLE_REJECTED_STATUS */


/* End CONST: SAMPLE_REJECTED_STATUS */


/* Begin CONST: DATA_ON_READERS_STATUS */


/* End CONST: DATA_ON_READERS_STATUS */


/* Begin CONST: DATA_AVAILABLE_STATUS */


/* End CONST: DATA_AVAILABLE_STATUS */


/* Begin CONST: LIVELINESS_LOST_STATUS */


/* End CONST: LIVELINESS_LOST_STATUS */


/* Begin CONST: LIVELINESS_CHANGED_STATUS */


/* End CONST: LIVELINESS_CHANGED_STATUS */


/* Begin CONST: PUBLICATION_MATCHED_STATUS */


/* End CONST: PUBLICATION_MATCHED_STATUS */


/* Begin CONST: SUBSCRIPTION_MATCHED_STATUS */


/* End CONST: SUBSCRIPTION_MATCHED_STATUS */


/* Begin STRUCT: InconsistentTopicStatus */


/* End STRUCT: InconsistentTopicStatus */


/* Begin STRUCT: SampleLostStatus */


/* End STRUCT: SampleLostStatus */


/* Begin ENUM: SampleRejectedStatusKind */


/* End ENUM: SampleRejectedStatusKind */


/* Begin STRUCT: SampleRejectedStatus */


/* End STRUCT: SampleRejectedStatus */


/* Begin STRUCT: LivelinessLostStatus */


/* End STRUCT: LivelinessLostStatus */


/* Begin STRUCT: LivelinessChangedStatus */


/* End STRUCT: LivelinessChangedStatus */


/* Begin STRUCT: OfferedDeadlineMissedStatus */


/* End STRUCT: OfferedDeadlineMissedStatus */


/* Begin STRUCT: RequestedDeadlineMissedStatus */


/* End STRUCT: RequestedDeadlineMissedStatus */


/* Begin STRUCT: OfferedIncompatibleQosStatus */


/* End STRUCT: OfferedIncompatibleQosStatus */


/* Begin STRUCT: RequestedIncompatibleQosStatus */


/* End STRUCT: RequestedIncompatibleQosStatus */


/* Begin STRUCT: PublicationMatchedStatus */


/* End STRUCT: PublicationMatchedStatus */


/* Begin STRUCT: SubscriptionMatchedStatus */


/* End STRUCT: SubscriptionMatchedStatus */


/* Begin INTERFACE-FWD: Listener */


/* End INTERFACE-FWD: Listener */


/* Begin INTERFACE-FWD: Entity */


/* End INTERFACE-FWD: Entity */


/* Begin INTERFACE: Listener */


/* End INTERFACE: Listener */


/* Begin INTERFACE: Condition */


/* End INTERFACE: Condition */


/* Begin INTERFACE: WaitSetInterf */


/* End INTERFACE: WaitSetInterf */


/* Begin INTERFACE: GuardConditionInterf */


/* End INTERFACE: GuardConditionInterf */


/* Begin INTERFACE: StatusCondition */


/* End INTERFACE: StatusCondition */


/* Begin CONST: USERDATA_QOS_POLICY_NAME */


/* End CONST: USERDATA_QOS_POLICY_NAME */


/* Begin CONST: DURABILITY_QOS_POLICY_NAME */


/* End CONST: DURABILITY_QOS_POLICY_NAME */


/* Begin CONST: PRESENTATION_QOS_POLICY_NAME */


/* End CONST: PRESENTATION_QOS_POLICY_NAME */


/* Begin CONST: DEADLINE_QOS_POLICY_NAME */


/* End CONST: DEADLINE_QOS_POLICY_NAME */


/* Begin CONST: LATENCYBUDGET_QOS_POLICY_NAME */


/* End CONST: LATENCYBUDGET_QOS_POLICY_NAME */


/* Begin CONST: OWNERSHIP_QOS_POLICY_NAME */


/* End CONST: OWNERSHIP_QOS_POLICY_NAME */


/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */


/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_NAME */


/* Begin CONST: LIVELINESS_QOS_POLICY_NAME */


/* End CONST: LIVELINESS_QOS_POLICY_NAME */


/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */


/* End CONST: TIMEBASEDFILTER_QOS_POLICY_NAME */


/* Begin CONST: PARTITION_QOS_POLICY_NAME */


/* End CONST: PARTITION_QOS_POLICY_NAME */


/* Begin CONST: RELIABILITY_QOS_POLICY_NAME */


/* End CONST: RELIABILITY_QOS_POLICY_NAME */


/* Begin CONST: DESTINATIONORDER_QOS_POLICY_NAME */


/* End CONST: DESTINATIONORDER_QOS_POLICY_NAME */


/* Begin CONST: HISTORY_QOS_POLICY_NAME */


/* End CONST: HISTORY_QOS_POLICY_NAME */


/* Begin CONST: RESOURCELIMITS_QOS_POLICY_NAME */


/* End CONST: RESOURCELIMITS_QOS_POLICY_NAME */


/* Begin CONST: ENTITYFACTORY_QOS_POLICY_NAME */


/* End CONST: ENTITYFACTORY_QOS_POLICY_NAME */


/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */


/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_NAME */


/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */


/* End CONST: READERDATALIFECYCLE_QOS_POLICY_NAME */


/* Begin CONST: TOPICDATA_QOS_POLICY_NAME */


/* End CONST: TOPICDATA_QOS_POLICY_NAME */


/* Begin CONST: GROUPDATA_QOS_POLICY_NAME */


/* End CONST: GROUPDATA_QOS_POLICY_NAME */


/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */


/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_NAME */


/* Begin CONST: LIFESPAN_QOS_POLICY_NAME */


/* End CONST: LIFESPAN_QOS_POLICY_NAME */


/* Begin CONST: DURABILITYSERVICE_POLICY_NAME */


/* End CONST: DURABILITYSERVICE_POLICY_NAME */


/* Begin CONST: INVALID_QOS_POLICY_ID */


/* End CONST: INVALID_QOS_POLICY_ID */


/* Begin CONST: USERDATA_QOS_POLICY_ID */


/* End CONST: USERDATA_QOS_POLICY_ID */


/* Begin CONST: DURABILITY_QOS_POLICY_ID */


/* End CONST: DURABILITY_QOS_POLICY_ID */


/* Begin CONST: PRESENTATION_QOS_POLICY_ID */


/* End CONST: PRESENTATION_QOS_POLICY_ID */


/* Begin CONST: DEADLINE_QOS_POLICY_ID */


/* End CONST: DEADLINE_QOS_POLICY_ID */


/* Begin CONST: LATENCYBUDGET_QOS_POLICY_ID */


/* End CONST: LATENCYBUDGET_QOS_POLICY_ID */


/* Begin CONST: OWNERSHIP_QOS_POLICY_ID */


/* End CONST: OWNERSHIP_QOS_POLICY_ID */


/* Begin CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */


/* End CONST: OWNERSHIPSTRENGTH_QOS_POLICY_ID */


/* Begin CONST: LIVELINESS_QOS_POLICY_ID */


/* End CONST: LIVELINESS_QOS_POLICY_ID */


/* Begin CONST: TIMEBASEDFILTER_QOS_POLICY_ID */


/* End CONST: TIMEBASEDFILTER_QOS_POLICY_ID */


/* Begin CONST: PARTITION_QOS_POLICY_ID */


/* End CONST: PARTITION_QOS_POLICY_ID */


/* Begin CONST: RELIABILITY_QOS_POLICY_ID */


/* End CONST: RELIABILITY_QOS_POLICY_ID */


/* Begin CONST: DESTINATIONORDER_QOS_POLICY_ID */


/* End CONST: DESTINATIONORDER_QOS_POLICY_ID */


/* Begin CONST: HISTORY_QOS_POLICY_ID */


/* End CONST: HISTORY_QOS_POLICY_ID */


/* Begin CONST: RESOURCELIMITS_QOS_POLICY_ID */


/* End CONST: RESOURCELIMITS_QOS_POLICY_ID */


/* Begin CONST: ENTITYFACTORY_QOS_POLICY_ID */


/* End CONST: ENTITYFACTORY_QOS_POLICY_ID */


/* Begin CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */


/* End CONST: WRITERDATALIFECYCLE_QOS_POLICY_ID */


/* Begin CONST: READERDATALIFECYCLE_QOS_POLICY_ID */


/* End CONST: READERDATALIFECYCLE_QOS_POLICY_ID */


/* Begin CONST: TOPICDATA_QOS_POLICY_ID */


/* End CONST: TOPICDATA_QOS_POLICY_ID */


/* Begin CONST: GROUPDATA_QOS_POLICY_ID */


/* End CONST: GROUPDATA_QOS_POLICY_ID */


/* Begin CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */


/* End CONST: TRANSPORTPRIORITY_QOS_POLICY_ID */


/* Begin CONST: LIFESPAN_QOS_POLICY_ID */


/* End CONST: LIFESPAN_QOS_POLICY_ID */


/* Begin CONST: DURABILITYSERVICE_QOS_POLICY_ID */


/* End CONST: DURABILITYSERVICE_QOS_POLICY_ID */


/* Begin INTERFACE: Entity */


/* End INTERFACE: Entity */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_NAME */


/* End CONST: TRANSPORTTYPE_QOS_POLICY_NAME */


/* Begin CONST: TRANSPORTTYPE_QOS_POLICY_ID */


/* End CONST: TRANSPORTTYPE_QOS_POLICY_ID */


/* Begin CONST: MAX_USER_DOMAINID */


/* End CONST: MAX_USER_DOMAINID */


/* Begin MODULE: DCPS */



/* Begin CONST: ALL_STATUS_MASK */


/* End CONST: ALL_STATUS_MASK */


/* Begin CONST: NO_STATUS_MASK */


/* End CONST: NO_STATUS_MASK */


/* Begin CONST: DEFAULT_STATUS_MASK */


/* End CONST: DEFAULT_STATUS_MASK */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: Topic */


/* End INTERFACE-FWD: Topic */


/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataWriter */


/* End INTERFACE-FWD: DataWriter */


/* Begin INTERFACE-FWD: Publisher */


/* End INTERFACE-FWD: Publisher */


/* Begin INTERFACE: DataWriterListener */


/* End INTERFACE: DataWriterListener */


/* Begin INTERFACE: PublisherListener */


/* End INTERFACE: PublisherListener */


/* Begin INTERFACE: DataWriter */


/* End INTERFACE: DataWriter */


/* Begin INTERFACE: Publisher */


/* End INTERFACE: Publisher */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin STRUCT: PublicationLostStatus */


/* End STRUCT: PublicationLostStatus */


/* Begin TYPEDEF: PublicationDisconnectedStatus */


/* End TYPEDEF: PublicationDisconnectedStatus */


/* Begin TYPEDEF: PublicationReconnectedStatus */


/* End TYPEDEF: PublicationReconnectedStatus */


/* Begin TYPEDEF: DisassociationStatus */


/* End TYPEDEF: DisassociationStatus */


/* Begin INTERFACE: DataWriterListener */


/* End INTERFACE: DataWriterListener */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: DataReader */


/* End INTERFACE-FWD: DataReader */


/* Begin TYPEDEF: DataReaderSeq */


/* End TYPEDEF: DataReaderSeq */

/* End MODULE: DDS */


/* Begin MODULE: DDS */



/* Begin INTERFACE-FWD: TopicDescription */


/* End INTERFACE-FWD: TopicDescription */


/* Begin INTERFACE-FWD: DomainParticipant */


/* End INTERFACE-FWD: DomainParticipant */


/* Begin INTERFACE-FWD: DataReader */


/* End INTERFACE-FWD: DataReader */


/* Begin INTERFACE-FWD: Subscriber */


/* End INTERFACE-FWD: Subscriber */


/* Begin INTERFACE: DataReaderListener */


/* End INTERFACE: DataReaderListener */


/* Begin INTERFACE: SubscriberListener */


/* End INTERFACE: SubscriberListener */


/* Begin INTERFACE: ReadCondition */


/* End INTERFACE: ReadCondition */


/* Begin INTERFACE: QueryCondition */


/* End INTERFACE: QueryCondition */


/* Begin INTERFACE: DataReader */


/* End INTERFACE: DataReader */


/* Begin INTERFACE: Subscriber */


/* End INTERFACE: Subscriber */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DataWriterRemote */


/* End INTERFACE: DataWriterRemote */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DataReaderRemote */


/* End INTERFACE: DataReaderRemote */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin INTERFACE: DCPSInfo */


/* End INTERFACE: DCPSInfo */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */

/* End MODULE: CORBA */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: Federator */



/* Begin TYPEDEF: RepoKey */


/* End TYPEDEF: RepoKey */


/* Begin TYPEDEF: FederationDomain */


/* End TYPEDEF: FederationDomain */


/* Begin TYPEDEF: FederationId */


/* End TYPEDEF: FederationId */


/* Begin ENUM: UpdateType */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, const OpenDDS::Federator::UpdateType& enumval);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, OpenDDS::Federator::UpdateType& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Federator_Export extern const char* gen_OpenDDS_Federator_UpdateType_names[];
OpenDDS_Federator_Export extern const size_t gen_OpenDDS_Federator_UpdateType_names_size;
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: UpdateType */


/* Begin CONST: NIL_REPOSITORY */


/* End CONST: NIL_REPOSITORY */


/* Begin CONST: DEFAULT_FEDERATIONDOMAIN */


/* End CONST: DEFAULT_FEDERATIONDOMAIN */


/* Begin CONST: ANY_FEDERATIONDOMAIN */


/* End CONST: ANY_FEDERATIONDOMAIN */


/* Begin STRUCT: OwnerUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Federator_Export
void gen_find_size(const OpenDDS::Federator::OwnerUpdate& stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, const OpenDDS::Federator::OwnerUpdate& stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, OpenDDS::Federator::OwnerUpdate& stru);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(const OpenDDS::Federator::OwnerUpdate& stru, bool align);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::OwnerUpdate> stru, bool align);

OpenDDS_Federator_Export
void gen_find_size(KeyOnly<const OpenDDS::Federator::OwnerUpdate> stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::OwnerUpdate> stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::OwnerUpdate> stru);

template <>
struct MarshalTraits<OpenDDS::Federator::OwnerUpdate> {
  static bool gen_is_bounded_size() { return true; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct OpenDDS_Federator_Export OwnerUpdate_OpenDDS_KeyLessThan {
  bool operator()(const OpenDDS::Federator::OwnerUpdate& v1, const OpenDDS::Federator::OwnerUpdate& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.sender < v2.sender) return true;
    if (v2.sender < v1.sender) return false;
    return false;
  }
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class OwnerUpdateTypeSupportImpl;
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<OpenDDS::Federator::OwnerUpdate> {
  typedef OpenDDS::Federator::OwnerUpdate MessageType;
  typedef OpenDDS::Federator::OwnerUpdateSeq MessageSequenceType;
  typedef OpenDDS::Federator::OwnerUpdateTypeSupport TypeSupportType;
  typedef OpenDDS::Federator::OwnerUpdateTypeSupportImpl TypeSupportTypeImpl;
  typedef OpenDDS::Federator::OwnerUpdateDataWriter DataWriterType;
  typedef OpenDDS::Federator::OwnerUpdateDataReader DataReaderType;
  typedef OpenDDS::Federator::OwnerUpdate_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "OpenDDS::Federator::OwnerUpdate"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class OpenDDS_Federator_Export OwnerUpdateTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<OwnerUpdateTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<OwnerUpdate> TraitsType;
  typedef OwnerUpdateTypeSupport TypeSupportType;
  typedef OwnerUpdateTypeSupport::_var_type _var_type;
  typedef OwnerUpdateTypeSupport::_ptr_type _ptr_type;

  OwnerUpdateTypeSupportImpl() {}
  virtual ~OwnerUpdateTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static OwnerUpdateTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
OpenDDS_Federator_Export
const MetaStruct& getMetaStruct<OpenDDS::Federator::OwnerUpdate>();
OpenDDS_Federator_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Federator::OwnerUpdate*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: OwnerUpdate */


/* Begin CONST: OWNERUPDATETOPICNAME */


/* End CONST: OWNERUPDATETOPICNAME */


/* Begin CONST: OWNERUPDATETYPENAME */


/* End CONST: OWNERUPDATETYPENAME */


/* Begin STRUCT: TopicUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Federator_Export
void gen_find_size(const OpenDDS::Federator::TopicUpdate& stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, const OpenDDS::Federator::TopicUpdate& stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, OpenDDS::Federator::TopicUpdate& stru);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(const OpenDDS::Federator::TopicUpdate& stru, bool align);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::TopicUpdate> stru, bool align);

OpenDDS_Federator_Export
void gen_find_size(KeyOnly<const OpenDDS::Federator::TopicUpdate> stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::TopicUpdate> stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::TopicUpdate> stru);

template <>
struct MarshalTraits<OpenDDS::Federator::TopicUpdate> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct OpenDDS_Federator_Export TopicUpdate_OpenDDS_KeyLessThan {
  bool operator()(const OpenDDS::Federator::TopicUpdate& v1, const OpenDDS::Federator::TopicUpdate& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.sender < v2.sender) return true;
    if (v2.sender < v1.sender) return false;
    return false;
  }
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class TopicUpdateTypeSupportImpl;
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<OpenDDS::Federator::TopicUpdate> {
  typedef OpenDDS::Federator::TopicUpdate MessageType;
  typedef OpenDDS::Federator::TopicUpdateSeq MessageSequenceType;
  typedef OpenDDS::Federator::TopicUpdateTypeSupport TypeSupportType;
  typedef OpenDDS::Federator::TopicUpdateTypeSupportImpl TypeSupportTypeImpl;
  typedef OpenDDS::Federator::TopicUpdateDataWriter DataWriterType;
  typedef OpenDDS::Federator::TopicUpdateDataReader DataReaderType;
  typedef OpenDDS::Federator::TopicUpdate_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "OpenDDS::Federator::TopicUpdate"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class OpenDDS_Federator_Export TopicUpdateTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<TopicUpdateTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<TopicUpdate> TraitsType;
  typedef TopicUpdateTypeSupport TypeSupportType;
  typedef TopicUpdateTypeSupport::_var_type _var_type;
  typedef TopicUpdateTypeSupport::_ptr_type _ptr_type;

  TopicUpdateTypeSupportImpl() {}
  virtual ~TopicUpdateTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static TopicUpdateTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Federator_Export
const MetaStruct& getMetaStruct<OpenDDS::Federator::TopicUpdate>();
OpenDDS_Federator_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Federator::TopicUpdate*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: TopicUpdate */


/* Begin CONST: TOPICUPDATETOPICNAME */


/* End CONST: TOPICUPDATETOPICNAME */


/* Begin CONST: TOPICUPDATETYPENAME */


/* End CONST: TOPICUPDATETYPENAME */


/* Begin STRUCT: ParticipantUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Federator_Export
void gen_find_size(const OpenDDS::Federator::ParticipantUpdate& stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, const OpenDDS::Federator::ParticipantUpdate& stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, OpenDDS::Federator::ParticipantUpdate& stru);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(const OpenDDS::Federator::ParticipantUpdate& stru, bool align);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::ParticipantUpdate> stru, bool align);

OpenDDS_Federator_Export
void gen_find_size(KeyOnly<const OpenDDS::Federator::ParticipantUpdate> stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::ParticipantUpdate> stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::ParticipantUpdate> stru);

template <>
struct MarshalTraits<OpenDDS::Federator::ParticipantUpdate> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct OpenDDS_Federator_Export ParticipantUpdate_OpenDDS_KeyLessThan {
  bool operator()(const OpenDDS::Federator::ParticipantUpdate& v1, const OpenDDS::Federator::ParticipantUpdate& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.sender < v2.sender) return true;
    if (v2.sender < v1.sender) return false;
    return false;
  }
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class ParticipantUpdateTypeSupportImpl;
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<OpenDDS::Federator::ParticipantUpdate> {
  typedef OpenDDS::Federator::ParticipantUpdate MessageType;
  typedef OpenDDS::Federator::ParticipantUpdateSeq MessageSequenceType;
  typedef OpenDDS::Federator::ParticipantUpdateTypeSupport TypeSupportType;
  typedef OpenDDS::Federator::ParticipantUpdateTypeSupportImpl TypeSupportTypeImpl;
  typedef OpenDDS::Federator::ParticipantUpdateDataWriter DataWriterType;
  typedef OpenDDS::Federator::ParticipantUpdateDataReader DataReaderType;
  typedef OpenDDS::Federator::ParticipantUpdate_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "OpenDDS::Federator::ParticipantUpdate"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class OpenDDS_Federator_Export ParticipantUpdateTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<ParticipantUpdateTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<ParticipantUpdate> TraitsType;
  typedef ParticipantUpdateTypeSupport TypeSupportType;
  typedef ParticipantUpdateTypeSupport::_var_type _var_type;
  typedef ParticipantUpdateTypeSupport::_ptr_type _ptr_type;

  ParticipantUpdateTypeSupportImpl() {}
  virtual ~ParticipantUpdateTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static ParticipantUpdateTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Federator_Export
const MetaStruct& getMetaStruct<OpenDDS::Federator::ParticipantUpdate>();
OpenDDS_Federator_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Federator::ParticipantUpdate*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ParticipantUpdate */


/* Begin CONST: PARTICIPANTUPDATETOPICNAME */


/* End CONST: PARTICIPANTUPDATETOPICNAME */


/* Begin CONST: PARTICIPANTUPDATETYPENAME */


/* End CONST: PARTICIPANTUPDATETYPENAME */


/* Begin STRUCT: PublicationUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Federator_Export
void gen_find_size(const OpenDDS::Federator::PublicationUpdate& stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, const OpenDDS::Federator::PublicationUpdate& stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, OpenDDS::Federator::PublicationUpdate& stru);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(const OpenDDS::Federator::PublicationUpdate& stru, bool align);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::PublicationUpdate> stru, bool align);

OpenDDS_Federator_Export
void gen_find_size(KeyOnly<const OpenDDS::Federator::PublicationUpdate> stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::PublicationUpdate> stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::PublicationUpdate> stru);

template <>
struct MarshalTraits<OpenDDS::Federator::PublicationUpdate> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct OpenDDS_Federator_Export PublicationUpdate_OpenDDS_KeyLessThan {
  bool operator()(const OpenDDS::Federator::PublicationUpdate& v1, const OpenDDS::Federator::PublicationUpdate& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.sender < v2.sender) return true;
    if (v2.sender < v1.sender) return false;
    return false;
  }
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class PublicationUpdateTypeSupportImpl;
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<OpenDDS::Federator::PublicationUpdate> {
  typedef OpenDDS::Federator::PublicationUpdate MessageType;
  typedef OpenDDS::Federator::PublicationUpdateSeq MessageSequenceType;
  typedef OpenDDS::Federator::PublicationUpdateTypeSupport TypeSupportType;
  typedef OpenDDS::Federator::PublicationUpdateTypeSupportImpl TypeSupportTypeImpl;
  typedef OpenDDS::Federator::PublicationUpdateDataWriter DataWriterType;
  typedef OpenDDS::Federator::PublicationUpdateDataReader DataReaderType;
  typedef OpenDDS::Federator::PublicationUpdate_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "OpenDDS::Federator::PublicationUpdate"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class OpenDDS_Federator_Export PublicationUpdateTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<PublicationUpdateTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<PublicationUpdate> TraitsType;
  typedef PublicationUpdateTypeSupport TypeSupportType;
  typedef PublicationUpdateTypeSupport::_var_type _var_type;
  typedef PublicationUpdateTypeSupport::_ptr_type _ptr_type;

  PublicationUpdateTypeSupportImpl() {}
  virtual ~PublicationUpdateTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static PublicationUpdateTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Federator_Export
const MetaStruct& getMetaStruct<OpenDDS::Federator::PublicationUpdate>();
OpenDDS_Federator_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Federator::PublicationUpdate*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: PublicationUpdate */


/* Begin CONST: PUBLICATIONUPDATETOPICNAME */


/* End CONST: PUBLICATIONUPDATETOPICNAME */


/* Begin CONST: PUBLICATIONUPDATETYPENAME */


/* End CONST: PUBLICATIONUPDATETYPENAME */


/* Begin STRUCT: SubscriptionUpdate */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Federator_Export
void gen_find_size(const OpenDDS::Federator::SubscriptionUpdate& stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, const OpenDDS::Federator::SubscriptionUpdate& stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, OpenDDS::Federator::SubscriptionUpdate& stru);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(const OpenDDS::Federator::SubscriptionUpdate& stru, bool align);

OpenDDS_Federator_Export
size_t gen_max_marshaled_size(KeyOnly<const OpenDDS::Federator::SubscriptionUpdate> stru, bool align);

OpenDDS_Federator_Export
void gen_find_size(KeyOnly<const OpenDDS::Federator::SubscriptionUpdate> stru, size_t& size, size_t& padding);

OpenDDS_Federator_Export
bool operator<<(Serializer& strm, KeyOnly<const OpenDDS::Federator::SubscriptionUpdate> stru);

OpenDDS_Federator_Export
bool operator>>(Serializer& strm, KeyOnly<OpenDDS::Federator::SubscriptionUpdate> stru);

template <>
struct MarshalTraits<OpenDDS::Federator::SubscriptionUpdate> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
// This structure supports use of std::map with a key
// defined by one or more #pragma DCPS_DATA_KEY lines.
struct OpenDDS_Federator_Export SubscriptionUpdate_OpenDDS_KeyLessThan {
  bool operator()(const OpenDDS::Federator::SubscriptionUpdate& v1, const OpenDDS::Federator::SubscriptionUpdate& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.sender < v2.sender) return true;
    if (v2.sender < v1.sender) return false;
    return false;
  }
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class SubscriptionUpdateTypeSupportImpl;
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<OpenDDS::Federator::SubscriptionUpdate> {
  typedef OpenDDS::Federator::SubscriptionUpdate MessageType;
  typedef OpenDDS::Federator::SubscriptionUpdateSeq MessageSequenceType;
  typedef OpenDDS::Federator::SubscriptionUpdateTypeSupport TypeSupportType;
  typedef OpenDDS::Federator::SubscriptionUpdateTypeSupportImpl TypeSupportTypeImpl;
  typedef OpenDDS::Federator::SubscriptionUpdateDataWriter DataWriterType;
  typedef OpenDDS::Federator::SubscriptionUpdateDataReader DataReaderType;
  typedef OpenDDS::Federator::SubscriptionUpdate_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "OpenDDS::Federator::SubscriptionUpdate"; }
  static bool gen_has_key () { return true; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS {
namespace Federator {
class OpenDDS_Federator_Export SubscriptionUpdateTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<SubscriptionUpdateTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<SubscriptionUpdate> TraitsType;
  typedef SubscriptionUpdateTypeSupport TypeSupportType;
  typedef SubscriptionUpdateTypeSupport::_var_type _var_type;
  typedef SubscriptionUpdateTypeSupport::_ptr_type _ptr_type;

  SubscriptionUpdateTypeSupportImpl() {}
  virtual ~SubscriptionUpdateTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static SubscriptionUpdateTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}
}
OPENDDS_END_VERSIONED_NAMESPACE_DECL
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Federator_Export
const MetaStruct& getMetaStruct<OpenDDS::Federator::SubscriptionUpdate>();
OpenDDS_Federator_Export
bool gen_skip_over(Serializer& ser, OpenDDS::Federator::SubscriptionUpdate*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SubscriptionUpdate */


/* Begin CONST: SUBSCRIPTIONUPDATETOPICNAME */


/* End CONST: SUBSCRIPTIONUPDATETOPICNAME */


/* Begin CONST: SUBSCRIPTIONUPDATETYPENAME */


/* End CONST: SUBSCRIPTIONUPDATETYPENAME */


/* Begin EXCEPTION: Incomplete */


/* End EXCEPTION: Incomplete */


/* Begin INTERFACE: Manager */


/* End INTERFACE: Manager */


/* Begin CONST: REPOSITORY_IORTABLE_KEY */


/* End CONST: REPOSITORY_IORTABLE_KEY */


/* Begin CONST: FEDERATOR_IORTABLE_KEY */


/* End CONST: FEDERATOR_IORTABLE_KEY */

/* End MODULE: Federator */

/* End MODULE: OpenDDS */
#endif /* OPENDDS_IDL_GENERATED_FEDERATORTYPESUPPORTIMPL_H_MWEBVQ */

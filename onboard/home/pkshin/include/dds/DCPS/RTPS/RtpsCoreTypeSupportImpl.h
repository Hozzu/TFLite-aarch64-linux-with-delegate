/* -*- C++ -*- */
/* Generated by /home/shan/git/bsp/adcm_bsp_sa8195/sources/apps/apps_proc/poky/build/tmp-glibc/work/aarch64-oe-linux/opendds/1.0+gitAUTOINC+0810ffc3f5-r7/recipe-sysroot-native/usr/bin/DDS_HOST_ROOT/bin/opendds_idl version 3.13 (ACE version 6.5.12) running on input file RtpsCore.idl */
#ifndef OPENDDS_IDL_GENERATED_RTPSCORETYPESUPPORTIMPL_H_BZ56CF
#define OPENDDS_IDL_GENERATED_RTPSCORETYPESUPPORTIMPL_H_BZ56CF
#include "RtpsCoreC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DdsDcpsInfoUtilsC.h"
#include "dds/DdsSecurityParamsC.h"
#include "rtps_export.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */

/* End MODULE: CORBA */


/* Begin MODULE: CORBA */



/* Begin TYPEDEF: LongSeq */


/* End TYPEDEF: LongSeq */

/* End MODULE: CORBA */


/* Begin MODULE: DDS */



/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin TYPEDEF: InstanceHandle_t */


/* End TYPEDEF: InstanceHandle_t */


/* Begin TYPEDEF: BuiltinTopicKeyValue */


/* End TYPEDEF: BuiltinTopicKeyValue */


/* Begin TYPEDEF: InstanceHandleSeq */


/* End TYPEDEF: InstanceHandleSeq */


/* Begin TYPEDEF: QosPolicyId_t */


/* End TYPEDEF: QosPolicyId_t */


/* Begin STRUCT: QosPolicyCount */


/* End STRUCT: QosPolicyCount */


/* Begin TYPEDEF: QosPolicyCountSeq */


/* End TYPEDEF: QosPolicyCountSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin STRUCT: Duration_t */


/* End STRUCT: Duration_t */


/* Begin CONST: DURATION_INFINITE_SEC */


/* End CONST: DURATION_INFINITE_SEC */


/* Begin CONST: DURATION_INFINITE_NSEC */


/* End CONST: DURATION_INFINITE_NSEC */


/* Begin CONST: DURATION_ZERO_SEC */


/* End CONST: DURATION_ZERO_SEC */


/* Begin CONST: DURATION_ZERO_NSEC */


/* End CONST: DURATION_ZERO_NSEC */


/* Begin STRUCT: Property_t */


/* End STRUCT: Property_t */


/* Begin TYPEDEF: PropertySeq */


/* End TYPEDEF: PropertySeq */


/* Begin STRUCT: BinaryProperty_t */


/* End STRUCT: BinaryProperty_t */


/* Begin TYPEDEF: BinaryPropertySeq */


/* End TYPEDEF: BinaryPropertySeq */


/* Begin STRUCT: PropertyQosPolicy */


/* End STRUCT: PropertyQosPolicy */


/* Begin STRUCT: UserDataQosPolicy */


/* End STRUCT: UserDataQosPolicy */


/* Begin STRUCT: GroupDataQosPolicy */


/* End STRUCT: GroupDataQosPolicy */


/* Begin STRUCT: TopicDataQosPolicy */


/* End STRUCT: TopicDataQosPolicy */


/* Begin STRUCT: PartitionQosPolicy */


/* End STRUCT: PartitionQosPolicy */


/* Begin ENUM: HistoryQosPolicyKind */


/* End ENUM: HistoryQosPolicyKind */


/* Begin ENUM: DurabilityQosPolicyKind */


/* End ENUM: DurabilityQosPolicyKind */


/* Begin STRUCT: DurabilityQosPolicy */


/* End STRUCT: DurabilityQosPolicy */


/* Begin STRUCT: DurabilityServiceQosPolicy */


/* End STRUCT: DurabilityServiceQosPolicy */


/* Begin STRUCT: DeadlineQosPolicy */


/* End STRUCT: DeadlineQosPolicy */


/* Begin STRUCT: LatencyBudgetQosPolicy */


/* End STRUCT: LatencyBudgetQosPolicy */


/* Begin ENUM: LivelinessQosPolicyKind */


/* End ENUM: LivelinessQosPolicyKind */


/* Begin STRUCT: LivelinessQosPolicy */


/* End STRUCT: LivelinessQosPolicy */


/* Begin ENUM: ReliabilityQosPolicyKind */


/* End ENUM: ReliabilityQosPolicyKind */


/* Begin STRUCT: ReliabilityQosPolicy */


/* End STRUCT: ReliabilityQosPolicy */


/* Begin ENUM: DestinationOrderQosPolicyKind */


/* End ENUM: DestinationOrderQosPolicyKind */


/* Begin STRUCT: DestinationOrderQosPolicy */


/* End STRUCT: DestinationOrderQosPolicy */


/* Begin STRUCT: HistoryQosPolicy */


/* End STRUCT: HistoryQosPolicy */


/* Begin STRUCT: ResourceLimitsQosPolicy */


/* End STRUCT: ResourceLimitsQosPolicy */


/* Begin STRUCT: TransportPriorityQosPolicy */


/* End STRUCT: TransportPriorityQosPolicy */


/* Begin STRUCT: LifespanQosPolicy */


/* End STRUCT: LifespanQosPolicy */


/* Begin ENUM: OwnershipQosPolicyKind */


/* End ENUM: OwnershipQosPolicyKind */


/* Begin STRUCT: OwnershipQosPolicy */


/* End STRUCT: OwnershipQosPolicy */


/* Begin STRUCT: OwnershipStrengthQosPolicy */


/* End STRUCT: OwnershipStrengthQosPolicy */


/* Begin ENUM: PresentationQosPolicyAccessScopeKind */


/* End ENUM: PresentationQosPolicyAccessScopeKind */


/* Begin STRUCT: PresentationQosPolicy */


/* End STRUCT: PresentationQosPolicy */


/* Begin STRUCT: TimeBasedFilterQosPolicy */


/* End STRUCT: TimeBasedFilterQosPolicy */


/* Begin STRUCT: TopicQos */


/* End STRUCT: TopicQos */


/* Begin STRUCT: WriterDataLifecycleQosPolicy */


/* End STRUCT: WriterDataLifecycleQosPolicy */


/* Begin STRUCT: DataWriterQos */


/* End STRUCT: DataWriterQos */


/* Begin STRUCT: EntityFactoryQosPolicy */


/* End STRUCT: EntityFactoryQosPolicy */


/* Begin STRUCT: PublisherQos */


/* End STRUCT: PublisherQos */


/* Begin STRUCT: ReaderDataLifecycleQosPolicy */


/* End STRUCT: ReaderDataLifecycleQosPolicy */


/* Begin STRUCT: DataReaderQos */


/* End STRUCT: DataReaderQos */


/* Begin STRUCT: SubscriberQos */


/* End STRUCT: SubscriberQos */


/* Begin STRUCT: DomainParticipantFactoryQos */


/* End STRUCT: DomainParticipantFactoryQos */


/* Begin STRUCT: DomainParticipantQos */


/* End STRUCT: DomainParticipantQos */


/* Begin STRUCT: BuiltinTopicKey_t */


/* End STRUCT: BuiltinTopicKey_t */


/* Begin STRUCT: ParticipantBuiltinTopicData */


/* End STRUCT: ParticipantBuiltinTopicData */


/* Begin STRUCT: PublicationBuiltinTopicData */


/* End STRUCT: PublicationBuiltinTopicData */


/* Begin STRUCT: SubscriptionBuiltinTopicData */


/* End STRUCT: SubscriptionBuiltinTopicData */


/* Begin STRUCT: TopicBuiltinTopicData */


/* End STRUCT: TopicBuiltinTopicData */


/* Begin TYPEDEF: SampleStateKind */


/* End TYPEDEF: SampleStateKind */


/* Begin CONST: READ_SAMPLE_STATE */


/* End CONST: READ_SAMPLE_STATE */


/* Begin CONST: NOT_READ_SAMPLE_STATE */


/* End CONST: NOT_READ_SAMPLE_STATE */


/* Begin TYPEDEF: SampleStateMask */


/* End TYPEDEF: SampleStateMask */


/* Begin CONST: ANY_SAMPLE_STATE */


/* End CONST: ANY_SAMPLE_STATE */


/* Begin TYPEDEF: ViewStateKind */


/* End TYPEDEF: ViewStateKind */


/* Begin CONST: NEW_VIEW_STATE */


/* End CONST: NEW_VIEW_STATE */


/* Begin CONST: NOT_NEW_VIEW_STATE */


/* End CONST: NOT_NEW_VIEW_STATE */


/* Begin TYPEDEF: ViewStateMask */


/* End TYPEDEF: ViewStateMask */


/* Begin CONST: ANY_VIEW_STATE */


/* End CONST: ANY_VIEW_STATE */


/* Begin TYPEDEF: InstanceStateKind */


/* End TYPEDEF: InstanceStateKind */


/* Begin CONST: ALIVE_INSTANCE_STATE */


/* End CONST: ALIVE_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_DISPOSED_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_NO_WRITERS_INSTANCE_STATE */


/* Begin TYPEDEF: InstanceStateMask */


/* End TYPEDEF: InstanceStateMask */


/* Begin CONST: ANY_INSTANCE_STATE */


/* End CONST: ANY_INSTANCE_STATE */


/* Begin CONST: NOT_ALIVE_INSTANCE_STATE */


/* End CONST: NOT_ALIVE_INSTANCE_STATE */


/* Begin STRUCT: Time_t */


/* End STRUCT: Time_t */


/* Begin CONST: TIME_INVALID_SEC */


/* End CONST: TIME_INVALID_SEC */


/* Begin CONST: TIME_INVALID_NSEC */


/* End CONST: TIME_INVALID_NSEC */


/* Begin STRUCT: SampleInfo */


/* End STRUCT: SampleInfo */


/* Begin TYPEDEF: SampleInfoSeq */


/* End TYPEDEF: SampleInfoSeq */

/* End MODULE: DDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: GuidVendorId_t */


/* End TYPEDEF: GuidVendorId_t */


/* Begin TYPEDEF: GuidPrefix_t */


/* End TYPEDEF: GuidPrefix_t */


/* Begin TYPEDEF: EntityKey_t */


/* End TYPEDEF: EntityKey_t */


/* Begin STRUCT: EntityId_t */


/* End STRUCT: EntityId_t */


/* Begin CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* End CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* Begin CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* End CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_TOPIC */


/* End CONST: ENTITYKIND_BUILTIN_TOPIC */


/* Begin CONST: ENTITYKIND_USER_UNKNOWN */


/* End CONST: ENTITYKIND_USER_UNKNOWN */


/* Begin CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_NO_KEY */


/* End CONST: ENTITYKIND_USER_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* End CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* Begin CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* End CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* Begin CONST: ENTITYKIND_OPENDDS_TOPIC */


/* End CONST: ENTITYKIND_OPENDDS_TOPIC */


/* Begin CONST: ENTITYKIND_OPENDDS_USER */


/* End CONST: ENTITYKIND_OPENDDS_USER */


/* Begin CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* End CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* Begin STRUCT: GUID_t */


/* End STRUCT: GUID_t */


/* Begin TYPEDEF: GUIDSeq */


/* End TYPEDEF: GUIDSeq */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: RepoId */


/* End TYPEDEF: RepoId */


/* Begin TYPEDEF: TransportBLOB */


/* End TYPEDEF: TransportBLOB */


/* Begin STRUCT: TransportLocator */


/* End STRUCT: TransportLocator */


/* Begin TYPEDEF: TransportLocatorSeq */


/* End TYPEDEF: TransportLocatorSeq */


/* Begin STRUCT: IncompatibleQosStatus */


/* End STRUCT: IncompatibleQosStatus */


/* Begin STRUCT: AddDomainStatus */


/* End STRUCT: AddDomainStatus */


/* Begin ENUM: TopicStatus */


/* End ENUM: TopicStatus */


/* Begin STRUCT: WriterAssociation */


/* End STRUCT: WriterAssociation */


/* Begin STRUCT: ReaderAssociation */


/* End STRUCT: ReaderAssociation */


/* Begin TYPEDEF: WriterIdSeq */


/* End TYPEDEF: WriterIdSeq */


/* Begin TYPEDEF: ReaderIdSeq */


/* End TYPEDEF: ReaderIdSeq */


/* Begin TYPEDEF: OctetArray16 */


/* End TYPEDEF: OctetArray16 */


/* Begin STRUCT: Locator_t */


/* End STRUCT: Locator_t */


/* Begin TYPEDEF: LocatorSeq */


/* End TYPEDEF: LocatorSeq */


/* Begin TYPEDEF: String256 */


/* End TYPEDEF: String256 */


/* Begin STRUCT: ContentFilterProperty_t */


/* End STRUCT: ContentFilterProperty_t */


/* Begin STRUCT: ReaderProxy_t */


/* End STRUCT: ReaderProxy_t */


/* Begin STRUCT: DiscoveredReaderData */


/* End STRUCT: DiscoveredReaderData */


/* Begin STRUCT: WriterProxy_t */


/* End STRUCT: WriterProxy_t */


/* Begin STRUCT: DiscoveredWriterData */


/* End STRUCT: DiscoveredWriterData */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */


/* Begin MODULE: OpenDDS */



/* Begin MODULE: RTPS */



/* Begin TYPEDEF: OctetArray2 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::OctetArray2_forany& arr, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::OctetArray2_forany& arr);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::OctetArray2_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::OctetArray2_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetArray2 */


/* Begin TYPEDEF: OctetArray4 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::OctetArray4_forany& arr, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::OctetArray4_forany& arr);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::OctetArray4_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::OctetArray4_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: OctetArray4 */


/* Begin TYPEDEF: FilterSignature_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FilterSignature_t_forany& arr, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FilterSignature_t_forany& arr);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FilterSignature_t_forany& arr);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::FilterSignature_t_forany*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FilterSignature_t */


/* Begin TYPEDEF: FilterResult_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FilterResult_t& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FilterResult_t& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FilterResult_t& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::FilterResult_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FilterResult_t */


/* Begin TYPEDEF: FilterSignatureSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FilterSignatureSeq& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FilterSignatureSeq& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FilterSignatureSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::FilterSignatureSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: FilterSignatureSeq */


/* Begin STRUCT: ContentFilterInfo_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ContentFilterInfo_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ContentFilterInfo_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ContentFilterInfo_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ContentFilterInfo_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::ContentFilterInfo_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ContentFilterInfo_t */


/* Begin TYPEDEF: Property_t */


/* End TYPEDEF: Property_t */


/* Begin TYPEDEF: PropertySeq */


/* End TYPEDEF: PropertySeq */


/* Begin STRUCT: EntityName_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::EntityName_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::EntityName_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::EntityName_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::EntityName_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::EntityName_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: EntityName_t */


/* Begin STRUCT: Count_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Count_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Count_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Count_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::Count_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::Count_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Count_t */


/* Begin STRUCT: SequenceNumber_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SequenceNumber_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SequenceNumber_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SequenceNumber_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SequenceNumber_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::SequenceNumber_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SequenceNumber_t */


/* Begin TYPEDEF: LongSeq8 */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::LongSeq8& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::LongSeq8& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::LongSeq8& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::LongSeq8*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LongSeq8 */


/* Begin STRUCT: SequenceNumberSet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SequenceNumberSet& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SequenceNumberSet& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SequenceNumberSet& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SequenceNumberSet>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::SequenceNumberSet*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SequenceNumberSet */


/* Begin TYPEDEF: LocatorList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::LocatorList& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::LocatorList& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::LocatorList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::LocatorList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: LocatorList */


/* Begin STRUCT: Time_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Time_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Time_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Time_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::Time_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::Time_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Time_t */


/* Begin TYPEDEF: Timestamp_t */


/* End TYPEDEF: Timestamp_t */


/* Begin TYPEDEF: Duration_t */


/* End TYPEDEF: Duration_t */


/* Begin CONST: LOCATOR_KIND_INVALID */


/* End CONST: LOCATOR_KIND_INVALID */


/* Begin CONST: LOCATOR_KIND_RESERVED */


/* End CONST: LOCATOR_KIND_RESERVED */


/* Begin CONST: LOCATOR_KIND_UDPv4 */


/* End CONST: LOCATOR_KIND_UDPv4 */


/* Begin CONST: LOCATOR_KIND_UDPv6 */


/* End CONST: LOCATOR_KIND_UDPv6 */


/* Begin CONST: LOCATOR_PORT_INVALID */


/* End CONST: LOCATOR_PORT_INVALID */


/* Begin STRUCT: LocatorUDPv4_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::LocatorUDPv4_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::LocatorUDPv4_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::LocatorUDPv4_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::LocatorUDPv4_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::LocatorUDPv4_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: LocatorUDPv4_t */


/* Begin STRUCT: TopicKind_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::TopicKind_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::TopicKind_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::TopicKind_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::TopicKind_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::TopicKind_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: TopicKind_t */


/* Begin CONST: NO_KEY */


/* End CONST: NO_KEY */


/* Begin CONST: WITH_KEY */


/* End CONST: WITH_KEY */


/* Begin STRUCT: ReliabilityKind_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ReliabilityKind_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ReliabilityKind_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ReliabilityKind_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ReliabilityKind_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::ReliabilityKind_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ReliabilityKind_t */


/* Begin CONST: BEST_EFFORT */


/* End CONST: BEST_EFFORT */


/* Begin CONST: RELIABLE */


/* End CONST: RELIABLE */


/* Begin STRUCT: KeyHash_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::KeyHash_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::KeyHash_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::KeyHash_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::KeyHash_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::KeyHash_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: KeyHash_t */


/* Begin STRUCT: StatusInfo_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::StatusInfo_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::StatusInfo_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::StatusInfo_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::StatusInfo_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::StatusInfo_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: StatusInfo_t */


/* Begin STRUCT: ProtocolVersion_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ProtocolVersion_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ProtocolVersion_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ProtocolVersion_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ProtocolVersion_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::ProtocolVersion_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ProtocolVersion_t */


/* Begin STRUCT: VendorId_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::VendorId_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::VendorId_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::VendorId_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::VendorId_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::VendorId_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: VendorId_t */


/* Begin TYPEDEF: IceAgentType_t */


/* End TYPEDEF: IceAgentType_t */


/* Begin CONST: ICE_FULL */


/* End CONST: ICE_FULL */


/* Begin CONST: ICE_LITE */


/* End CONST: ICE_LITE */


/* Begin STRUCT: IceGeneral_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::IceGeneral_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::IceGeneral_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::IceGeneral_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::IceGeneral_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::IceGeneral_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: IceGeneral_t */


/* Begin TYPEDEF: IceCandidateType_t */


/* End TYPEDEF: IceCandidateType_t */


/* Begin CONST: ICE_HOST */


/* End CONST: ICE_HOST */


/* Begin CONST: ICE_SERVER_REFLEXIVE */


/* End CONST: ICE_SERVER_REFLEXIVE */


/* Begin CONST: ICE_PEER_REFLEXIVE */


/* End CONST: ICE_PEER_REFLEXIVE */


/* Begin CONST: ICE_RELAYED */


/* End CONST: ICE_RELAYED */


/* Begin STRUCT: IceCandidate_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::IceCandidate_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::IceCandidate_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::IceCandidate_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::IceCandidate_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::IceCandidate_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: IceCandidate_t */


/* Begin TYPEDEF: BuiltinEndpointSet_t */


/* End TYPEDEF: BuiltinEndpointSet_t */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_DETECTOR */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PUBLICATION_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_PUBLICATION_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PUBLICATION_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_PUBLICATION_DETECTOR */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_DETECTOR */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_DETECTOR */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_STATE_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_STATE_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_STATE_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_STATE_DETECTOR */


/* Begin CONST: BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_DATA_WRITER */


/* End CONST: BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_DATA_WRITER */


/* Begin CONST: BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_DATA_READER */


/* End CONST: BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_DATA_READER */


/* Begin UNION-FWD: Parameter */


/* End UNION-FWD: Parameter */


/* Begin TYPEDEF: ParameterList */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ParameterList& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ParameterList& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ParameterList& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::ParameterList*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: ParameterList */


/* Begin STRUCT: OriginalWriterInfo_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::OriginalWriterInfo_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::OriginalWriterInfo_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::OriginalWriterInfo_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::OriginalWriterInfo_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::OriginalWriterInfo_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: OriginalWriterInfo_t */


/* Begin TYPEDEF: ParameterId_t */


/* End TYPEDEF: ParameterId_t */


/* Begin CONST: PID_PAD */


/* End CONST: PID_PAD */


/* Begin CONST: PID_SENTINEL */


/* End CONST: PID_SENTINEL */


/* Begin CONST: PID_USER_DATA */


/* End CONST: PID_USER_DATA */


/* Begin CONST: PID_TOPIC_NAME */


/* End CONST: PID_TOPIC_NAME */


/* Begin CONST: PID_TYPE_NAME */


/* End CONST: PID_TYPE_NAME */


/* Begin CONST: PID_GROUP_DATA */


/* End CONST: PID_GROUP_DATA */


/* Begin CONST: PID_TOPIC_DATA */


/* End CONST: PID_TOPIC_DATA */


/* Begin CONST: PID_DURABILITY */


/* End CONST: PID_DURABILITY */


/* Begin CONST: PID_DURABILITY_SERVICE */


/* End CONST: PID_DURABILITY_SERVICE */


/* Begin CONST: PID_DEADLINE */


/* End CONST: PID_DEADLINE */


/* Begin CONST: PID_LATENCY_BUDGET */


/* End CONST: PID_LATENCY_BUDGET */


/* Begin CONST: PID_LIVELINESS */


/* End CONST: PID_LIVELINESS */


/* Begin CONST: PID_RELIABILITY */


/* End CONST: PID_RELIABILITY */


/* Begin CONST: PID_LIFESPAN */


/* End CONST: PID_LIFESPAN */


/* Begin CONST: PID_DESTINATION_ORDER */


/* End CONST: PID_DESTINATION_ORDER */


/* Begin CONST: PID_HISTORY */


/* End CONST: PID_HISTORY */


/* Begin CONST: PID_RESOURCE_LIMITS */


/* End CONST: PID_RESOURCE_LIMITS */


/* Begin CONST: PID_OWNERSHIP */


/* End CONST: PID_OWNERSHIP */


/* Begin CONST: PID_OWNERSHIP_STRENGTH */


/* End CONST: PID_OWNERSHIP_STRENGTH */


/* Begin CONST: PID_PRESENTATION */


/* End CONST: PID_PRESENTATION */


/* Begin CONST: PID_PARTITION */


/* End CONST: PID_PARTITION */


/* Begin CONST: PID_TIME_BASED_FILTER */


/* End CONST: PID_TIME_BASED_FILTER */


/* Begin CONST: PID_TRANSPORT_PRIORITY */


/* End CONST: PID_TRANSPORT_PRIORITY */


/* Begin CONST: PID_PROTOCOL_VERSION */


/* End CONST: PID_PROTOCOL_VERSION */


/* Begin CONST: PID_VENDORID */


/* End CONST: PID_VENDORID */


/* Begin CONST: PID_UNICAST_LOCATOR */


/* End CONST: PID_UNICAST_LOCATOR */


/* Begin CONST: PID_MULTICAST_LOCATOR */


/* End CONST: PID_MULTICAST_LOCATOR */


/* Begin CONST: PID_MULTICAST_IPADDRESS */


/* End CONST: PID_MULTICAST_IPADDRESS */


/* Begin CONST: PID_DEFAULT_UNICAST_LOCATOR */


/* End CONST: PID_DEFAULT_UNICAST_LOCATOR */


/* Begin CONST: PID_DEFAULT_MULTICAST_LOCATOR */


/* End CONST: PID_DEFAULT_MULTICAST_LOCATOR */


/* Begin CONST: PID_METATRAFFIC_UNICAST_LOCATOR */


/* End CONST: PID_METATRAFFIC_UNICAST_LOCATOR */


/* Begin CONST: PID_METATRAFFIC_MULTICAST_LOCATOR */


/* End CONST: PID_METATRAFFIC_MULTICAST_LOCATOR */


/* Begin CONST: PID_DEFAULT_UNICAST_IPADDRESS */


/* End CONST: PID_DEFAULT_UNICAST_IPADDRESS */


/* Begin CONST: PID_DEFAULT_UNICAST_PORT */


/* End CONST: PID_DEFAULT_UNICAST_PORT */


/* Begin CONST: PID_METATRAFFIC_UNICAST_IPADDRESS */


/* End CONST: PID_METATRAFFIC_UNICAST_IPADDRESS */


/* Begin CONST: PID_METATRAFFIC_UNICAST_PORT */


/* End CONST: PID_METATRAFFIC_UNICAST_PORT */


/* Begin CONST: PID_METATRAFFIC_MULTICAST_IPADDRESS */


/* End CONST: PID_METATRAFFIC_MULTICAST_IPADDRESS */


/* Begin CONST: PID_METATRAFFIC_MULTICAST_PORT */


/* End CONST: PID_METATRAFFIC_MULTICAST_PORT */


/* Begin CONST: PID_EXPECTS_INLINE_QOS */


/* End CONST: PID_EXPECTS_INLINE_QOS */


/* Begin CONST: PID_PARTICIPANT_MANUAL_LIVELINESS_COUNT */


/* End CONST: PID_PARTICIPANT_MANUAL_LIVELINESS_COUNT */


/* Begin CONST: PID_PARTICIPANT_BUILTIN_ENDPOINTS */


/* End CONST: PID_PARTICIPANT_BUILTIN_ENDPOINTS */


/* Begin CONST: PID_PARTICIPANT_LEASE_DURATION */


/* End CONST: PID_PARTICIPANT_LEASE_DURATION */


/* Begin CONST: PID_CONTENT_FILTER_PROPERTY */


/* End CONST: PID_CONTENT_FILTER_PROPERTY */


/* Begin CONST: PID_PARTICIPANT_GUID */


/* End CONST: PID_PARTICIPANT_GUID */


/* Begin CONST: PID_PARTICIPANT_ENTITYID */


/* End CONST: PID_PARTICIPANT_ENTITYID */


/* Begin CONST: PID_GROUP_GUID */


/* End CONST: PID_GROUP_GUID */


/* Begin CONST: PID_GROUP_ENTITYID */


/* End CONST: PID_GROUP_ENTITYID */


/* Begin CONST: PID_BUILTIN_ENDPOINT_SET */


/* End CONST: PID_BUILTIN_ENDPOINT_SET */


/* Begin CONST: PID_PROPERTY_LIST */


/* End CONST: PID_PROPERTY_LIST */


/* Begin CONST: PID_TYPE_MAX_SIZE_SERIALIZED */


/* End CONST: PID_TYPE_MAX_SIZE_SERIALIZED */


/* Begin CONST: PID_ENTITY_NAME */


/* End CONST: PID_ENTITY_NAME */


/* Begin CONST: PID_KEY_HASH */


/* End CONST: PID_KEY_HASH */


/* Begin CONST: PID_STATUS_INFO */


/* End CONST: PID_STATUS_INFO */


/* Begin CONST: PID_ENDPOINT_GUID */


/* End CONST: PID_ENDPOINT_GUID */


/* Begin CONST: PID_CONTENT_FILTER_INFO */


/* End CONST: PID_CONTENT_FILTER_INFO */


/* Begin CONST: PID_COHERENT_SET */


/* End CONST: PID_COHERENT_SET */


/* Begin CONST: PID_ORIGINAL_WRITER_INFO */


/* End CONST: PID_ORIGINAL_WRITER_INFO */


/* Begin CONST: PIDMASK_VENDOR_SPECIFIC */


/* End CONST: PIDMASK_VENDOR_SPECIFIC */


/* Begin CONST: PIDMASK_INCOMPATIBLE */


/* End CONST: PIDMASK_INCOMPATIBLE */


/* Begin TYPEDEF: OpenDDSParticipantFlagsBits_t */


/* End TYPEDEF: OpenDDSParticipantFlagsBits_t */


/* Begin CONST: PFLAGS_EMPTY */


/* End CONST: PFLAGS_EMPTY */


/* Begin CONST: PFLAGS_NO_ASSOCIATED_WRITERS */


/* End CONST: PFLAGS_NO_ASSOCIATED_WRITERS */


/* Begin STRUCT: OpenDDSParticipantFlags_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::OpenDDSParticipantFlags_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::OpenDDSParticipantFlags_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::OpenDDSParticipantFlags_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::OpenDDSParticipantFlags_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::OpenDDSParticipantFlags_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: OpenDDSParticipantFlags_t */


/* Begin CONST: PID_OPENDDS_BASE */


/* End CONST: PID_OPENDDS_BASE */


/* Begin CONST: PID_OPENDDS_LOCATOR */


/* End CONST: PID_OPENDDS_LOCATOR */


/* Begin CONST: PID_OPENDDS_ASSOCIATED_WRITER */


/* End CONST: PID_OPENDDS_ASSOCIATED_WRITER */


/* Begin CONST: PID_OPENDDS_ICE_GENERAL */


/* End CONST: PID_OPENDDS_ICE_GENERAL */


/* Begin CONST: PID_OPENDDS_ICE_CANDIDATE */


/* End CONST: PID_OPENDDS_ICE_CANDIDATE */


/* Begin CONST: PID_OPENDDS_PARTICIPANT_FLAGS */


/* End CONST: PID_OPENDDS_PARTICIPANT_FLAGS */


/* Begin UNION: Parameter */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Parameter& uni, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& outer_strm, const OpenDDS::RTPS::Parameter& uni);

OpenDDS_Rtps_Export
bool insertParamData(Serializer& strm, const OpenDDS::RTPS::Parameter& uni);

OpenDDS_Rtps_Export
bool operator>>(Serializer& outer_strm, OpenDDS::RTPS::Parameter& uni);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::Parameter*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End UNION: Parameter */


/* Begin CONST: FLAG_E */


/* End CONST: FLAG_E */


/* Begin CONST: FLAG_Q */


/* End CONST: FLAG_Q */


/* Begin CONST: FLAG_F */


/* End CONST: FLAG_F */


/* Begin CONST: FLAG_I */


/* End CONST: FLAG_I */


/* Begin CONST: FLAG_M */


/* End CONST: FLAG_M */


/* Begin CONST: FLAG_D */


/* End CONST: FLAG_D */


/* Begin CONST: FLAG_L */


/* End CONST: FLAG_L */


/* Begin CONST: FLAG_K_IN_FRAG */


/* End CONST: FLAG_K_IN_FRAG */


/* Begin CONST: FLAG_K_IN_DATA */


/* End CONST: FLAG_K_IN_DATA */


/* Begin STRUCT: SubmessageHeader */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SubmessageHeader& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SubmessageHeader& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SubmessageHeader& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SubmessageHeader>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::SubmessageHeader*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SubmessageHeader */


/* Begin STRUCT: FragmentNumber_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FragmentNumber_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FragmentNumber_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FragmentNumber_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::FragmentNumber_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::FragmentNumber_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: FragmentNumber_t */


/* Begin STRUCT: FragmentNumberSet */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FragmentNumberSet& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FragmentNumberSet& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FragmentNumberSet& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::FragmentNumberSet>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::FragmentNumberSet*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: FragmentNumberSet */


/* Begin STRUCT: AckNackSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::AckNackSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::AckNackSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::AckNackSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::AckNackSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::AckNackSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: AckNackSubmessage */


/* Begin STRUCT: GapSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::GapSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::GapSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::GapSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::GapSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::GapSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: GapSubmessage */


/* Begin STRUCT: InfoReplySubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoReplySubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoReplySubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoReplySubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoReplySubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoReplySubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: InfoReplySubmessage */


/* Begin STRUCT: NackFragSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::NackFragSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::NackFragSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::NackFragSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::NackFragSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::NackFragSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: NackFragSubmessage */


/* Begin STRUCT: ParticipantProxy_t */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ParticipantProxy_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ParticipantProxy_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ParticipantProxy_t& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ParticipantProxy_t>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::ParticipantProxy_t*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ParticipantProxy_t */


/* Begin STRUCT: SPDPdiscoveredParticipantData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SPDPdiscoveredParticipantData& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SPDPdiscoveredParticipantData& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SPDPdiscoveredParticipantData& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SPDPdiscoveredParticipantData>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::SPDPdiscoveredParticipantData*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SPDPdiscoveredParticipantData */


/* Begin STRUCT: ParticipantMessageData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ParticipantMessageData& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ParticipantMessageData& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ParticipantMessageData& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ParticipantMessageData>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::ParticipantMessageData*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: ParticipantMessageData */


/* Begin STRUCT: Header */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Header& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Header& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Header& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::Header>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::Header*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: Header */


/* Begin STRUCT: DataSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::DataSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::DataSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::DataSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::DataSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::DataSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: DataSubmessage */


/* Begin STRUCT: DataFragSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::DataFragSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::DataFragSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::DataFragSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::DataFragSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::DataFragSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: DataFragSubmessage */


/* Begin STRUCT: HeartBeatSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::HeartBeatSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::HeartBeatSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::HeartBeatSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::HeartBeatSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::HeartBeatSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: HeartBeatSubmessage */


/* Begin STRUCT: HeartBeatFragSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::HeartBeatFragSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::HeartBeatFragSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::HeartBeatFragSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::HeartBeatFragSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::HeartBeatFragSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: HeartBeatFragSubmessage */


/* Begin STRUCT: InfoDestinationSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoDestinationSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoDestinationSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoDestinationSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoDestinationSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoDestinationSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: InfoDestinationSubmessage */


/* Begin STRUCT: InfoSourceSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoSourceSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoSourceSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoSourceSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoSourceSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoSourceSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: InfoSourceSubmessage */


/* Begin STRUCT: InfoTimestampSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoTimestampSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoTimestampSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoTimestampSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoTimestampSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoTimestampSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: InfoTimestampSubmessage */


/* Begin STRUCT: PadSubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::PadSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::PadSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::PadSubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::PadSubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::PadSubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: PadSubmessage */


/* Begin STRUCT: InfoReplyIp4Submessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoReplyIp4Submessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoReplyIp4Submessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoReplyIp4Submessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoReplyIp4Submessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoReplyIp4Submessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: InfoReplyIp4Submessage */


/* Begin STRUCT: SecuritySubmessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SecuritySubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SecuritySubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SecuritySubmessage& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SecuritySubmessage>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::SecuritySubmessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: SecuritySubmessage */


/* Begin ENUM: SubmessageKind */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SubmessageKind& enumval);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SubmessageKind& enumval);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export extern const char* gen_OpenDDS_RTPS_SubmessageKind_names[];
OpenDDS_Rtps_Export extern const size_t gen_OpenDDS_RTPS_SubmessageKind_names_size;
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End ENUM: SubmessageKind */


/* Begin UNION: Submessage */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Submessage& uni, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Submessage& uni);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Submessage& uni);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::Submessage*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End UNION: Submessage */


/* Begin TYPEDEF: SubmessageSeq */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SubmessageSeq& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SubmessageSeq& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SubmessageSeq& seq);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::SubmessageSeq*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End TYPEDEF: SubmessageSeq */


/* Begin STRUCT: DiscoveredTopicData */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::DiscoveredTopicData& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::DiscoveredTopicData& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::DiscoveredTopicData& stru);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::DiscoveredTopicData>();
OpenDDS_Rtps_Export
bool gen_skip_over(Serializer& ser, OpenDDS::RTPS::DiscoveredTopicData*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: DiscoveredTopicData */

/* End MODULE: RTPS */

/* End MODULE: OpenDDS */
#endif /* OPENDDS_IDL_GENERATED_RTPSCORETYPESUPPORTIMPL_H_BZ56CF */

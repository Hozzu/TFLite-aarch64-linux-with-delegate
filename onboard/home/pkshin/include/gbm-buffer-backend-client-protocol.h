/* Generated by wayland-scanner 1.18.0 */

#ifndef GBM_BUFFER_BACKEND_CLIENT_PROTOCOL_H
#define GBM_BUFFER_BACKEND_CLIENT_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-client.h"

#ifdef  __cplusplus
extern "C" {
#endif

/**
 * @page page_gbm_buffer_backend The gbm_buffer_backend protocol
 * @section page_ifaces_gbm_buffer_backend Interfaces
 * - @subpage page_iface_gbm_buffer_backend - GBM buffer backend support
 * - @subpage page_iface_gbm_buffer_params - parameters for creating a gbmbuf-based wl_buffer
 * @section page_copyright_gbm_buffer_backend Copyright
 * <pre>
 *
 * Copyright (c) 2017, The Linux Foundation. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are
 * met:
 * * Redistributions of source code must retain the above copyright
 * notice, this list of conditions and the following disclaimer.
 * * Redistributions in binary form must reproduce the above
 * copyright notice, this list of conditions and the following
 * disclaimer in the documentation and/or other materials provided
 * with the distribution.
 * * Neither the name of The Linux Foundation nor the names of its
 * contributors may be used to endorse or promote products derived
 * from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
 * BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
 * IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Copyright (c) 2014, 2015 Collabora, Ltd.
 *
 * Permission to use, copy, modify, distribute, and sell this
 * software and its documentation for any purpose is hereby granted
 * without fee, provided that the above copyright notice appear in
 * all copies and that both that copyright notice and this permission
 * notice appear in supporting documentation, and that the name of
 * the copyright holders not be used in advertising or publicity
 * pertaining to distribution of the software without specific,
 * written prior permission.  The copyright holders make no
 * representations about the suitability of this software for any
 * purpose.  It is provided "as is" without express or implied
 * warranty.
 *
 * THE COPYRIGHT HOLDERS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
 * SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
 * FITNESS, IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 * AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 * THIS SOFTWARE.
 * </pre>
 */
struct gbm_buffer_backend;
struct gbm_buffer_params;
struct wl_buffer;

/**
 * @page page_iface_gbm_buffer_backend gbm_buffer_backend
 * @section page_iface_gbm_buffer_backend_desc Description
 *
 * This factory interface used to create wl_buffer from given GBM buffer.
 * @section page_iface_gbm_buffer_backend_api API
 * See @ref iface_gbm_buffer_backend.
 */
/**
 * @defgroup iface_gbm_buffer_backend The gbm_buffer_backend interface
 *
 * This factory interface used to create wl_buffer from given GBM buffer.
 */
extern const struct wl_interface gbm_buffer_backend_interface;
/**
 * @page page_iface_gbm_buffer_params gbm_buffer_params
 * @section page_iface_gbm_buffer_params_desc Description
 *
 * This temporary object is a collection of dmabufs and other
 * parameters that together form a single logical buffer. The temporary
 * object may eventually create one wl_buffer unless cancelled by
 * destroying it before requesting 'create'.
 *
 * Single-planar formats only require one dmabuf, however
 * multi-planar formats may require more than one dmabuf. For all
 * formats, 'add' request must be called once per plane (even if the
 * underlying dmabuf fd is identical).
 *
 * You must use consecutive plane indices ('plane_idx' argument for 'add')
 * from zero to the number of planes used by the drm_fourcc format code.
 * All planes required by the format must be given exactly once, but can
 * be given in any order. Each plane index can be set only once.
 * @section page_iface_gbm_buffer_params_api API
 * See @ref iface_gbm_buffer_params.
 */
/**
 * @defgroup iface_gbm_buffer_params The gbm_buffer_params interface
 *
 * This temporary object is a collection of dmabufs and other
 * parameters that together form a single logical buffer. The temporary
 * object may eventually create one wl_buffer unless cancelled by
 * destroying it before requesting 'create'.
 *
 * Single-planar formats only require one dmabuf, however
 * multi-planar formats may require more than one dmabuf. For all
 * formats, 'add' request must be called once per plane (even if the
 * underlying dmabuf fd is identical).
 *
 * You must use consecutive plane indices ('plane_idx' argument for 'add')
 * from zero to the number of planes used by the drm_fourcc format code.
 * All planes required by the format must be given exactly once, but can
 * be given in any order. Each plane index can be set only once.
 */
extern const struct wl_interface gbm_buffer_params_interface;

#define GBM_BUFFER_BACKEND_DESTROY 0
#define GBM_BUFFER_BACKEND_CREATE_PARAMS 1


/**
 * @ingroup iface_gbm_buffer_backend
 */
#define GBM_BUFFER_BACKEND_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_gbm_buffer_backend
 */
#define GBM_BUFFER_BACKEND_CREATE_PARAMS_SINCE_VERSION 1

/** @ingroup iface_gbm_buffer_backend */
static inline void
gbm_buffer_backend_set_user_data(struct gbm_buffer_backend *gbm_buffer_backend, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) gbm_buffer_backend, user_data);
}

/** @ingroup iface_gbm_buffer_backend */
static inline void *
gbm_buffer_backend_get_user_data(struct gbm_buffer_backend *gbm_buffer_backend)
{
	return wl_proxy_get_user_data((struct wl_proxy *) gbm_buffer_backend);
}

static inline uint32_t
gbm_buffer_backend_get_version(struct gbm_buffer_backend *gbm_buffer_backend)
{
	return wl_proxy_get_version((struct wl_proxy *) gbm_buffer_backend);
}

/**
 * @ingroup iface_gbm_buffer_backend
 *
 * Destroy the protocol object created at client.
 */
static inline void
gbm_buffer_backend_destroy(struct gbm_buffer_backend *gbm_buffer_backend)
{
	wl_proxy_marshal((struct wl_proxy *) gbm_buffer_backend,
			 GBM_BUFFER_BACKEND_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) gbm_buffer_backend);
}

/**
 * @ingroup iface_gbm_buffer_backend
 *
 * This temporary object is used to hold gbm_buffer_params as
 * a single batch to create a wl_buffer.It can only be used once and
 * should be destroyed after an 'created' or 'failed' event has been
 * received.
 */
static inline struct gbm_buffer_params *
gbm_buffer_backend_create_params(struct gbm_buffer_backend *gbm_buffer_backend)
{
	struct wl_proxy *params_id;

	params_id = wl_proxy_marshal_constructor((struct wl_proxy *) gbm_buffer_backend,
			 GBM_BUFFER_BACKEND_CREATE_PARAMS, &gbm_buffer_params_interface, NULL);

	return (struct gbm_buffer_params *) params_id;
}

#ifndef GBM_BUFFER_PARAMS_FLAGS_ENUM
#define GBM_BUFFER_PARAMS_FLAGS_ENUM
enum gbm_buffer_params_flags {
	/**
	 * contents are y-inverted
	 */
	GBM_BUFFER_PARAMS_FLAGS_Y_INVERT = 1,
	/**
	 * content is interlaced
	 */
	GBM_BUFFER_PARAMS_FLAGS_INTERLACED = 2,
	/**
	 * bottom field first
	 */
	GBM_BUFFER_PARAMS_FLAGS_BOTTOM_FIRST = 4,
	/**
	 * used by early display
	 */
	GBM_BUFFER_PARAMS_FLAGS_EARLY_DISPLAY = 8,
};
#endif /* GBM_BUFFER_PARAMS_FLAGS_ENUM */

/**
 * @ingroup iface_gbm_buffer_params
 * @struct gbm_buffer_params_listener
 */
struct gbm_buffer_params_listener {
	/**
	 * buffer creation succeeded
	 *
	 * This event indicates that the attempted buffer creation was
	 * successful. It provides the new wl_buffer referencing the
	 * dmabuf(s).
	 *
	 * Upon receiving this event, the client should destroy the
	 * zlinux_dmabuf_params object.
	 * @param buffer the newly created wl_buffer
	 */
	void (*created)(void *data,
			struct gbm_buffer_params *gbm_buffer_params,
			struct wl_buffer *buffer);
	/**
	 * buffer creation failed
	 *
	 * This event indicates that the attempted buffer creation has
	 * failed. It usually means that one of the dmabuf constraints has
	 * not been fulfilled.
	 *
	 * Upon receiving this event, the client should destroy the
	 * zlinux_buffer_params object.
	 */
	void (*failed)(void *data,
		       struct gbm_buffer_params *gbm_buffer_params);
};

/**
 * @ingroup iface_gbm_buffer_params
 */
static inline int
gbm_buffer_params_add_listener(struct gbm_buffer_params *gbm_buffer_params,
			       const struct gbm_buffer_params_listener *listener, void *data)
{
	return wl_proxy_add_listener((struct wl_proxy *) gbm_buffer_params,
				     (void (**)(void)) listener, data);
}

#define GBM_BUFFER_PARAMS_DESTROY 0
#define GBM_BUFFER_PARAMS_CREATE 1

/**
 * @ingroup iface_gbm_buffer_params
 */
#define GBM_BUFFER_PARAMS_CREATED_SINCE_VERSION 1
/**
 * @ingroup iface_gbm_buffer_params
 */
#define GBM_BUFFER_PARAMS_FAILED_SINCE_VERSION 1

/**
 * @ingroup iface_gbm_buffer_params
 */
#define GBM_BUFFER_PARAMS_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_gbm_buffer_params
 */
#define GBM_BUFFER_PARAMS_CREATE_SINCE_VERSION 1

/** @ingroup iface_gbm_buffer_params */
static inline void
gbm_buffer_params_set_user_data(struct gbm_buffer_params *gbm_buffer_params, void *user_data)
{
	wl_proxy_set_user_data((struct wl_proxy *) gbm_buffer_params, user_data);
}

/** @ingroup iface_gbm_buffer_params */
static inline void *
gbm_buffer_params_get_user_data(struct gbm_buffer_params *gbm_buffer_params)
{
	return wl_proxy_get_user_data((struct wl_proxy *) gbm_buffer_params);
}

static inline uint32_t
gbm_buffer_params_get_version(struct gbm_buffer_params *gbm_buffer_params)
{
	return wl_proxy_get_version((struct wl_proxy *) gbm_buffer_params);
}

/**
 * @ingroup iface_gbm_buffer_params
 *
 * Cleans up the temporary data sent to the server for dmabuf-based
 * wl_buffer creation.
 */
static inline void
gbm_buffer_params_destroy(struct gbm_buffer_params *gbm_buffer_params)
{
	wl_proxy_marshal((struct wl_proxy *) gbm_buffer_params,
			 GBM_BUFFER_PARAMS_DESTROY);

	wl_proxy_destroy((struct wl_proxy *) gbm_buffer_params);
}

/**
 * @ingroup iface_gbm_buffer_params
 *
 * This asks for creation of a wl_buffer from the added gbmbuf
 * buffers. The wl_buffer is not created immediately but returned via
 * the 'created' event if the gbmbuf sharing succeeds. The sharing
 * may fail at runtime for reasons a client cannot predict, in
 * which case the 'failed' event is triggered.
 *
 * The 'format' argument is a DRM_FORMAT code, as defined by the
 * libdrm's drm_fourcc.h. The Linux kernel's DRM sub-system is the
 * authoritative source on how the format codes should work.
 *
 * The 'flags' is a bitfield of the flags defined in enum "flags".
 * 'y_invert' means the that the image needs to be y-flipped.
 *
 * Flag 'interlaced' means that the frame in the buffer is not
 * progressive as usual, but interlaced. An interlaced buffer as
 * supported here must always contain both top and bottom fields.
 * The top field always begins on the first pixel row. The temporal
 * ordering between the two fields is top field first, unless
 * 'bottom_first' is specified. It is undefined whether 'bottom_first'
 * is ignored if 'interlaced' is not set.
 *
 */
static inline void
gbm_buffer_params_create(struct gbm_buffer_params *gbm_buffer_params, int32_t fd, int32_t meta_fd, uint32_t width, uint32_t height, uint32_t format, int32_t flags)
{
	wl_proxy_marshal((struct wl_proxy *) gbm_buffer_params,
			 GBM_BUFFER_PARAMS_CREATE, fd, meta_fd, width, height, format, flags);
}

#ifdef  __cplusplus
}
#endif

#endif

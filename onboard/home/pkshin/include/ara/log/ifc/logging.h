// --------------------------------------------------------------------------
// |              _    _ _______     .----.      _____         _____        |
// |         /\  | |  | |__   __|  .  ____ .    / ____|  /\   |  __ \       |
// |        /  \ | |  | |  | |    .  / __ \ .  | (___   /  \  | |__) |      |
// |       / /\ \| |  | |  | |   .  / / / / v   \___ \ / /\ \ |  _  /       |
// |      / /__\ \ |__| |  | |   . / /_/ /  .   ____) / /__\ \| | \ \       |
// |     /________\____/   |_|   ^ \____/  .   |_____/________\_|  \_\      |
// |                              . _ _  .                                  |
// --------------------------------------------------------------------------
//
// All Rights Reserved.
// Any use of this source code is subject to a license agreement with the
// AUTOSAR development cooperation.
// More information is available at www.autosar.org.
//
// Disclaimer
//
// This work (specification and/or software implementation) and the material
// contained in it, as released by AUTOSAR, is for the purpose of information
// only. AUTOSAR and the companies that have contributed to it shall not be
// liable for any use of the work.
//
// The material contained in this work is protected by copyright and other
// types of intellectual property rights. The commercial exploitation of the
// material contained in this work requires a license to such intellectual
// property rights.
//
// This work may be utilized or reproduced without any modification, in any
// form or by any means, for informational purposes only. For any other
// purpose, no part of the work may be utilized or reproduced, in any form
// or by any means, without permission in writing from the publisher.
//
// The work has been developed for automotive applications only. It has
// neither been developed, nor tested for non-automotive applications.
//
// The word AUTOSAR and the AUTOSAR logo are registered trademarks.
// --------------------------------------------------------------------------

#ifndef ARA_LOG_IFC_LOGGING_H
#define ARA_LOG_IFC_LOGGING_H

#include "ara/core/string_view.h"
#include "ara/log/logger.h"
#include "ara/log/log_stream.h"

namespace ara
{
namespace log
{
namespace ifc
{

/**
 * @deprecated - will be removed soon!
 *
 * @brief Initialize the logging framework.
 *
 * Inits the logging framework for the application with given properties.
 * In case that in @c logMode the @c kFile flag is set, the directory path needs to be provided.
 * This directory must be writable from the corresponding process UID. The actual file name will be
 * generated by the logging framework.
 *
 * @note The call to @c InitLogging shall be done as early as possible inside the program runnable
 * (normally the @c main() function).
 *
 * @note The behavior of the LogMode flags is not fully supported in current status of implementation.
 * It is not possible to select _console only_ mode. Having a single _kConsole_ flag selected, always
 * will enable also _remote_ mode in addition. Having _file only_ mode however is possible.
 *
 * @code
 * int main(int argc, char* argv[])
 * {
 *   InitLogging("ABCD", "This is the application known as ABCD", LogLevel::kVerbose, LogMode::kRemote);
 * }
 * @endcode
 *
 * @param[in] appId             The _up to four-character_ ID
 * @param[in] appDescription    Some description
 * @param[in] appDefLogLevel    The application's default log reporting level
 * @param[in] logMode           The log mode(s) to be used
 * @param[in] directoryPath     The directory path for the file log mode
 */
void InitLogging(std::string appId,
    std::string appDescription,
    LogLevel appDefLogLevel,
    LogMode logMode,
    std::string directoryPath = "") noexcept;

}  // namespace ifc
}  // namespace log
}  // namespace ara

#endif  // ARA_LOG_IFC_LOGGING_H

// --------------------------------------------------------------------------
// |              _    _ _______     .----.      _____         _____        |
// |         /\  | |  | |__   __|  .  ____ .    / ____|  /\   |  __ \       |
// |        /  \ | |  | |  | |    .  / __ \ .  | (___   /  \  | |__) |      |
// |       / /\ \| |  | |  | |   .  / / / / v   \___ \ / /\ \ |  _  /       |
// |      / /__\ \ |__| |  | |   . / /_/ /  .   ____) / /__\ \| | \ \       |
// |     /________\____/   |_|   ^ \____/  .   |_____/________\_|  \_\      |
// |                              . _ _  .                                  |
// --------------------------------------------------------------------------
//
// All Rights Reserved.
// Any use of this source code is subject to a license agreement with the
// AUTOSAR development cooperation.
// More information is available at www.autosar.org.
//
// Disclaimer
//
// This work (specification and/or software implementation) and the material
// contained in it, as released by AUTOSAR, is for the purpose of information
// only. AUTOSAR and the companies that have contributed to it shall not be
// liable for any use of the work.
//
// The material contained in this work is protected by copyright and other
// types of intellectual property rights. The commercial exploitation of the
// material contained in this work requires a license to such intellectual
// property rights.
//
// This work may be utilized or reproduced without any modification, in any
// form or by any means, for informational purposes only. For any other
// purpose, no part of the work may be utilized or reproduced, in any form
// or by any means, without permission in writing from the publisher.
//
// The work has been developed for automotive applications only. It has
// neither been developed, nor tested for non-automotive applications.
//
// The word AUTOSAR and the AUTOSAR logo are registered trademarks.
// --------------------------------------------------------------------------

#ifndef ARA_DDS_BINDING_INCLUDES_LIBARA_INTERNAL_DDS_IDL_TYPES_BINDING_H_
#define ARA_DDS_BINDING_INCLUDES_LIBARA_INTERNAL_DDS_IDL_TYPES_BINDING_H_

#include <tao/String_Manager_T.h>
#include "tao/Sequence_T.h"

#include "ara/core/string.h"
#include "ara/core/vector.h"

namespace ara
{
namespace com
{
namespace internal
{
namespace dds
{

template <typename T>
struct DDSTypeInfo
{
    // Required types in this struct:
    // using dds_type_t
    // using dds_type_seq_t =  typename OpenDDS::DCPS::DDSTraits<dds_type_t>::MessageSequenceType;
    // using dds_type_support_t = typename OpenDDS::DCPS::DDSTraits<dds_type_t>::TypeSupportTypeImpl;
    // using dds_data_writer_t = typename OpenDDS::DCPS::DDSTraits<dds_type_t>::DataWriterType;
    // using dds_data_reader_t = typename OpenDDS::DCPS::DDSTraits<dds_type_t>::DataReaderType;
};

/**
 * \brief Converts an object of type generated by AUTOSAR code generator to an object of type generated by OpenDDS.
 * \param source Object of type generated by AUTOSAR code generator.
 * \return Object of type generated by OpenDDS code generator.
 *
 * The implementation for fundamental types does not do actual types conversion,
 * it just forwards source object to caller.
 * In case when this implementation called, conversion should be done in types constructors.
 * It is intended that for types that are not compatible AUTOSAR code generator will generate
 * this function variant overrided by input paramter
 */
template <typename T>
inline typename std::enable_if_t<std::is_fundamental<T>::value, T> ConvertFromIdl(T const& source)
{
    return source;
}

template <typename T>
inline std::enable_if_t<std::is_fundamental<T>::value, T> ConvertToIdl(T const& source)
{
    return source;
}

inline auto ConvertFromIdl(::TAO::String_Manager const& source)
{
    return ara::core::String(static_cast<const char*>(source));
}

inline auto ConvertToIdl(ara::core::String const& source)
{
    return ::TAO::String_Manager(source.c_str());
}

template <typename T>
using enable_if_unbounded_value_sequence_t
    = std::enable_if_t<std::is_base_of<::TAO::unbounded_value_sequence<typename T::value_type>, T>::value>;

template <typename Source>
class TypedSequenceConverter
{
public:
    TypedSequenceConverter(const Source& source)
        : value(source)
    { }

    template <typename Result, enable_if_unbounded_value_sequence_t<Result>* = nullptr>
    inline operator Result() const
    {
        Result result(value.size());
        result.length(value.size());
        for (std::size_t i = 0; i < value.size(); ++i) {
            result[i] = ConvertToIdl(value[i]);
        }
        return result;
    }

private:
    const Source& value;
};

template <typename T, enable_if_unbounded_value_sequence_t<T>* = nullptr>
inline auto ConvertFromIdl(const T& source)
{
    ara::core::Vector<typename T::value_type> result(source.length());
    for (std::size_t i = 0; i < source.length(); ++i) {
        result[i] = ConvertFromIdl(source[i]);
    }
    return result;
}

template <template <typename, typename...> class Container,
    typename Value,
    typename... Rest,
    std::enable_if_t<std::is_same<Container<Value, Rest...>, ara::core::Vector<Value, Rest...>>::value>* = nullptr>
inline auto ConvertToIdl(const Container<Value, Rest...>& source)
{
    return TypedSequenceConverter<Container<Value, Rest...>>(source);
}

}  // namespace dds
}  // namespace internal
}  // namespace com
}  // namespace ara

#endif  // ARA_DDS_BINDING_INCLUDES_LIBARA_INTERNAL_DDS_IDL_TYPES_BINDING_H_

// NOWHINE ENTIRE FILE
//-------------------------------------------------------------------------
// Copyright (c) 2017-2018 Qualcomm Technologies, Inc.
// All Rights Reserved.
// Confidential and Proprietary - Qualcomm Technologies, Inc.
//------------------------------------------------------------------------

#ifndef __NC_LIB_WARP_API__
#define __NC_LIB_WARP_API__

/*------------------------------------------------------------------------
 * @file  NcLibWarp.h
 * @brief NcLib Warp API functions
 *
 *  Warping Order (this is true for any WarpDirection)
 *
 *                 ________    Intermediate    ___________
 *      Input     |        |   Image Domain   |           |     Output
 *      Image --->|  Grid  |----------------->|  Matrices |---> Image
 *      Domain    |________|                  |___________|     Domain
 *
 *------------------------------------------------------------------------*/

/*------------------------------------------------------------------------
*       Include Files
* ----------------------------------------------------------------------- */
#include <stdint.h>

#include "NcLibContext.h"               /* FD */

#include "NcLibWarpCommonDef.h"

#ifdef __cplusplus
extern "C" {
#endif

/*------------------------------------------------------------------------
*       Definitions
* ----------------------------------------------------------------------- */

/* Extrapolation points */
#define NC_LIB_WARP_EXTRAP_TOP_LEFT_IDX       (0)                                       /**< Top left extrapolation point index */
#define NC_LIB_WARP_EXTRAP_TOP_RIGHT_IDX      (NC_LIB_WARP_EXTRAP_TOP_LEFT_IDX + 1)     /**< Top right extrapolation point index */
#define NC_LIB_WARP_EXTRAP_BOTTOM_LEFT_IDX    (NC_LIB_WARP_EXTRAP_TOP_RIGHT_IDX + 1)    /**< Bottom left extrapolation point index */
#define NC_LIB_WARP_EXTRAP_BOTTOM_RIGHT_IDX   (NC_LIB_WARP_EXTRAP_BOTTOM_LEFT_IDX + 1)  /**< Bottom right extrapolation point index */

/** NcLibCheckIcaTransformValidity() intermediate buffer size - required for internal calculations */
#define NC_LIB_WARP_CHECK_ICA_INTERMEDIATE_BUFFER_SIZE     (sizeof(NcLibWarpGridCoord) * 3417)

/*------------------------------------------------------------------------
*       Type Declarations
* ----------------------------------------------------------------------- */
#pragma pack(push)
#pragma pack(4)

/** Domain of alignment matrix */
typedef enum NcLibWarpImageDomain_t
{
    INPUT_IMAGE_DOMAIN = 0,     /**< Input image with no grid or matrices applied */
    INTERMEDIATE_IMAGE_DOMAIN,  /**< Intermediate image after grid applied but before matrices applied */
    OUTPUT_IMAGE_DOMAIN         /**< Output image after grid and matrices applied */
}NcLibWarpImageDomain;

/** Input struct for the NcLibWarpBuildAssistGrid() function */
typedef struct NcLibWarpBuildAssistGridIn_t
{
    const NcLibWarp*    in;             /**< Input Warp struct in virtual domain, as
                                         *   converted by NcLibWarpConvertToVirtualDomain().
                                         */
    uint32_t            numColumns;     /**< Number of columns in assists grid. Must be greater than 1. */
    uint32_t            numRows;        /**< Number of rows in assists grid. Must be greater than 1. */

}NcLibWarpBuildAssistGridIn;

/** Output struct of NcLibWarpBuildAssistGrid() function, should be buffer by the user for next frame */
typedef struct NcLibWarpBuildAssistGridOut_t
{
    NcLibWarpGrid*      assistGrid;     /**< Assist grid generated by NcLibWarpBuildAssistGrid() for current frame */
    NcLibWarp*          inputWarp;      /**< If NULL, assumed to be buffered by the user. And pointer assigned to
                                         *   inputWarp externally before calling to NcLibWarpGeometries(). Otherwise
                                         *   will contain the warp grid from previous input
                                         */
}NcLibWarpBuildAssistGridOut;

/** NcLibWarpGeometries() input struct */
typedef struct NcLibWarpGeomIn_t
{
    //TODO (etsairi): need to consider all the bellow image dim + zoom dim parameters?
    const ImageDimensions*              inputSize;              /**< Input image dimensions (as supplied to FW) */
    const ImageDimensions*              stabilizationMargins;   /**< Stabilization total margin (as supplied to FW) */
    const IpeZoomWindow*                zoomWindow;             /**< Output zoom window. (as supplied to FW) */
    const IpeZoomWindow*                ifeZoomWindow;          /**< IFE output zoom window. (as supplied to FW) */
    float                               ica1UpScaleRatio;       /**< Upscale which is done in ICA, but not
                                                                 *   implemented in the matrices
                                                                 */

    const NcLibWarpBuildAssistGridOut*  inputGrids;             /**< As calculated by NcLibWarpBuildAssistGrid()
                                                                 *   in current frame
                                                                 */
    const NcLibWarpBuildAssistGridOut*  inputGridsPrevFrame;    /**< As calculated by NcLibWarpBuildAssistGrid() in
                                                                 *   previous frame and was buffered.
                                                                 *   Used in case (true == isFdConfigFromPrevFrame) &&
                                                                 *                (DISTORTED != aligmentDomain)
                                                                 *   - otherwise could be NULL.
                                                                 */

    /* FD parameters */
    const FD_CONFIG_CONTEXT*            fdConfig;               /**< Holds the latest available face detection
                                                                *   parameters (from current or previous frame).
                                                                *   Assumed to be in coordinates of inputSize.
                                                                */
    bool                                isFdConfigFromPrevFrame;/**< If true, then FD parameters are from previous
                                                                *   frame, otherwise from current frame
                                                                */

    NcLibWarpImageDomain                alignmentDomain;        /**< Domain of alignment matrix */
    const NcLibWarp*                    alignment;              /**< If (true == isFdConfigFromPrevFrame), then this
                                                                 *   matrix will be used to estimate the movement of
                                                                 *   face centers from previous frame. Warp was
                                                                 *   adjusted by NcLibWarpConvertToVirtualDomain().
                                                                 */

    NcLibWarpImageDomain                lnrDomain;              /**< Domain of LNR */

    /* TF */
    PARAM_UINT                          tf_lnr_opt_center_x;    /**< x-coordinate of TF LNR center as assigned
                                                                *   to Chromatix input struct.
                                                                *   A logical values between [0,1].
                                                                *   format: 15uQ14
                                                                */
    PARAM_UINT                          tf_lnr_opt_center_y;    /**< y-coordinate of TF LNR center as assigned
                                                                *   to Chromatix input struct.
                                                                *   A logical values between [0,1]
                                                                */

    /* ANR */
    PARAM_UINT                          anr_lnr_opt_center_x;   /**< Optical center of ANR LNR.as assigned
                                                                 *   to Chromatix input struct.
                                                                 *   A logical values between [0,1]
                                                                 *   format: 15uQ14
                                                                 */
    PARAM_UINT                          anr_lnr_opt_center_y;   /**< Optical center of ANR LNR. as assigned
                                                                 *   to Chromatix input struct.
                                                                 *   A logical values between [0,1]
                                                                 *   format: 15uQ14
                                                                 */

    /* ASF */
    PARAM_UINT                          asf_opt_center_x;       /**< Optical center of ASF. As assigned
                                                                 *   to Chromatix input struct.
                                                                 *   A logical values between [0,1]
                                                                 *   format: 15uQ14
                                                                 */

    PARAM_UINT                          asf_opt_center_y;       /**< Optical center of ASF. As assigned
                                                                 *   to Chromatix input struct.
                                                                 *   A logical values between [0,1]
                                                                 *   format: 15uQ14
                                                                 */
}NcLibWarpGeomIn;

/** NcLibWarpGeometries() output struct */
typedef struct NcLibWarpGeomOut_t
{
    /* FD parameters */
    FD_CONFIG_CONTEXT*              fdConfig;                   /**< Corrected FD parameters in coordinates
                                                                 *   of after Warp (reduced image size).
                                                                 */

    /* TF */
    PARAM_UINT                      tf_lnr_opt_center_x;        /**< x-coordinate of TF LNR center as assigned
                                                                 *   to Chromatix input struct.
                                                                 *   A logical values between [0,1]
                                                                 *   format: 15uQ14
                                                                 */
    PARAM_UINT                      tf_lnr_opt_center_y;        /**< y-coordinate of TF LNR center as assigned
                                                                 *   to Chromatix input struct.
                                                                 *   A logical values between [0,1]
                                                                 *   format: 15uQ14
                                                                 */

    /* ANR */
    PARAM_UINT                      anr_lnr_opt_center_x;       /**< Optical center of ANR LNR center as assigned
                                                                  *   to Chromatix input struct.
                                                                  *   A logical values between [0,1]
                                                                  *   format: 15uQ14
                                                                  */
    PARAM_UINT                      anr_lnr_opt_center_y;       /**< Optical center of ANR LNR center as assigned
                                                                  *   to Chromatix input struct.
                                                                  *   A logical values between [0,1]
                                                                  *   format: 15uQ14
                                                                  */

    /* ASF  */
    PARAM_UINT                      asf_opt_center_x;           /**< Optical center of ASF. As assigned
                                                                 *   to Chromatix input struct.
                                                                 *   A logical values between [0,1]
                                                                 *   format: 15uQ14
                                                                 */

    PARAM_UINT                      asf_opt_center_y;           /**< Optical center of ASF. As assigned
                                                                 *   to Chromatix input struct.
                                                                 *   A logical values between [0,1]
                                                                 *   format: 15uQ14
                                                                 */
}NcLibWarpGeomOut;


/** NcLibCalcMctfTransform() input struct */
typedef struct NcLibCalcMctfIn_t
{
    const ImageDimensions*          inputSize;              /**< Input image dimensions */
    const ImageDimensions*          stabilizationMargins;   /**< Stabilization total margin (as supplied to FW) */

    NcLibWarpImageDomain            alignmentDomain;        /**< Domain of alignment matrix */

    const NcLibWarp*                alignment;              /**< Alignment transform (grid or matrix).
                                                             *   Warp was adjusted by NcLibWarpConvertToVirtualDomain().
                                                             */

    const NcLibWarp*                inputWarp;               /**< Input Warp struct in virtual domain, as converted
                                                              *   by NcLibWarpConvertToVirtualDomain().
                                                              */

    const NcLibWarpBuildAssistGridOut*  inputGrids;          /**< Current frame assist grid as calculated
                                                              *    by NcLibWarpBuildAssistGrid()
                                                              */

    const NcLibWarpBuildAssistGridOut*  inputGridsPrevFrame;    /**< Previous frame assist grid as calculated
                                                                 *    by NcLibWarpBuildAssistGrid() and was buffered
                                                                 *    in previous frame
                                                                 */
}NcLibCalcMctfIn;

/** NcLibCheckIcaTransformValidity() input struct */
typedef struct NcLibCheckIcaTransformValidityIn_t
{
    const NcLibWarp*          warp;                   /**< Warping transform to be checked for validity */
    ImageDimensions           outputSize;             /**< Output image dimensions */
    uint32_t                  halfOutputW;            /**< Half output image width - special parameter present in ICA.
                                                       *   Usually = outputSize.widthPixels/2
                                                       */
    ImageDimensions           inputSize;              /**< Input image dimensions */

    WindowRegion              outputRoi;              /**< ROI in output domain - output image is mapped to this ROI in
                                                       *   output virtual domain (the ROI is given in relative form - window size vs full size) */
    WindowRegion              inputRoi;               /**< ROI in input domain - input image is mapped to this ROI
                                                       *   in input virtual domain
                                                       */
    bool                      enableRoi;              /**< Whether ROI (zoom windows) in input and output domains are enabled */
} NcLibCheckIcaTransformValidityIn;

/** Grid triangulation type */
typedef enum NcLibUniformGridTriangulation_t
{
    TRIANGLE_STRIP_NE_DIRECTION = 0,        /**< |/|/|/|...   */
    TRIANGLE_STRIP_NW_DIRECTION = 1,        /**< |\|\|\|...   */
    TRIANGLE_STRIP_TOGGLING_DIRECTION = 2   /**< |/|\|/|...
                                                 |\|/|... */
} NcLibUniformGridTriangulation;

/* Extrapolation type */
typedef enum NcLibReverseGridExtrapolationType_t
{
    REVERSE_GRID_EXTRAPOLATION_NEAREST,                  /**< Duplicate the coordinate of nearest neighbor */
    REVERSE_GRID_EXTRAPOLATION_MV_NEAREST,               /**< Duplicate the motion vector of nearest neighbor */
    REVERSE_GRID_EXTRAPOLATION_APPROX_LINEAR             /**< Approximate linear extrapolation (this is the recommended value)  */
} NcLibReverseGridExtrapolationType;

/** NcLibWarpReverseGridDirection() input struct */
typedef struct NcLibWarpReverseGridDirectionIn_t
{
    uint32_t                      numRows;                           /**< Number of rows in (forward) arrays srcGridRowCoords and dstCoords */
    uint32_t                      numColumns;                        /**< Number of columns in (forward) arrays srcGridColumnCoords and dstCoords */
    float*                        srcGridRowCoords;                  /**< Source rectangular grid - location of rows */
    float*                        srcGridColumnCoords;               /**< Source rectangular grid - location of columns */
    NcLibWarpGridCoord*           dstCoords;                         /**< 2-dimensional array of destination coordinates */
    NcLibUniformGridTriangulation inputTriangulationType;            /**< Triangulation type to be used at source grid */
    NcLibReverseGridExtrapolationType extrapolationType;             /**< Extrapolation type used for out-of-grid samples.
                                                                      *   Recommended value is REVERSE_GRID_EXTRAPOLATION_APPROX_LINEAR. */
    uint32_t                      reversedGridNumRows;               /**< Number of rows in reversed grid */
    uint32_t                      reversedGridNumColumns;            /**< Number of columns in reversed grid */
    NcLibWarpGridCoord            reversedGridSourceTopLeft;         /**< Reversed grid: first x and y coordinate of source grid */
    NcLibWarpGridCoord            reversedGridSourceBottomRight;     /**< Reversed grid: last x and y coordinate of source grid */
    bool                          useExtraCalcsDuringExtrpolation;   /**< Relevant only when extrapolationType is equal to
                                                                      *   REVERSE_GRID_EXTRAPOLATION_NEAREST or REVERSE_GRID_EXTRAPOLATION_MV_NEAREST.
                                                                      *  Indicates that extra calculations will be done in order
                                                                      *  to handle corner cases during extrapolation (if required).
                                                                      *  By default should be false to avoid run time penalty.
                                                                      */
} NcLibWarpReverseGridDirectionIn;

/** Struct that contains the statistics on the operation of NcLibWarpReverseGridDirection() */
typedef struct NcLibWarpReverseGridStatistics_t
{
    float extrapolationPercentage;      /**< Percentage of the Grid points that were extrapolated */
}NcLibWarpReverseGridStatistics;
#pragma pack(pop)

/*------------------------------------------------------------------------
*       API Functions
* ----------------------------------------------------------------------- */

/**
*  @brief   Converts Warp struct from general domain into virtual domain
*
*  @param [in]      in      Input struct
*  @param [in,out]  out     Output Warp struct, buffer is allocated by the user.
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibWarpConvertToVirtualDomain(
    const NcLibWarp* in,
    NcLibWarp*       out);

/**
*  @brief   Generates assist grid from matrices
*
*  @param [in]      in      Input struct
*  @param [in,out]  out     Output Warp struct, buffer is allocated by the user.
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibWarpBuildAssistGrid(
    const NcLibWarpBuildAssistGridIn*    in,
    NcLibWarpBuildAssistGridOut*         out);

/**
*  @brief   NcLibGetMaxNumOfPasses used to determined maximal number of passes in IPE
*           All input sizes are defined for digital zoom of X1 (no digital zoom)
*           Number of passes does not depend on digital zoom. ( DC4/DC16/DC64 size won't be decrease )
*
*  @param [in]      ipeInputSize            Input image dimensions for IPE (as supplied to FW)
*  @param [in]      stabilizationMargins    Stabilization total margin (as supplied to FW)
*  @param [in]      icaUpScaleRatio_AtDZx1  upscale done in ICA for digital zoom X1, example upscale for
*                                                        MFSR in DZ=1 or upscale for virtual margins that is done in ICA
*                                                        (currently it is done in QSeed)
*  @param [in]      maxNumOfPassesByFlow    limit max number of passes according to flow decision,
*                                           for example video uses max of 3 passes regardless of image size
*
*  @param [out]     maxNumOfPasses          Output Warp struct, buffer is allocated by the user.
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibGetMaxNumOfPasses(
    const ImageDimensions*       ipeInputSize,
    const ImageDimensions*       stabilizationMargins,
    float                        icaUpScaleRatio_AtDZx1,
    uint32_t                     maxNumOfPassesByFlow,
    uint32_t*                    maxNumOfPasses);


/**
*  @brief   Corrects LNR and FD parameters according to LDC / Stabilization that was performed.
*
*  @param [in]      in      Input struct
*  @param [in,out]  out     Output Warp struct, buffer is allocated by the user.
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibWarpGeometries(
    const NcLibWarpGeomIn*   in,
    NcLibWarpGeomOut*        out);

/**
*  @brief   Adjust alignment matrix with Stabilization to get MCTF alignment matrix, generates a transform
*           from previous stabilized image to current stabilized image.
*
*  @param [in]      in      Input struct
*  @param [in,out]  out     Output Warp struct, buffer is allocated by the user.
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibCalcMctfTransform(
    const NcLibCalcMctfIn*   in,
    NcLibWarp*               out);

/**
*  @brief   Check NcLib warp struct validity, when applied in ICA.
*
*  @param [in]      in              Input struct
*  @param [in,out]  intermediate    Buffer used for internal calculations,
*                                   size of buffer is defined by NC_LIB_WARP_CHECK_ICA_INTERMEDIATE_BUFFER_SIZE
*  @param [out]     valid           Whether the input transformation is valid
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibCheckIcaTransformValidity(
    const NcLibCheckIcaTransformValidityIn* in,
    void*                                   intermediate,
    int32_t*                                valid);

/**
*  @brief   Given uniform input grid generates uniform inverse grid (AKA out2in conversion)
*
*  @param [in]  in              Input struct
*  @param [out] out             Output (reversed-direction) grid points. It is assumed to be pre-allocated (sizeof(NcLibWarpGridCoord) * grid size).
*  @param [out] outStats        (Optional) if not-NULL, then contains the statistics of NcLibWarpReverseGridDirection()
*                               execution.
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibWarpReverseGridDirection(
    const NcLibWarpReverseGridDirectionIn*  in,
    NcLibWarpGridCoord*                     out,
    NcLibWarpReverseGridStatistics*         outStats);

/**
*  @brief   Adjust transform grid (e.g. LDC) to IFE digital zoom window. The input grid is provided for full FOV mapped
*           to whole virtual domain and the output grid corresponds to IFE crop window mapped to whole virtual domain.
*
*  @param [in]  in                        Original grid. Coordinates must be provided in virtual domain (i.e. 
*                                         transformDefinedOn should be VIRTUAL_DOMAIN_WIDTH x VIRTUAL_DOMAIN_HEIGHT).
*  @param [in]  undistortedIfeZoomWindow  IFE zoom window in undistorted domain.
*  @param [in]  ifeZoomWindow             IFE zoom window in distorted domain. This has to be the actual ROI crop 
*                                         done in IFE.
*  @param [out] out                       Output grid matching the IFE zoom window, in virtual domain. Assumed to be
*                                         pre-allocated.
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibWarpAdaptGridToIFEDZWindow(
    const NcLibWarpGrid* in,
    const WindowRegion*  undistortedIfeZoomWindow,
    const WindowRegion*  ifeZoomWindow,
    NcLibWarpGrid*       out);

/**
*  @brief   Calculate minimal required IFE crop window (in distorted domain) that holds the required data for 
            production of undistorted IFE zoom window. The calculated IFE crop window does not respect any 
            additional constraints (like even number of pixels, etc), so further enlargement may be required.
*
*  @param [in]  undistortedIfeZoomWindow  Required IFE zoom window in undistorted domain.
*  @param [in]  grid                      LDC grid. Coordinates must be provided in virtual domain (i.e. 
                                          transformDefinedOn should be VIRTUAL_DOMAIN_WIDTH x VIRTUAL_DOMAIN_HEIGHT).
*  @param [out] minimalIfeZoomWindow      Matching IFE crop window in distorted domain (IFE output).
*                                         Actual IFE crop window should fully contain this window.
*                                         In case of invalid non-NULL input, undistortedIfeZoomWindow is copied to out.
*
*  @return NC_LIB_SUCCESS in case of success, otherwise failed.
*/
int32_t NcLibGetMinimalDistortedIfeZoomWindow(
    const IpeZoomWindow* undistortedIfeZoomWindow,
    const NcLibWarpGrid* grid,
    IpeZoomWindow*       minimalIfeZoomWindow);


#ifdef __cplusplus
}
#endif

#endif /* __NC_LIB_WARP_API__ */

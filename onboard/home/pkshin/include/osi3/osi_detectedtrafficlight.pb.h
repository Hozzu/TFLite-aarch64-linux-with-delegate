// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedtrafficlight.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedtrafficlight_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedtrafficlight_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
#include "osi_trafficlight.pb.h"
#include "osi_detectedobject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedtrafficlight_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fdetectedtrafficlight_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedtrafficlight_2eproto;
namespace osi3 {
class DetectedTrafficLight;
class DetectedTrafficLightDefaultTypeInternal;
extern DetectedTrafficLightDefaultTypeInternal _DetectedTrafficLight_default_instance_;
class DetectedTrafficLight_CandidateTrafficLight;
class DetectedTrafficLight_CandidateTrafficLightDefaultTypeInternal;
extern DetectedTrafficLight_CandidateTrafficLightDefaultTypeInternal _DetectedTrafficLight_CandidateTrafficLight_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::DetectedTrafficLight* Arena::CreateMaybeMessage<::osi3::DetectedTrafficLight>(Arena*);
template<> ::osi3::DetectedTrafficLight_CandidateTrafficLight* Arena::CreateMaybeMessage<::osi3::DetectedTrafficLight_CandidateTrafficLight>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class DetectedTrafficLight_CandidateTrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedTrafficLight.CandidateTrafficLight) */ {
 public:
  DetectedTrafficLight_CandidateTrafficLight();
  virtual ~DetectedTrafficLight_CandidateTrafficLight();

  DetectedTrafficLight_CandidateTrafficLight(const DetectedTrafficLight_CandidateTrafficLight& from);
  DetectedTrafficLight_CandidateTrafficLight(DetectedTrafficLight_CandidateTrafficLight&& from) noexcept
    : DetectedTrafficLight_CandidateTrafficLight() {
    *this = ::std::move(from);
  }

  inline DetectedTrafficLight_CandidateTrafficLight& operator=(const DetectedTrafficLight_CandidateTrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedTrafficLight_CandidateTrafficLight& operator=(DetectedTrafficLight_CandidateTrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedTrafficLight_CandidateTrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedTrafficLight_CandidateTrafficLight* internal_default_instance() {
    return reinterpret_cast<const DetectedTrafficLight_CandidateTrafficLight*>(
               &_DetectedTrafficLight_CandidateTrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectedTrafficLight_CandidateTrafficLight& a, DetectedTrafficLight_CandidateTrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedTrafficLight_CandidateTrafficLight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedTrafficLight_CandidateTrafficLight* New() const final {
    return CreateMaybeMessage<DetectedTrafficLight_CandidateTrafficLight>(nullptr);
  }

  DetectedTrafficLight_CandidateTrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedTrafficLight_CandidateTrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedTrafficLight_CandidateTrafficLight& from);
  void MergeFrom(const DetectedTrafficLight_CandidateTrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedTrafficLight_CandidateTrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedTrafficLight.CandidateTrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdetectedtrafficlight_2eproto);
    return ::descriptor_table_osi_5fdetectedtrafficlight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationFieldNumber = 2,
    kProbabilityFieldNumber = 1,
  };
  // optional .osi3.TrafficLight.Classification classification = 2;
  bool has_classification() const;
  private:
  bool _internal_has_classification() const;
  public:
  void clear_classification();
  const ::osi3::TrafficLight_Classification& classification() const;
  ::osi3::TrafficLight_Classification* release_classification();
  ::osi3::TrafficLight_Classification* mutable_classification();
  void set_allocated_classification(::osi3::TrafficLight_Classification* classification);
  private:
  const ::osi3::TrafficLight_Classification& _internal_classification() const;
  ::osi3::TrafficLight_Classification* _internal_mutable_classification();
  public:

  // optional double probability = 1;
  bool has_probability() const;
  private:
  bool _internal_has_probability() const;
  public:
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.DetectedTrafficLight.CandidateTrafficLight)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficLight_Classification* classification_;
  double probability_;
  friend struct ::TableStruct_osi_5fdetectedtrafficlight_2eproto;
};
// -------------------------------------------------------------------

class DetectedTrafficLight :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedTrafficLight) */ {
 public:
  DetectedTrafficLight();
  virtual ~DetectedTrafficLight();

  DetectedTrafficLight(const DetectedTrafficLight& from);
  DetectedTrafficLight(DetectedTrafficLight&& from) noexcept
    : DetectedTrafficLight() {
    *this = ::std::move(from);
  }

  inline DetectedTrafficLight& operator=(const DetectedTrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedTrafficLight& operator=(DetectedTrafficLight&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedTrafficLight& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DetectedTrafficLight* internal_default_instance() {
    return reinterpret_cast<const DetectedTrafficLight*>(
               &_DetectedTrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectedTrafficLight& a, DetectedTrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedTrafficLight* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedTrafficLight* New() const final {
    return CreateMaybeMessage<DetectedTrafficLight>(nullptr);
  }

  DetectedTrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedTrafficLight>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedTrafficLight& from);
  void MergeFrom(const DetectedTrafficLight& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedTrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedTrafficLight";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdetectedtrafficlight_2eproto);
    return ::descriptor_table_osi_5fdetectedtrafficlight_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetectedTrafficLight_CandidateTrafficLight CandidateTrafficLight;

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 4,
    kHeaderFieldNumber = 1,
    kBaseFieldNumber = 2,
    kBaseRmseFieldNumber = 3,
    kColorDescriptionFieldNumber = 5,
  };
  // repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
  int candidate_size() const;
  private:
  int _internal_candidate_size() const;
  public:
  void clear_candidate();
  ::osi3::DetectedTrafficLight_CandidateTrafficLight* mutable_candidate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficLight_CandidateTrafficLight >*
      mutable_candidate();
  private:
  const ::osi3::DetectedTrafficLight_CandidateTrafficLight& _internal_candidate(int index) const;
  ::osi3::DetectedTrafficLight_CandidateTrafficLight* _internal_add_candidate();
  public:
  const ::osi3::DetectedTrafficLight_CandidateTrafficLight& candidate(int index) const;
  ::osi3::DetectedTrafficLight_CandidateTrafficLight* add_candidate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficLight_CandidateTrafficLight >&
      candidate() const;

  // optional .osi3.DetectedItemHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::osi3::DetectedItemHeader& header() const;
  ::osi3::DetectedItemHeader* release_header();
  ::osi3::DetectedItemHeader* mutable_header();
  void set_allocated_header(::osi3::DetectedItemHeader* header);
  private:
  const ::osi3::DetectedItemHeader& _internal_header() const;
  ::osi3::DetectedItemHeader* _internal_mutable_header();
  public:

  // optional .osi3.BaseStationary base = 2;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::osi3::BaseStationary& base() const;
  ::osi3::BaseStationary* release_base();
  ::osi3::BaseStationary* mutable_base();
  void set_allocated_base(::osi3::BaseStationary* base);
  private:
  const ::osi3::BaseStationary& _internal_base() const;
  ::osi3::BaseStationary* _internal_mutable_base();
  public:

  // optional .osi3.BaseStationary base_rmse = 3;
  bool has_base_rmse() const;
  private:
  bool _internal_has_base_rmse() const;
  public:
  void clear_base_rmse();
  const ::osi3::BaseStationary& base_rmse() const;
  ::osi3::BaseStationary* release_base_rmse();
  ::osi3::BaseStationary* mutable_base_rmse();
  void set_allocated_base_rmse(::osi3::BaseStationary* base_rmse);
  private:
  const ::osi3::BaseStationary& _internal_base_rmse() const;
  ::osi3::BaseStationary* _internal_mutable_base_rmse();
  public:

  // optional .osi3.ColorDescription color_description = 5;
  bool has_color_description() const;
  private:
  bool _internal_has_color_description() const;
  public:
  void clear_color_description();
  const ::osi3::ColorDescription& color_description() const;
  ::osi3::ColorDescription* release_color_description();
  ::osi3::ColorDescription* mutable_color_description();
  void set_allocated_color_description(::osi3::ColorDescription* color_description);
  private:
  const ::osi3::ColorDescription& _internal_color_description() const;
  ::osi3::ColorDescription* _internal_mutable_color_description();
  public:

  // @@protoc_insertion_point(class_scope:osi3.DetectedTrafficLight)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficLight_CandidateTrafficLight > candidate_;
  ::osi3::DetectedItemHeader* header_;
  ::osi3::BaseStationary* base_;
  ::osi3::BaseStationary* base_rmse_;
  ::osi3::ColorDescription* color_description_;
  friend struct ::TableStruct_osi_5fdetectedtrafficlight_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectedTrafficLight_CandidateTrafficLight

// optional double probability = 1;
inline bool DetectedTrafficLight_CandidateTrafficLight::_internal_has_probability() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DetectedTrafficLight_CandidateTrafficLight::has_probability() const {
  return _internal_has_probability();
}
inline void DetectedTrafficLight_CandidateTrafficLight::clear_probability() {
  probability_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DetectedTrafficLight_CandidateTrafficLight::_internal_probability() const {
  return probability_;
}
inline double DetectedTrafficLight_CandidateTrafficLight::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.CandidateTrafficLight.probability)
  return _internal_probability();
}
inline void DetectedTrafficLight_CandidateTrafficLight::_internal_set_probability(double value) {
  _has_bits_[0] |= 0x00000002u;
  probability_ = value;
}
inline void DetectedTrafficLight_CandidateTrafficLight::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:osi3.DetectedTrafficLight.CandidateTrafficLight.probability)
}

// optional .osi3.TrafficLight.Classification classification = 2;
inline bool DetectedTrafficLight_CandidateTrafficLight::_internal_has_classification() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || classification_ != nullptr);
  return value;
}
inline bool DetectedTrafficLight_CandidateTrafficLight::has_classification() const {
  return _internal_has_classification();
}
inline const ::osi3::TrafficLight_Classification& DetectedTrafficLight_CandidateTrafficLight::_internal_classification() const {
  const ::osi3::TrafficLight_Classification* p = classification_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficLight_Classification*>(
      &::osi3::_TrafficLight_Classification_default_instance_);
}
inline const ::osi3::TrafficLight_Classification& DetectedTrafficLight_CandidateTrafficLight::classification() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.CandidateTrafficLight.classification)
  return _internal_classification();
}
inline ::osi3::TrafficLight_Classification* DetectedTrafficLight_CandidateTrafficLight::release_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.CandidateTrafficLight.classification)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficLight_Classification* temp = classification_;
  classification_ = nullptr;
  return temp;
}
inline ::osi3::TrafficLight_Classification* DetectedTrafficLight_CandidateTrafficLight::_internal_mutable_classification() {
  _has_bits_[0] |= 0x00000001u;
  if (classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficLight_Classification>(GetArenaNoVirtual());
    classification_ = p;
  }
  return classification_;
}
inline ::osi3::TrafficLight_Classification* DetectedTrafficLight_CandidateTrafficLight::mutable_classification() {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.CandidateTrafficLight.classification)
  return _internal_mutable_classification();
}
inline void DetectedTrafficLight_CandidateTrafficLight::set_allocated_classification(::osi3::TrafficLight_Classification* classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(classification_);
  }
  if (classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classification, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  classification_ = classification;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.CandidateTrafficLight.classification)
}

// -------------------------------------------------------------------

// DetectedTrafficLight

// optional .osi3.DetectedItemHeader header = 1;
inline bool DetectedTrafficLight::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool DetectedTrafficLight::has_header() const {
  return _internal_has_header();
}
inline const ::osi3::DetectedItemHeader& DetectedTrafficLight::_internal_header() const {
  const ::osi3::DetectedItemHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::DetectedItemHeader*>(
      &::osi3::_DetectedItemHeader_default_instance_);
}
inline const ::osi3::DetectedItemHeader& DetectedTrafficLight::header() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.header)
  return _internal_header();
}
inline ::osi3::DetectedItemHeader* DetectedTrafficLight::release_header() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::osi3::DetectedItemHeader* DetectedTrafficLight::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000001u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::DetectedItemHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::osi3::DetectedItemHeader* DetectedTrafficLight::mutable_header() {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.header)
  return _internal_mutable_header();
}
inline void DetectedTrafficLight::set_allocated_header(::osi3::DetectedItemHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.header)
}

// optional .osi3.BaseStationary base = 2;
inline bool DetectedTrafficLight::_internal_has_base() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || base_ != nullptr);
  return value;
}
inline bool DetectedTrafficLight::has_base() const {
  return _internal_has_base();
}
inline const ::osi3::BaseStationary& DetectedTrafficLight::_internal_base() const {
  const ::osi3::BaseStationary* p = base_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseStationary*>(
      &::osi3::_BaseStationary_default_instance_);
}
inline const ::osi3::BaseStationary& DetectedTrafficLight::base() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.base)
  return _internal_base();
}
inline ::osi3::BaseStationary* DetectedTrafficLight::release_base() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.base)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::BaseStationary* temp = base_;
  base_ = nullptr;
  return temp;
}
inline ::osi3::BaseStationary* DetectedTrafficLight::_internal_mutable_base() {
  _has_bits_[0] |= 0x00000002u;
  if (base_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseStationary>(GetArenaNoVirtual());
    base_ = p;
  }
  return base_;
}
inline ::osi3::BaseStationary* DetectedTrafficLight::mutable_base() {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.base)
  return _internal_mutable_base();
}
inline void DetectedTrafficLight::set_allocated_base(::osi3::BaseStationary* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_);
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  base_ = base;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.base)
}

// optional .osi3.BaseStationary base_rmse = 3;
inline bool DetectedTrafficLight::_internal_has_base_rmse() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || base_rmse_ != nullptr);
  return value;
}
inline bool DetectedTrafficLight::has_base_rmse() const {
  return _internal_has_base_rmse();
}
inline const ::osi3::BaseStationary& DetectedTrafficLight::_internal_base_rmse() const {
  const ::osi3::BaseStationary* p = base_rmse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseStationary*>(
      &::osi3::_BaseStationary_default_instance_);
}
inline const ::osi3::BaseStationary& DetectedTrafficLight::base_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.base_rmse)
  return _internal_base_rmse();
}
inline ::osi3::BaseStationary* DetectedTrafficLight::release_base_rmse() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.base_rmse)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::BaseStationary* temp = base_rmse_;
  base_rmse_ = nullptr;
  return temp;
}
inline ::osi3::BaseStationary* DetectedTrafficLight::_internal_mutable_base_rmse() {
  _has_bits_[0] |= 0x00000004u;
  if (base_rmse_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseStationary>(GetArenaNoVirtual());
    base_rmse_ = p;
  }
  return base_rmse_;
}
inline ::osi3::BaseStationary* DetectedTrafficLight::mutable_base_rmse() {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.base_rmse)
  return _internal_mutable_base_rmse();
}
inline void DetectedTrafficLight::set_allocated_base_rmse(::osi3::BaseStationary* base_rmse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_rmse_);
  }
  if (base_rmse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      base_rmse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_rmse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  base_rmse_ = base_rmse;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.base_rmse)
}

// repeated .osi3.DetectedTrafficLight.CandidateTrafficLight candidate = 4;
inline int DetectedTrafficLight::_internal_candidate_size() const {
  return candidate_.size();
}
inline int DetectedTrafficLight::candidate_size() const {
  return _internal_candidate_size();
}
inline void DetectedTrafficLight::clear_candidate() {
  candidate_.Clear();
}
inline ::osi3::DetectedTrafficLight_CandidateTrafficLight* DetectedTrafficLight::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.candidate)
  return candidate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficLight_CandidateTrafficLight >*
DetectedTrafficLight::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedTrafficLight.candidate)
  return &candidate_;
}
inline const ::osi3::DetectedTrafficLight_CandidateTrafficLight& DetectedTrafficLight::_internal_candidate(int index) const {
  return candidate_.Get(index);
}
inline const ::osi3::DetectedTrafficLight_CandidateTrafficLight& DetectedTrafficLight::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.candidate)
  return _internal_candidate(index);
}
inline ::osi3::DetectedTrafficLight_CandidateTrafficLight* DetectedTrafficLight::_internal_add_candidate() {
  return candidate_.Add();
}
inline ::osi3::DetectedTrafficLight_CandidateTrafficLight* DetectedTrafficLight::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedTrafficLight.candidate)
  return _internal_add_candidate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedTrafficLight_CandidateTrafficLight >&
DetectedTrafficLight::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedTrafficLight.candidate)
  return candidate_;
}

// optional .osi3.ColorDescription color_description = 5;
inline bool DetectedTrafficLight::_internal_has_color_description() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || color_description_ != nullptr);
  return value;
}
inline bool DetectedTrafficLight::has_color_description() const {
  return _internal_has_color_description();
}
inline const ::osi3::ColorDescription& DetectedTrafficLight::_internal_color_description() const {
  const ::osi3::ColorDescription* p = color_description_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::ColorDescription*>(
      &::osi3::_ColorDescription_default_instance_);
}
inline const ::osi3::ColorDescription& DetectedTrafficLight::color_description() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedTrafficLight.color_description)
  return _internal_color_description();
}
inline ::osi3::ColorDescription* DetectedTrafficLight::release_color_description() {
  // @@protoc_insertion_point(field_release:osi3.DetectedTrafficLight.color_description)
  _has_bits_[0] &= ~0x00000008u;
  ::osi3::ColorDescription* temp = color_description_;
  color_description_ = nullptr;
  return temp;
}
inline ::osi3::ColorDescription* DetectedTrafficLight::_internal_mutable_color_description() {
  _has_bits_[0] |= 0x00000008u;
  if (color_description_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::ColorDescription>(GetArenaNoVirtual());
    color_description_ = p;
  }
  return color_description_;
}
inline ::osi3::ColorDescription* DetectedTrafficLight::mutable_color_description() {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedTrafficLight.color_description)
  return _internal_mutable_color_description();
}
inline void DetectedTrafficLight::set_allocated_color_description(::osi3::ColorDescription* color_description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_description_);
  }
  if (color_description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color_description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color_description, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  color_description_ = color_description;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedTrafficLight.color_description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedtrafficlight_2eproto

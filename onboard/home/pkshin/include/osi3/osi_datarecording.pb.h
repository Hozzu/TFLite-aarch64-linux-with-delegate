// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_datarecording.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fdatarecording_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fdatarecording_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "osi_sensordata.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fdatarecording_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fdatarecording_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdatarecording_2eproto;
namespace osi3 {
class SensorDataSeries;
class SensorDataSeriesDefaultTypeInternal;
extern SensorDataSeriesDefaultTypeInternal _SensorDataSeries_default_instance_;
class SensorDataSeriesList;
class SensorDataSeriesListDefaultTypeInternal;
extern SensorDataSeriesListDefaultTypeInternal _SensorDataSeriesList_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::SensorDataSeries* Arena::CreateMaybeMessage<::osi3::SensorDataSeries>(Arena*);
template<> ::osi3::SensorDataSeriesList* Arena::CreateMaybeMessage<::osi3::SensorDataSeriesList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class SensorDataSeries :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.SensorDataSeries) */ {
 public:
  SensorDataSeries();
  virtual ~SensorDataSeries();

  SensorDataSeries(const SensorDataSeries& from);
  SensorDataSeries(SensorDataSeries&& from) noexcept
    : SensorDataSeries() {
    *this = ::std::move(from);
  }

  inline SensorDataSeries& operator=(const SensorDataSeries& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDataSeries& operator=(SensorDataSeries&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorDataSeries& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorDataSeries* internal_default_instance() {
    return reinterpret_cast<const SensorDataSeries*>(
               &_SensorDataSeries_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SensorDataSeries& a, SensorDataSeries& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDataSeries* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorDataSeries* New() const final {
    return CreateMaybeMessage<SensorDataSeries>(nullptr);
  }

  SensorDataSeries* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorDataSeries>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorDataSeries& from);
  void MergeFrom(const SensorDataSeries& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDataSeries* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.SensorDataSeries";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdatarecording_2eproto);
    return ::descriptor_table_osi_5fdatarecording_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorDataFieldNumber = 1,
  };
  // repeated .osi3.SensorData sensor_data = 1;
  int sensor_data_size() const;
  private:
  int _internal_sensor_data_size() const;
  public:
  void clear_sensor_data();
  ::osi3::SensorData* mutable_sensor_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorData >*
      mutable_sensor_data();
  private:
  const ::osi3::SensorData& _internal_sensor_data(int index) const;
  ::osi3::SensorData* _internal_add_sensor_data();
  public:
  const ::osi3::SensorData& sensor_data(int index) const;
  ::osi3::SensorData* add_sensor_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorData >&
      sensor_data() const;

  // @@protoc_insertion_point(class_scope:osi3.SensorDataSeries)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorData > sensor_data_;
  friend struct ::TableStruct_osi_5fdatarecording_2eproto;
};
// -------------------------------------------------------------------

class SensorDataSeriesList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.SensorDataSeriesList) */ {
 public:
  SensorDataSeriesList();
  virtual ~SensorDataSeriesList();

  SensorDataSeriesList(const SensorDataSeriesList& from);
  SensorDataSeriesList(SensorDataSeriesList&& from) noexcept
    : SensorDataSeriesList() {
    *this = ::std::move(from);
  }

  inline SensorDataSeriesList& operator=(const SensorDataSeriesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SensorDataSeriesList& operator=(SensorDataSeriesList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SensorDataSeriesList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorDataSeriesList* internal_default_instance() {
    return reinterpret_cast<const SensorDataSeriesList*>(
               &_SensorDataSeriesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SensorDataSeriesList& a, SensorDataSeriesList& b) {
    a.Swap(&b);
  }
  inline void Swap(SensorDataSeriesList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SensorDataSeriesList* New() const final {
    return CreateMaybeMessage<SensorDataSeriesList>(nullptr);
  }

  SensorDataSeriesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SensorDataSeriesList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SensorDataSeriesList& from);
  void MergeFrom(const SensorDataSeriesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorDataSeriesList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.SensorDataSeriesList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fdatarecording_2eproto);
    return ::descriptor_table_osi_5fdatarecording_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorFieldNumber = 1,
  };
  // repeated .osi3.SensorDataSeries sensor = 1;
  int sensor_size() const;
  private:
  int _internal_sensor_size() const;
  public:
  void clear_sensor();
  ::osi3::SensorDataSeries* mutable_sensor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorDataSeries >*
      mutable_sensor();
  private:
  const ::osi3::SensorDataSeries& _internal_sensor(int index) const;
  ::osi3::SensorDataSeries* _internal_add_sensor();
  public:
  const ::osi3::SensorDataSeries& sensor(int index) const;
  ::osi3::SensorDataSeries* add_sensor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorDataSeries >&
      sensor() const;

  // @@protoc_insertion_point(class_scope:osi3.SensorDataSeriesList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorDataSeries > sensor_;
  friend struct ::TableStruct_osi_5fdatarecording_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SensorDataSeries

// repeated .osi3.SensorData sensor_data = 1;
inline int SensorDataSeries::_internal_sensor_data_size() const {
  return sensor_data_.size();
}
inline int SensorDataSeries::sensor_data_size() const {
  return _internal_sensor_data_size();
}
inline ::osi3::SensorData* SensorDataSeries::mutable_sensor_data(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorDataSeries.sensor_data)
  return sensor_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorData >*
SensorDataSeries::mutable_sensor_data() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorDataSeries.sensor_data)
  return &sensor_data_;
}
inline const ::osi3::SensorData& SensorDataSeries::_internal_sensor_data(int index) const {
  return sensor_data_.Get(index);
}
inline const ::osi3::SensorData& SensorDataSeries::sensor_data(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorDataSeries.sensor_data)
  return _internal_sensor_data(index);
}
inline ::osi3::SensorData* SensorDataSeries::_internal_add_sensor_data() {
  return sensor_data_.Add();
}
inline ::osi3::SensorData* SensorDataSeries::add_sensor_data() {
  // @@protoc_insertion_point(field_add:osi3.SensorDataSeries.sensor_data)
  return _internal_add_sensor_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorData >&
SensorDataSeries::sensor_data() const {
  // @@protoc_insertion_point(field_list:osi3.SensorDataSeries.sensor_data)
  return sensor_data_;
}

// -------------------------------------------------------------------

// SensorDataSeriesList

// repeated .osi3.SensorDataSeries sensor = 1;
inline int SensorDataSeriesList::_internal_sensor_size() const {
  return sensor_.size();
}
inline int SensorDataSeriesList::sensor_size() const {
  return _internal_sensor_size();
}
inline void SensorDataSeriesList::clear_sensor() {
  sensor_.Clear();
}
inline ::osi3::SensorDataSeries* SensorDataSeriesList::mutable_sensor(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.SensorDataSeriesList.sensor)
  return sensor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorDataSeries >*
SensorDataSeriesList::mutable_sensor() {
  // @@protoc_insertion_point(field_mutable_list:osi3.SensorDataSeriesList.sensor)
  return &sensor_;
}
inline const ::osi3::SensorDataSeries& SensorDataSeriesList::_internal_sensor(int index) const {
  return sensor_.Get(index);
}
inline const ::osi3::SensorDataSeries& SensorDataSeriesList::sensor(int index) const {
  // @@protoc_insertion_point(field_get:osi3.SensorDataSeriesList.sensor)
  return _internal_sensor(index);
}
inline ::osi3::SensorDataSeries* SensorDataSeriesList::_internal_add_sensor() {
  return sensor_.Add();
}
inline ::osi3::SensorDataSeries* SensorDataSeriesList::add_sensor() {
  // @@protoc_insertion_point(field_add:osi3.SensorDataSeriesList.sensor)
  return _internal_add_sensor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::SensorDataSeries >&
SensorDataSeriesList::sensor() const {
  // @@protoc_insertion_point(field_list:osi3.SensorDataSeriesList.sensor)
  return sensor_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fdatarecording_2eproto

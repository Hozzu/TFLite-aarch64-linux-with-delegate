// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_hostvehicledata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fhostvehicledata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fhostvehicledata_2eproto;
namespace osi3 {
class HostVehicleData;
class HostVehicleDataDefaultTypeInternal;
extern HostVehicleDataDefaultTypeInternal _HostVehicleData_default_instance_;
class HostVehicleData_VehicleBasics;
class HostVehicleData_VehicleBasicsDefaultTypeInternal;
extern HostVehicleData_VehicleBasicsDefaultTypeInternal _HostVehicleData_VehicleBasics_default_instance_;
class HostVehicleData_VehicleBrakeSystem;
class HostVehicleData_VehicleBrakeSystemDefaultTypeInternal;
extern HostVehicleData_VehicleBrakeSystemDefaultTypeInternal _HostVehicleData_VehicleBrakeSystem_default_instance_;
class HostVehicleData_VehicleLocalization;
class HostVehicleData_VehicleLocalizationDefaultTypeInternal;
extern HostVehicleData_VehicleLocalizationDefaultTypeInternal _HostVehicleData_VehicleLocalization_default_instance_;
class HostVehicleData_VehiclePowertrain;
class HostVehicleData_VehiclePowertrainDefaultTypeInternal;
extern HostVehicleData_VehiclePowertrainDefaultTypeInternal _HostVehicleData_VehiclePowertrain_default_instance_;
class HostVehicleData_VehiclePowertrain_Motor;
class HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal;
extern HostVehicleData_VehiclePowertrain_MotorDefaultTypeInternal _HostVehicleData_VehiclePowertrain_Motor_default_instance_;
class HostVehicleData_VehicleSteering;
class HostVehicleData_VehicleSteeringDefaultTypeInternal;
extern HostVehicleData_VehicleSteeringDefaultTypeInternal _HostVehicleData_VehicleSteering_default_instance_;
class HostVehicleData_VehicleWheels;
class HostVehicleData_VehicleWheelsDefaultTypeInternal;
extern HostVehicleData_VehicleWheelsDefaultTypeInternal _HostVehicleData_VehicleWheels_default_instance_;
class HostVehicleData_VehicleWheels_WheelData;
class HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal;
extern HostVehicleData_VehicleWheels_WheelDataDefaultTypeInternal _HostVehicleData_VehicleWheels_WheelData_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::HostVehicleData* Arena::CreateMaybeMessage<::osi3::HostVehicleData>(Arena*);
template<> ::osi3::HostVehicleData_VehicleBasics* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleBasics>(Arena*);
template<> ::osi3::HostVehicleData_VehicleBrakeSystem* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleBrakeSystem>(Arena*);
template<> ::osi3::HostVehicleData_VehicleLocalization* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleLocalization>(Arena*);
template<> ::osi3::HostVehicleData_VehiclePowertrain* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehiclePowertrain>(Arena*);
template<> ::osi3::HostVehicleData_VehiclePowertrain_Motor* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehiclePowertrain_Motor>(Arena*);
template<> ::osi3::HostVehicleData_VehicleSteering* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleSteering>(Arena*);
template<> ::osi3::HostVehicleData_VehicleWheels* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleWheels>(Arena*);
template<> ::osi3::HostVehicleData_VehicleWheels_WheelData* Arena::CreateMaybeMessage<::osi3::HostVehicleData_VehicleWheels_WheelData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum HostVehicleData_VehiclePowertrain_Motor_Type : int {
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_UNKNOWN = 0,
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_OTHER = 1,
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_OTTO = 2,
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_DIESEL = 3,
  HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_ELECTRIC = 4
};
bool HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(int value);
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor_Type_Type_MIN = HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_UNKNOWN;
constexpr HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor_Type_Type_MAX = HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_ELECTRIC;
constexpr int HostVehicleData_VehiclePowertrain_Motor_Type_Type_ARRAYSIZE = HostVehicleData_VehiclePowertrain_Motor_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HostVehicleData_VehiclePowertrain_Motor_Type_descriptor();
template<typename T>
inline const std::string& HostVehicleData_VehiclePowertrain_Motor_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HostVehicleData_VehiclePowertrain_Motor_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HostVehicleData_VehiclePowertrain_Motor_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HostVehicleData_VehiclePowertrain_Motor_Type_descriptor(), enum_t_value);
}
inline bool HostVehicleData_VehiclePowertrain_Motor_Type_Parse(
    const std::string& name, HostVehicleData_VehiclePowertrain_Motor_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HostVehicleData_VehiclePowertrain_Motor_Type>(
    HostVehicleData_VehiclePowertrain_Motor_Type_descriptor(), name, value);
}
// ===================================================================

class HostVehicleData_VehicleBasics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleBasics) */ {
 public:
  HostVehicleData_VehicleBasics();
  virtual ~HostVehicleData_VehicleBasics();

  HostVehicleData_VehicleBasics(const HostVehicleData_VehicleBasics& from);
  HostVehicleData_VehicleBasics(HostVehicleData_VehicleBasics&& from) noexcept
    : HostVehicleData_VehicleBasics() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleBasics& operator=(const HostVehicleData_VehicleBasics& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleBasics& operator=(HostVehicleData_VehicleBasics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData_VehicleBasics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData_VehicleBasics* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleBasics*>(
               &_HostVehicleData_VehicleBasics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostVehicleData_VehicleBasics& a, HostVehicleData_VehicleBasics& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleBasics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData_VehicleBasics* New() const final {
    return CreateMaybeMessage<HostVehicleData_VehicleBasics>(nullptr);
  }

  HostVehicleData_VehicleBasics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleBasics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData_VehicleBasics& from);
  void MergeFrom(const HostVehicleData_VehicleBasics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleBasics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleBasics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurbWeightFieldNumber = 1,
  };
  // optional double curb_weight = 1;
  bool has_curb_weight() const;
  private:
  bool _internal_has_curb_weight() const;
  public:
  void clear_curb_weight();
  double curb_weight() const;
  void set_curb_weight(double value);
  private:
  double _internal_curb_weight() const;
  void _internal_set_curb_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleBasics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double curb_weight_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehiclePowertrain_Motor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehiclePowertrain.Motor) */ {
 public:
  HostVehicleData_VehiclePowertrain_Motor();
  virtual ~HostVehicleData_VehiclePowertrain_Motor();

  HostVehicleData_VehiclePowertrain_Motor(const HostVehicleData_VehiclePowertrain_Motor& from);
  HostVehicleData_VehiclePowertrain_Motor(HostVehicleData_VehiclePowertrain_Motor&& from) noexcept
    : HostVehicleData_VehiclePowertrain_Motor() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehiclePowertrain_Motor& operator=(const HostVehicleData_VehiclePowertrain_Motor& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehiclePowertrain_Motor& operator=(HostVehicleData_VehiclePowertrain_Motor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData_VehiclePowertrain_Motor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData_VehiclePowertrain_Motor* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehiclePowertrain_Motor*>(
               &_HostVehicleData_VehiclePowertrain_Motor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(HostVehicleData_VehiclePowertrain_Motor& a, HostVehicleData_VehiclePowertrain_Motor& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehiclePowertrain_Motor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData_VehiclePowertrain_Motor* New() const final {
    return CreateMaybeMessage<HostVehicleData_VehiclePowertrain_Motor>(nullptr);
  }

  HostVehicleData_VehiclePowertrain_Motor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData_VehiclePowertrain_Motor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData_VehiclePowertrain_Motor& from);
  void MergeFrom(const HostVehicleData_VehiclePowertrain_Motor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehiclePowertrain_Motor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehiclePowertrain.Motor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehiclePowertrain_Motor_Type Type;
  static constexpr Type TYPE_UNKNOWN =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_UNKNOWN;
  static constexpr Type TYPE_OTHER =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_OTHER;
  static constexpr Type TYPE_OTTO =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_OTTO;
  static constexpr Type TYPE_DIESEL =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_DIESEL;
  static constexpr Type TYPE_ELECTRIC =
    HostVehicleData_VehiclePowertrain_Motor_Type_TYPE_ELECTRIC;
  static inline bool Type_IsValid(int value) {
    return HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    HostVehicleData_VehiclePowertrain_Motor_Type_Type_MIN;
  static constexpr Type Type_MAX =
    HostVehicleData_VehiclePowertrain_Motor_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    HostVehicleData_VehiclePowertrain_Motor_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return HostVehicleData_VehiclePowertrain_Motor_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return HostVehicleData_VehiclePowertrain_Motor_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(const std::string& name,
      Type* value) {
    return HostVehicleData_VehiclePowertrain_Motor_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRpmFieldNumber = 2,
    kTorqueFieldNumber = 3,
    kTypeFieldNumber = 1,
  };
  // optional double rpm = 2;
  bool has_rpm() const;
  private:
  bool _internal_has_rpm() const;
  public:
  void clear_rpm();
  double rpm() const;
  void set_rpm(double value);
  private:
  double _internal_rpm() const;
  void _internal_set_rpm(double value);
  public:

  // optional double torque = 3;
  bool has_torque() const;
  private:
  bool _internal_has_torque() const;
  public:
  void clear_torque();
  double torque() const;
  void set_torque(double value);
  private:
  double _internal_torque() const;
  void _internal_set_torque(double value);
  public:

  // optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type type() const;
  void set_type(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type value);
  private:
  ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type _internal_type() const;
  void _internal_set_type(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehiclePowertrain.Motor)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double rpm_;
  double torque_;
  int type_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehiclePowertrain :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehiclePowertrain) */ {
 public:
  HostVehicleData_VehiclePowertrain();
  virtual ~HostVehicleData_VehiclePowertrain();

  HostVehicleData_VehiclePowertrain(const HostVehicleData_VehiclePowertrain& from);
  HostVehicleData_VehiclePowertrain(HostVehicleData_VehiclePowertrain&& from) noexcept
    : HostVehicleData_VehiclePowertrain() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehiclePowertrain& operator=(const HostVehicleData_VehiclePowertrain& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehiclePowertrain& operator=(HostVehicleData_VehiclePowertrain&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData_VehiclePowertrain& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData_VehiclePowertrain* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehiclePowertrain*>(
               &_HostVehicleData_VehiclePowertrain_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HostVehicleData_VehiclePowertrain& a, HostVehicleData_VehiclePowertrain& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehiclePowertrain* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData_VehiclePowertrain* New() const final {
    return CreateMaybeMessage<HostVehicleData_VehiclePowertrain>(nullptr);
  }

  HostVehicleData_VehiclePowertrain* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData_VehiclePowertrain>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData_VehiclePowertrain& from);
  void MergeFrom(const HostVehicleData_VehiclePowertrain& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehiclePowertrain* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehiclePowertrain";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehiclePowertrain_Motor Motor;

  // accessors -------------------------------------------------------

  enum : int {
    kMotorFieldNumber = 4,
    kPedalPositionAccelerationFieldNumber = 1,
    kPedalPositionClutchFieldNumber = 2,
    kGearTransmissionFieldNumber = 3,
  };
  // repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
  int motor_size() const;
  private:
  int _internal_motor_size() const;
  public:
  void clear_motor();
  ::osi3::HostVehicleData_VehiclePowertrain_Motor* mutable_motor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor >*
      mutable_motor();
  private:
  const ::osi3::HostVehicleData_VehiclePowertrain_Motor& _internal_motor(int index) const;
  ::osi3::HostVehicleData_VehiclePowertrain_Motor* _internal_add_motor();
  public:
  const ::osi3::HostVehicleData_VehiclePowertrain_Motor& motor(int index) const;
  ::osi3::HostVehicleData_VehiclePowertrain_Motor* add_motor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor >&
      motor() const;

  // optional double pedal_position_acceleration = 1;
  bool has_pedal_position_acceleration() const;
  private:
  bool _internal_has_pedal_position_acceleration() const;
  public:
  void clear_pedal_position_acceleration();
  double pedal_position_acceleration() const;
  void set_pedal_position_acceleration(double value);
  private:
  double _internal_pedal_position_acceleration() const;
  void _internal_set_pedal_position_acceleration(double value);
  public:

  // optional double pedal_position_clutch = 2;
  bool has_pedal_position_clutch() const;
  private:
  bool _internal_has_pedal_position_clutch() const;
  public:
  void clear_pedal_position_clutch();
  double pedal_position_clutch() const;
  void set_pedal_position_clutch(double value);
  private:
  double _internal_pedal_position_clutch() const;
  void _internal_set_pedal_position_clutch(double value);
  public:

  // optional int32 gear_transmission = 3;
  bool has_gear_transmission() const;
  private:
  bool _internal_has_gear_transmission() const;
  public:
  void clear_gear_transmission();
  ::PROTOBUF_NAMESPACE_ID::int32 gear_transmission() const;
  void set_gear_transmission(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gear_transmission() const;
  void _internal_set_gear_transmission(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehiclePowertrain)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor > motor_;
  double pedal_position_acceleration_;
  double pedal_position_clutch_;
  ::PROTOBUF_NAMESPACE_ID::int32 gear_transmission_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleBrakeSystem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleBrakeSystem) */ {
 public:
  HostVehicleData_VehicleBrakeSystem();
  virtual ~HostVehicleData_VehicleBrakeSystem();

  HostVehicleData_VehicleBrakeSystem(const HostVehicleData_VehicleBrakeSystem& from);
  HostVehicleData_VehicleBrakeSystem(HostVehicleData_VehicleBrakeSystem&& from) noexcept
    : HostVehicleData_VehicleBrakeSystem() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleBrakeSystem& operator=(const HostVehicleData_VehicleBrakeSystem& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleBrakeSystem& operator=(HostVehicleData_VehicleBrakeSystem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData_VehicleBrakeSystem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData_VehicleBrakeSystem* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleBrakeSystem*>(
               &_HostVehicleData_VehicleBrakeSystem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HostVehicleData_VehicleBrakeSystem& a, HostVehicleData_VehicleBrakeSystem& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleBrakeSystem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData_VehicleBrakeSystem* New() const final {
    return CreateMaybeMessage<HostVehicleData_VehicleBrakeSystem>(nullptr);
  }

  HostVehicleData_VehicleBrakeSystem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleBrakeSystem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData_VehicleBrakeSystem& from);
  void MergeFrom(const HostVehicleData_VehicleBrakeSystem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleBrakeSystem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleBrakeSystem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPedalPositionBrakeFieldNumber = 1,
  };
  // optional double pedal_position_brake = 1;
  bool has_pedal_position_brake() const;
  private:
  bool _internal_has_pedal_position_brake() const;
  public:
  void clear_pedal_position_brake();
  double pedal_position_brake() const;
  void set_pedal_position_brake(double value);
  private:
  double _internal_pedal_position_brake() const;
  void _internal_set_pedal_position_brake(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleBrakeSystem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double pedal_position_brake_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleSteering :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleSteering) */ {
 public:
  HostVehicleData_VehicleSteering();
  virtual ~HostVehicleData_VehicleSteering();

  HostVehicleData_VehicleSteering(const HostVehicleData_VehicleSteering& from);
  HostVehicleData_VehicleSteering(HostVehicleData_VehicleSteering&& from) noexcept
    : HostVehicleData_VehicleSteering() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleSteering& operator=(const HostVehicleData_VehicleSteering& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleSteering& operator=(HostVehicleData_VehicleSteering&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData_VehicleSteering& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData_VehicleSteering* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleSteering*>(
               &_HostVehicleData_VehicleSteering_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HostVehicleData_VehicleSteering& a, HostVehicleData_VehicleSteering& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleSteering* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData_VehicleSteering* New() const final {
    return CreateMaybeMessage<HostVehicleData_VehicleSteering>(nullptr);
  }

  HostVehicleData_VehicleSteering* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleSteering>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData_VehicleSteering& from);
  void MergeFrom(const HostVehicleData_VehicleSteering& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleSteering* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleSteering";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehicleSteeringWheelFieldNumber = 1,
  };
  // optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
  bool has_vehicle_steering_wheel() const;
  private:
  bool _internal_has_vehicle_steering_wheel() const;
  public:
  void clear_vehicle_steering_wheel();
  const ::osi3::VehicleSteeringWheel& vehicle_steering_wheel() const;
  ::osi3::VehicleSteeringWheel* release_vehicle_steering_wheel();
  ::osi3::VehicleSteeringWheel* mutable_vehicle_steering_wheel();
  void set_allocated_vehicle_steering_wheel(::osi3::VehicleSteeringWheel* vehicle_steering_wheel);
  private:
  const ::osi3::VehicleSteeringWheel& _internal_vehicle_steering_wheel() const;
  ::osi3::VehicleSteeringWheel* _internal_mutable_vehicle_steering_wheel();
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleSteering)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::VehicleSteeringWheel* vehicle_steering_wheel_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleWheels_WheelData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleWheels.WheelData) */ {
 public:
  HostVehicleData_VehicleWheels_WheelData();
  virtual ~HostVehicleData_VehicleWheels_WheelData();

  HostVehicleData_VehicleWheels_WheelData(const HostVehicleData_VehicleWheels_WheelData& from);
  HostVehicleData_VehicleWheels_WheelData(HostVehicleData_VehicleWheels_WheelData&& from) noexcept
    : HostVehicleData_VehicleWheels_WheelData() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleWheels_WheelData& operator=(const HostVehicleData_VehicleWheels_WheelData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleWheels_WheelData& operator=(HostVehicleData_VehicleWheels_WheelData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData_VehicleWheels_WheelData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData_VehicleWheels_WheelData* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleWheels_WheelData*>(
               &_HostVehicleData_VehicleWheels_WheelData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(HostVehicleData_VehicleWheels_WheelData& a, HostVehicleData_VehicleWheels_WheelData& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleWheels_WheelData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData_VehicleWheels_WheelData* New() const final {
    return CreateMaybeMessage<HostVehicleData_VehicleWheels_WheelData>(nullptr);
  }

  HostVehicleData_VehicleWheels_WheelData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleWheels_WheelData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData_VehicleWheels_WheelData& from);
  void MergeFrom(const HostVehicleData_VehicleWheels_WheelData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleWheels_WheelData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleWheels.WheelData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxleFieldNumber = 1,
    kIndexFieldNumber = 2,
    kRotationRateFieldNumber = 3,
    kSlipFieldNumber = 4,
  };
  // optional uint32 axle = 1;
  bool has_axle() const;
  private:
  bool _internal_has_axle() const;
  public:
  void clear_axle();
  ::PROTOBUF_NAMESPACE_ID::uint32 axle() const;
  void set_axle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_axle() const;
  void _internal_set_axle(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional double rotation_rate = 3;
  bool has_rotation_rate() const;
  private:
  bool _internal_has_rotation_rate() const;
  public:
  void clear_rotation_rate();
  double rotation_rate() const;
  void set_rotation_rate(double value);
  private:
  double _internal_rotation_rate() const;
  void _internal_set_rotation_rate(double value);
  public:

  // optional double slip = 4;
  bool has_slip() const;
  private:
  bool _internal_has_slip() const;
  public:
  void clear_slip();
  double slip() const;
  void set_slip(double value);
  private:
  double _internal_slip() const;
  void _internal_set_slip(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleWheels.WheelData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 axle_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  double rotation_rate_;
  double slip_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleWheels :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleWheels) */ {
 public:
  HostVehicleData_VehicleWheels();
  virtual ~HostVehicleData_VehicleWheels();

  HostVehicleData_VehicleWheels(const HostVehicleData_VehicleWheels& from);
  HostVehicleData_VehicleWheels(HostVehicleData_VehicleWheels&& from) noexcept
    : HostVehicleData_VehicleWheels() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleWheels& operator=(const HostVehicleData_VehicleWheels& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleWheels& operator=(HostVehicleData_VehicleWheels&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData_VehicleWheels& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData_VehicleWheels* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleWheels*>(
               &_HostVehicleData_VehicleWheels_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(HostVehicleData_VehicleWheels& a, HostVehicleData_VehicleWheels& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleWheels* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData_VehicleWheels* New() const final {
    return CreateMaybeMessage<HostVehicleData_VehicleWheels>(nullptr);
  }

  HostVehicleData_VehicleWheels* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleWheels>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData_VehicleWheels& from);
  void MergeFrom(const HostVehicleData_VehicleWheels& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleWheels* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleWheels";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehicleWheels_WheelData WheelData;

  // accessors -------------------------------------------------------

  enum : int {
    kWheelDataFieldNumber = 1,
  };
  // repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
  int wheel_data_size() const;
  private:
  int _internal_wheel_data_size() const;
  public:
  void clear_wheel_data();
  ::osi3::HostVehicleData_VehicleWheels_WheelData* mutable_wheel_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData >*
      mutable_wheel_data();
  private:
  const ::osi3::HostVehicleData_VehicleWheels_WheelData& _internal_wheel_data(int index) const;
  ::osi3::HostVehicleData_VehicleWheels_WheelData* _internal_add_wheel_data();
  public:
  const ::osi3::HostVehicleData_VehicleWheels_WheelData& wheel_data(int index) const;
  ::osi3::HostVehicleData_VehicleWheels_WheelData* add_wheel_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData >&
      wheel_data() const;

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleWheels)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData > wheel_data_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData_VehicleLocalization :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData.VehicleLocalization) */ {
 public:
  HostVehicleData_VehicleLocalization();
  virtual ~HostVehicleData_VehicleLocalization();

  HostVehicleData_VehicleLocalization(const HostVehicleData_VehicleLocalization& from);
  HostVehicleData_VehicleLocalization(HostVehicleData_VehicleLocalization&& from) noexcept
    : HostVehicleData_VehicleLocalization() {
    *this = ::std::move(from);
  }

  inline HostVehicleData_VehicleLocalization& operator=(const HostVehicleData_VehicleLocalization& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData_VehicleLocalization& operator=(HostVehicleData_VehicleLocalization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData_VehicleLocalization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData_VehicleLocalization* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData_VehicleLocalization*>(
               &_HostVehicleData_VehicleLocalization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(HostVehicleData_VehicleLocalization& a, HostVehicleData_VehicleLocalization& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData_VehicleLocalization* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData_VehicleLocalization* New() const final {
    return CreateMaybeMessage<HostVehicleData_VehicleLocalization>(nullptr);
  }

  HostVehicleData_VehicleLocalization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData_VehicleLocalization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData_VehicleLocalization& from);
  void MergeFrom(const HostVehicleData_VehicleLocalization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData_VehicleLocalization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData.VehicleLocalization";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kGeodeticPositionFieldNumber = 3,
  };
  // optional .osi3.Vector3d position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:

  // optional .osi3.Orientation3d orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:

  // optional .osi3.GeodeticPosition geodetic_position = 3;
  bool has_geodetic_position() const;
  private:
  bool _internal_has_geodetic_position() const;
  public:
  void clear_geodetic_position();
  const ::osi3::GeodeticPosition& geodetic_position() const;
  ::osi3::GeodeticPosition* release_geodetic_position();
  ::osi3::GeodeticPosition* mutable_geodetic_position();
  void set_allocated_geodetic_position(::osi3::GeodeticPosition* geodetic_position);
  private:
  const ::osi3::GeodeticPosition& _internal_geodetic_position() const;
  ::osi3::GeodeticPosition* _internal_mutable_geodetic_position();
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData.VehicleLocalization)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  ::osi3::GeodeticPosition* geodetic_position_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// -------------------------------------------------------------------

class HostVehicleData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData) */ {
 public:
  HostVehicleData();
  virtual ~HostVehicleData();

  HostVehicleData(const HostVehicleData& from);
  HostVehicleData(HostVehicleData&& from) noexcept
    : HostVehicleData() {
    *this = ::std::move(from);
  }

  inline HostVehicleData& operator=(const HostVehicleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData& operator=(HostVehicleData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HostVehicleData* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData*>(
               &_HostVehicleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HostVehicleData& a, HostVehicleData& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData* New() const final {
    return CreateMaybeMessage<HostVehicleData>(nullptr);
  }

  HostVehicleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData& from);
  void MergeFrom(const HostVehicleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fhostvehicledata_2eproto);
    return ::descriptor_table_osi_5fhostvehicledata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef HostVehicleData_VehicleBasics VehicleBasics;
  typedef HostVehicleData_VehiclePowertrain VehiclePowertrain;
  typedef HostVehicleData_VehicleBrakeSystem VehicleBrakeSystem;
  typedef HostVehicleData_VehicleSteering VehicleSteering;
  typedef HostVehicleData_VehicleWheels VehicleWheels;
  typedef HostVehicleData_VehicleLocalization VehicleLocalization;

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kLocationRmseFieldNumber = 2,
    kVehicleBasicsFieldNumber = 3,
    kVehiclePowertrainFieldNumber = 4,
    kVehicleBrakeSystemFieldNumber = 5,
    kVehicleSteeringFieldNumber = 6,
    kVehicleWheelsFieldNumber = 7,
    kVehicleLocalizationFieldNumber = 8,
    kVersionFieldNumber = 9,
    kTimestampFieldNumber = 10,
    kHostVehicleIdFieldNumber = 11,
  };
  // optional .osi3.BaseMoving location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::osi3::BaseMoving& location() const;
  ::osi3::BaseMoving* release_location();
  ::osi3::BaseMoving* mutable_location();
  void set_allocated_location(::osi3::BaseMoving* location);
  private:
  const ::osi3::BaseMoving& _internal_location() const;
  ::osi3::BaseMoving* _internal_mutable_location();
  public:

  // optional .osi3.BaseMoving location_rmse = 2;
  bool has_location_rmse() const;
  private:
  bool _internal_has_location_rmse() const;
  public:
  void clear_location_rmse();
  const ::osi3::BaseMoving& location_rmse() const;
  ::osi3::BaseMoving* release_location_rmse();
  ::osi3::BaseMoving* mutable_location_rmse();
  void set_allocated_location_rmse(::osi3::BaseMoving* location_rmse);
  private:
  const ::osi3::BaseMoving& _internal_location_rmse() const;
  ::osi3::BaseMoving* _internal_mutable_location_rmse();
  public:

  // optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
  bool has_vehicle_basics() const;
  private:
  bool _internal_has_vehicle_basics() const;
  public:
  void clear_vehicle_basics();
  const ::osi3::HostVehicleData_VehicleBasics& vehicle_basics() const;
  ::osi3::HostVehicleData_VehicleBasics* release_vehicle_basics();
  ::osi3::HostVehicleData_VehicleBasics* mutable_vehicle_basics();
  void set_allocated_vehicle_basics(::osi3::HostVehicleData_VehicleBasics* vehicle_basics);
  private:
  const ::osi3::HostVehicleData_VehicleBasics& _internal_vehicle_basics() const;
  ::osi3::HostVehicleData_VehicleBasics* _internal_mutable_vehicle_basics();
  public:

  // optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
  bool has_vehicle_powertrain() const;
  private:
  bool _internal_has_vehicle_powertrain() const;
  public:
  void clear_vehicle_powertrain();
  const ::osi3::HostVehicleData_VehiclePowertrain& vehicle_powertrain() const;
  ::osi3::HostVehicleData_VehiclePowertrain* release_vehicle_powertrain();
  ::osi3::HostVehicleData_VehiclePowertrain* mutable_vehicle_powertrain();
  void set_allocated_vehicle_powertrain(::osi3::HostVehicleData_VehiclePowertrain* vehicle_powertrain);
  private:
  const ::osi3::HostVehicleData_VehiclePowertrain& _internal_vehicle_powertrain() const;
  ::osi3::HostVehicleData_VehiclePowertrain* _internal_mutable_vehicle_powertrain();
  public:

  // optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
  bool has_vehicle_brake_system() const;
  private:
  bool _internal_has_vehicle_brake_system() const;
  public:
  void clear_vehicle_brake_system();
  const ::osi3::HostVehicleData_VehicleBrakeSystem& vehicle_brake_system() const;
  ::osi3::HostVehicleData_VehicleBrakeSystem* release_vehicle_brake_system();
  ::osi3::HostVehicleData_VehicleBrakeSystem* mutable_vehicle_brake_system();
  void set_allocated_vehicle_brake_system(::osi3::HostVehicleData_VehicleBrakeSystem* vehicle_brake_system);
  private:
  const ::osi3::HostVehicleData_VehicleBrakeSystem& _internal_vehicle_brake_system() const;
  ::osi3::HostVehicleData_VehicleBrakeSystem* _internal_mutable_vehicle_brake_system();
  public:

  // optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
  bool has_vehicle_steering() const;
  private:
  bool _internal_has_vehicle_steering() const;
  public:
  void clear_vehicle_steering();
  const ::osi3::HostVehicleData_VehicleSteering& vehicle_steering() const;
  ::osi3::HostVehicleData_VehicleSteering* release_vehicle_steering();
  ::osi3::HostVehicleData_VehicleSteering* mutable_vehicle_steering();
  void set_allocated_vehicle_steering(::osi3::HostVehicleData_VehicleSteering* vehicle_steering);
  private:
  const ::osi3::HostVehicleData_VehicleSteering& _internal_vehicle_steering() const;
  ::osi3::HostVehicleData_VehicleSteering* _internal_mutable_vehicle_steering();
  public:

  // optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
  bool has_vehicle_wheels() const;
  private:
  bool _internal_has_vehicle_wheels() const;
  public:
  void clear_vehicle_wheels();
  const ::osi3::HostVehicleData_VehicleWheels& vehicle_wheels() const;
  ::osi3::HostVehicleData_VehicleWheels* release_vehicle_wheels();
  ::osi3::HostVehicleData_VehicleWheels* mutable_vehicle_wheels();
  void set_allocated_vehicle_wheels(::osi3::HostVehicleData_VehicleWheels* vehicle_wheels);
  private:
  const ::osi3::HostVehicleData_VehicleWheels& _internal_vehicle_wheels() const;
  ::osi3::HostVehicleData_VehicleWheels* _internal_mutable_vehicle_wheels();
  public:

  // optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
  bool has_vehicle_localization() const;
  private:
  bool _internal_has_vehicle_localization() const;
  public:
  void clear_vehicle_localization();
  const ::osi3::HostVehicleData_VehicleLocalization& vehicle_localization() const;
  ::osi3::HostVehicleData_VehicleLocalization* release_vehicle_localization();
  ::osi3::HostVehicleData_VehicleLocalization* mutable_vehicle_localization();
  void set_allocated_vehicle_localization(::osi3::HostVehicleData_VehicleLocalization* vehicle_localization);
  private:
  const ::osi3::HostVehicleData_VehicleLocalization& _internal_vehicle_localization() const;
  ::osi3::HostVehicleData_VehicleLocalization* _internal_mutable_vehicle_localization();
  public:

  // optional .osi3.InterfaceVersion version = 9;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* release_version();
  ::osi3::InterfaceVersion* mutable_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);
  private:
  const ::osi3::InterfaceVersion& _internal_version() const;
  ::osi3::InterfaceVersion* _internal_mutable_version();
  public:

  // optional .osi3.Timestamp timestamp = 10;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);
  private:
  const ::osi3::Timestamp& _internal_timestamp() const;
  ::osi3::Timestamp* _internal_mutable_timestamp();
  public:

  // optional .osi3.Identifier host_vehicle_id = 11;
  bool has_host_vehicle_id() const;
  private:
  bool _internal_has_host_vehicle_id() const;
  public:
  void clear_host_vehicle_id();
  const ::osi3::Identifier& host_vehicle_id() const;
  ::osi3::Identifier* release_host_vehicle_id();
  ::osi3::Identifier* mutable_host_vehicle_id();
  void set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id);
  private:
  const ::osi3::Identifier& _internal_host_vehicle_id() const;
  ::osi3::Identifier* _internal_mutable_host_vehicle_id();
  public:

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::BaseMoving* location_;
  ::osi3::BaseMoving* location_rmse_;
  ::osi3::HostVehicleData_VehicleBasics* vehicle_basics_;
  ::osi3::HostVehicleData_VehiclePowertrain* vehicle_powertrain_;
  ::osi3::HostVehicleData_VehicleBrakeSystem* vehicle_brake_system_;
  ::osi3::HostVehicleData_VehicleSteering* vehicle_steering_;
  ::osi3::HostVehicleData_VehicleWheels* vehicle_wheels_;
  ::osi3::HostVehicleData_VehicleLocalization* vehicle_localization_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::Timestamp* timestamp_;
  ::osi3::Identifier* host_vehicle_id_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostVehicleData_VehicleBasics

// optional double curb_weight = 1;
inline bool HostVehicleData_VehicleBasics::_internal_has_curb_weight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleBasics::has_curb_weight() const {
  return _internal_has_curb_weight();
}
inline void HostVehicleData_VehicleBasics::clear_curb_weight() {
  curb_weight_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double HostVehicleData_VehicleBasics::_internal_curb_weight() const {
  return curb_weight_;
}
inline double HostVehicleData_VehicleBasics::curb_weight() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleBasics.curb_weight)
  return _internal_curb_weight();
}
inline void HostVehicleData_VehicleBasics::_internal_set_curb_weight(double value) {
  _has_bits_[0] |= 0x00000001u;
  curb_weight_ = value;
}
inline void HostVehicleData_VehicleBasics::set_curb_weight(double value) {
  _internal_set_curb_weight(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleBasics.curb_weight)
}

// -------------------------------------------------------------------

// HostVehicleData_VehiclePowertrain_Motor

// optional .osi3.HostVehicleData.VehiclePowertrain.Motor.Type type = 1;
inline bool HostVehicleData_VehiclePowertrain_Motor::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain_Motor::has_type() const {
  return _internal_has_type();
}
inline void HostVehicleData_VehiclePowertrain_Motor::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::_internal_type() const {
  return static_cast< ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type >(type_);
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type HostVehicleData_VehiclePowertrain_Motor::type() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.Motor.type)
  return _internal_type();
}
inline void HostVehicleData_VehiclePowertrain_Motor::_internal_set_type(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type value) {
  assert(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void HostVehicleData_VehiclePowertrain_Motor::set_type(::osi3::HostVehicleData_VehiclePowertrain_Motor_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.Motor.type)
}

// optional double rpm = 2;
inline bool HostVehicleData_VehiclePowertrain_Motor::_internal_has_rpm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain_Motor::has_rpm() const {
  return _internal_has_rpm();
}
inline void HostVehicleData_VehiclePowertrain_Motor::clear_rpm() {
  rpm_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double HostVehicleData_VehiclePowertrain_Motor::_internal_rpm() const {
  return rpm_;
}
inline double HostVehicleData_VehiclePowertrain_Motor::rpm() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.Motor.rpm)
  return _internal_rpm();
}
inline void HostVehicleData_VehiclePowertrain_Motor::_internal_set_rpm(double value) {
  _has_bits_[0] |= 0x00000001u;
  rpm_ = value;
}
inline void HostVehicleData_VehiclePowertrain_Motor::set_rpm(double value) {
  _internal_set_rpm(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.Motor.rpm)
}

// optional double torque = 3;
inline bool HostVehicleData_VehiclePowertrain_Motor::_internal_has_torque() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain_Motor::has_torque() const {
  return _internal_has_torque();
}
inline void HostVehicleData_VehiclePowertrain_Motor::clear_torque() {
  torque_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double HostVehicleData_VehiclePowertrain_Motor::_internal_torque() const {
  return torque_;
}
inline double HostVehicleData_VehiclePowertrain_Motor::torque() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.Motor.torque)
  return _internal_torque();
}
inline void HostVehicleData_VehiclePowertrain_Motor::_internal_set_torque(double value) {
  _has_bits_[0] |= 0x00000002u;
  torque_ = value;
}
inline void HostVehicleData_VehiclePowertrain_Motor::set_torque(double value) {
  _internal_set_torque(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.Motor.torque)
}

// -------------------------------------------------------------------

// HostVehicleData_VehiclePowertrain

// optional double pedal_position_acceleration = 1;
inline bool HostVehicleData_VehiclePowertrain::_internal_has_pedal_position_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain::has_pedal_position_acceleration() const {
  return _internal_has_pedal_position_acceleration();
}
inline void HostVehicleData_VehiclePowertrain::clear_pedal_position_acceleration() {
  pedal_position_acceleration_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double HostVehicleData_VehiclePowertrain::_internal_pedal_position_acceleration() const {
  return pedal_position_acceleration_;
}
inline double HostVehicleData_VehiclePowertrain::pedal_position_acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.pedal_position_acceleration)
  return _internal_pedal_position_acceleration();
}
inline void HostVehicleData_VehiclePowertrain::_internal_set_pedal_position_acceleration(double value) {
  _has_bits_[0] |= 0x00000001u;
  pedal_position_acceleration_ = value;
}
inline void HostVehicleData_VehiclePowertrain::set_pedal_position_acceleration(double value) {
  _internal_set_pedal_position_acceleration(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.pedal_position_acceleration)
}

// optional double pedal_position_clutch = 2;
inline bool HostVehicleData_VehiclePowertrain::_internal_has_pedal_position_clutch() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain::has_pedal_position_clutch() const {
  return _internal_has_pedal_position_clutch();
}
inline void HostVehicleData_VehiclePowertrain::clear_pedal_position_clutch() {
  pedal_position_clutch_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double HostVehicleData_VehiclePowertrain::_internal_pedal_position_clutch() const {
  return pedal_position_clutch_;
}
inline double HostVehicleData_VehiclePowertrain::pedal_position_clutch() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.pedal_position_clutch)
  return _internal_pedal_position_clutch();
}
inline void HostVehicleData_VehiclePowertrain::_internal_set_pedal_position_clutch(double value) {
  _has_bits_[0] |= 0x00000002u;
  pedal_position_clutch_ = value;
}
inline void HostVehicleData_VehiclePowertrain::set_pedal_position_clutch(double value) {
  _internal_set_pedal_position_clutch(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.pedal_position_clutch)
}

// optional int32 gear_transmission = 3;
inline bool HostVehicleData_VehiclePowertrain::_internal_has_gear_transmission() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HostVehicleData_VehiclePowertrain::has_gear_transmission() const {
  return _internal_has_gear_transmission();
}
inline void HostVehicleData_VehiclePowertrain::clear_gear_transmission() {
  gear_transmission_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostVehicleData_VehiclePowertrain::_internal_gear_transmission() const {
  return gear_transmission_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HostVehicleData_VehiclePowertrain::gear_transmission() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.gear_transmission)
  return _internal_gear_transmission();
}
inline void HostVehicleData_VehiclePowertrain::_internal_set_gear_transmission(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  gear_transmission_ = value;
}
inline void HostVehicleData_VehiclePowertrain::set_gear_transmission(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gear_transmission(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehiclePowertrain.gear_transmission)
}

// repeated .osi3.HostVehicleData.VehiclePowertrain.Motor motor = 4;
inline int HostVehicleData_VehiclePowertrain::_internal_motor_size() const {
  return motor_.size();
}
inline int HostVehicleData_VehiclePowertrain::motor_size() const {
  return _internal_motor_size();
}
inline void HostVehicleData_VehiclePowertrain::clear_motor() {
  motor_.Clear();
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor* HostVehicleData_VehiclePowertrain::mutable_motor(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehiclePowertrain.motor)
  return motor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor >*
HostVehicleData_VehiclePowertrain::mutable_motor() {
  // @@protoc_insertion_point(field_mutable_list:osi3.HostVehicleData.VehiclePowertrain.motor)
  return &motor_;
}
inline const ::osi3::HostVehicleData_VehiclePowertrain_Motor& HostVehicleData_VehiclePowertrain::_internal_motor(int index) const {
  return motor_.Get(index);
}
inline const ::osi3::HostVehicleData_VehiclePowertrain_Motor& HostVehicleData_VehiclePowertrain::motor(int index) const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehiclePowertrain.motor)
  return _internal_motor(index);
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor* HostVehicleData_VehiclePowertrain::_internal_add_motor() {
  return motor_.Add();
}
inline ::osi3::HostVehicleData_VehiclePowertrain_Motor* HostVehicleData_VehiclePowertrain::add_motor() {
  // @@protoc_insertion_point(field_add:osi3.HostVehicleData.VehiclePowertrain.motor)
  return _internal_add_motor();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehiclePowertrain_Motor >&
HostVehicleData_VehiclePowertrain::motor() const {
  // @@protoc_insertion_point(field_list:osi3.HostVehicleData.VehiclePowertrain.motor)
  return motor_;
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleBrakeSystem

// optional double pedal_position_brake = 1;
inline bool HostVehicleData_VehicleBrakeSystem::_internal_has_pedal_position_brake() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleBrakeSystem::has_pedal_position_brake() const {
  return _internal_has_pedal_position_brake();
}
inline void HostVehicleData_VehicleBrakeSystem::clear_pedal_position_brake() {
  pedal_position_brake_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double HostVehicleData_VehicleBrakeSystem::_internal_pedal_position_brake() const {
  return pedal_position_brake_;
}
inline double HostVehicleData_VehicleBrakeSystem::pedal_position_brake() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleBrakeSystem.pedal_position_brake)
  return _internal_pedal_position_brake();
}
inline void HostVehicleData_VehicleBrakeSystem::_internal_set_pedal_position_brake(double value) {
  _has_bits_[0] |= 0x00000001u;
  pedal_position_brake_ = value;
}
inline void HostVehicleData_VehicleBrakeSystem::set_pedal_position_brake(double value) {
  _internal_set_pedal_position_brake(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleBrakeSystem.pedal_position_brake)
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleSteering

// optional .osi3.VehicleSteeringWheel vehicle_steering_wheel = 1;
inline bool HostVehicleData_VehicleSteering::_internal_has_vehicle_steering_wheel() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_steering_wheel_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleSteering::has_vehicle_steering_wheel() const {
  return _internal_has_vehicle_steering_wheel();
}
inline const ::osi3::VehicleSteeringWheel& HostVehicleData_VehicleSteering::_internal_vehicle_steering_wheel() const {
  const ::osi3::VehicleSteeringWheel* p = vehicle_steering_wheel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::VehicleSteeringWheel*>(
      &::osi3::_VehicleSteeringWheel_default_instance_);
}
inline const ::osi3::VehicleSteeringWheel& HostVehicleData_VehicleSteering::vehicle_steering_wheel() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
  return _internal_vehicle_steering_wheel();
}
inline ::osi3::VehicleSteeringWheel* HostVehicleData_VehicleSteering::release_vehicle_steering_wheel() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::VehicleSteeringWheel* temp = vehicle_steering_wheel_;
  vehicle_steering_wheel_ = nullptr;
  return temp;
}
inline ::osi3::VehicleSteeringWheel* HostVehicleData_VehicleSteering::_internal_mutable_vehicle_steering_wheel() {
  _has_bits_[0] |= 0x00000001u;
  if (vehicle_steering_wheel_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::VehicleSteeringWheel>(GetArenaNoVirtual());
    vehicle_steering_wheel_ = p;
  }
  return vehicle_steering_wheel_;
}
inline ::osi3::VehicleSteeringWheel* HostVehicleData_VehicleSteering::mutable_vehicle_steering_wheel() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
  return _internal_mutable_vehicle_steering_wheel();
}
inline void HostVehicleData_VehicleSteering::set_allocated_vehicle_steering_wheel(::osi3::VehicleSteeringWheel* vehicle_steering_wheel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehicle_steering_wheel_);
  }
  if (vehicle_steering_wheel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_steering_wheel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_steering_wheel, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  vehicle_steering_wheel_ = vehicle_steering_wheel;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleSteering.vehicle_steering_wheel)
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleWheels_WheelData

// optional uint32 axle = 1;
inline bool HostVehicleData_VehicleWheels_WheelData::_internal_has_axle() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleWheels_WheelData::has_axle() const {
  return _internal_has_axle();
}
inline void HostVehicleData_VehicleWheels_WheelData::clear_axle() {
  axle_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostVehicleData_VehicleWheels_WheelData::_internal_axle() const {
  return axle_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostVehicleData_VehicleWheels_WheelData::axle() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.WheelData.axle)
  return _internal_axle();
}
inline void HostVehicleData_VehicleWheels_WheelData::_internal_set_axle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  axle_ = value;
}
inline void HostVehicleData_VehicleWheels_WheelData::set_axle(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_axle(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleWheels.WheelData.axle)
}

// optional uint32 index = 2;
inline bool HostVehicleData_VehicleWheels_WheelData::_internal_has_index() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleWheels_WheelData::has_index() const {
  return _internal_has_index();
}
inline void HostVehicleData_VehicleWheels_WheelData::clear_index() {
  index_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostVehicleData_VehicleWheels_WheelData::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HostVehicleData_VehicleWheels_WheelData::index() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.WheelData.index)
  return _internal_index();
}
inline void HostVehicleData_VehicleWheels_WheelData::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  index_ = value;
}
inline void HostVehicleData_VehicleWheels_WheelData::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleWheels.WheelData.index)
}

// optional double rotation_rate = 3;
inline bool HostVehicleData_VehicleWheels_WheelData::_internal_has_rotation_rate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleWheels_WheelData::has_rotation_rate() const {
  return _internal_has_rotation_rate();
}
inline void HostVehicleData_VehicleWheels_WheelData::clear_rotation_rate() {
  rotation_rate_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double HostVehicleData_VehicleWheels_WheelData::_internal_rotation_rate() const {
  return rotation_rate_;
}
inline double HostVehicleData_VehicleWheels_WheelData::rotation_rate() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.WheelData.rotation_rate)
  return _internal_rotation_rate();
}
inline void HostVehicleData_VehicleWheels_WheelData::_internal_set_rotation_rate(double value) {
  _has_bits_[0] |= 0x00000004u;
  rotation_rate_ = value;
}
inline void HostVehicleData_VehicleWheels_WheelData::set_rotation_rate(double value) {
  _internal_set_rotation_rate(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleWheels.WheelData.rotation_rate)
}

// optional double slip = 4;
inline bool HostVehicleData_VehicleWheels_WheelData::_internal_has_slip() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool HostVehicleData_VehicleWheels_WheelData::has_slip() const {
  return _internal_has_slip();
}
inline void HostVehicleData_VehicleWheels_WheelData::clear_slip() {
  slip_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double HostVehicleData_VehicleWheels_WheelData::_internal_slip() const {
  return slip_;
}
inline double HostVehicleData_VehicleWheels_WheelData::slip() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.WheelData.slip)
  return _internal_slip();
}
inline void HostVehicleData_VehicleWheels_WheelData::_internal_set_slip(double value) {
  _has_bits_[0] |= 0x00000008u;
  slip_ = value;
}
inline void HostVehicleData_VehicleWheels_WheelData::set_slip(double value) {
  _internal_set_slip(value);
  // @@protoc_insertion_point(field_set:osi3.HostVehicleData.VehicleWheels.WheelData.slip)
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleWheels

// repeated .osi3.HostVehicleData.VehicleWheels.WheelData wheel_data = 1;
inline int HostVehicleData_VehicleWheels::_internal_wheel_data_size() const {
  return wheel_data_.size();
}
inline int HostVehicleData_VehicleWheels::wheel_data_size() const {
  return _internal_wheel_data_size();
}
inline void HostVehicleData_VehicleWheels::clear_wheel_data() {
  wheel_data_.Clear();
}
inline ::osi3::HostVehicleData_VehicleWheels_WheelData* HostVehicleData_VehicleWheels::mutable_wheel_data(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return wheel_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData >*
HostVehicleData_VehicleWheels::mutable_wheel_data() {
  // @@protoc_insertion_point(field_mutable_list:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return &wheel_data_;
}
inline const ::osi3::HostVehicleData_VehicleWheels_WheelData& HostVehicleData_VehicleWheels::_internal_wheel_data(int index) const {
  return wheel_data_.Get(index);
}
inline const ::osi3::HostVehicleData_VehicleWheels_WheelData& HostVehicleData_VehicleWheels::wheel_data(int index) const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return _internal_wheel_data(index);
}
inline ::osi3::HostVehicleData_VehicleWheels_WheelData* HostVehicleData_VehicleWheels::_internal_add_wheel_data() {
  return wheel_data_.Add();
}
inline ::osi3::HostVehicleData_VehicleWheels_WheelData* HostVehicleData_VehicleWheels::add_wheel_data() {
  // @@protoc_insertion_point(field_add:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return _internal_add_wheel_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::HostVehicleData_VehicleWheels_WheelData >&
HostVehicleData_VehicleWheels::wheel_data() const {
  // @@protoc_insertion_point(field_list:osi3.HostVehicleData.VehicleWheels.wheel_data)
  return wheel_data_;
}

// -------------------------------------------------------------------

// HostVehicleData_VehicleLocalization

// optional .osi3.Vector3d position = 1;
inline bool HostVehicleData_VehicleLocalization::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleLocalization::has_position() const {
  return _internal_has_position();
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleLocalization::_internal_position() const {
  const ::osi3::Vector3d* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& HostVehicleData_VehicleLocalization::position() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleLocalization.position)
  return _internal_position();
}
inline ::osi3::Vector3d* HostVehicleData_VehicleLocalization::release_position() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleLocalization.position)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleLocalization::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000001u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::osi3::Vector3d* HostVehicleData_VehicleLocalization::mutable_position() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleLocalization.position)
  return _internal_mutable_position();
}
inline void HostVehicleData_VehicleLocalization::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleLocalization.position)
}

// optional .osi3.Orientation3d orientation = 2;
inline bool HostVehicleData_VehicleLocalization::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleLocalization::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::osi3::Orientation3d& HostVehicleData_VehicleLocalization::_internal_orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Orientation3d*>(
      &::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& HostVehicleData_VehicleLocalization::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleLocalization.orientation)
  return _internal_orientation();
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleLocalization::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleLocalization.orientation)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleLocalization::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000002u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::osi3::Orientation3d* HostVehicleData_VehicleLocalization::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleLocalization.orientation)
  return _internal_mutable_orientation();
}
inline void HostVehicleData_VehicleLocalization::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleLocalization.orientation)
}

// optional .osi3.GeodeticPosition geodetic_position = 3;
inline bool HostVehicleData_VehicleLocalization::_internal_has_geodetic_position() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || geodetic_position_ != nullptr);
  return value;
}
inline bool HostVehicleData_VehicleLocalization::has_geodetic_position() const {
  return _internal_has_geodetic_position();
}
inline const ::osi3::GeodeticPosition& HostVehicleData_VehicleLocalization::_internal_geodetic_position() const {
  const ::osi3::GeodeticPosition* p = geodetic_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::GeodeticPosition*>(
      &::osi3::_GeodeticPosition_default_instance_);
}
inline const ::osi3::GeodeticPosition& HostVehicleData_VehicleLocalization::geodetic_position() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
  return _internal_geodetic_position();
}
inline ::osi3::GeodeticPosition* HostVehicleData_VehicleLocalization::release_geodetic_position() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::GeodeticPosition* temp = geodetic_position_;
  geodetic_position_ = nullptr;
  return temp;
}
inline ::osi3::GeodeticPosition* HostVehicleData_VehicleLocalization::_internal_mutable_geodetic_position() {
  _has_bits_[0] |= 0x00000004u;
  if (geodetic_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::GeodeticPosition>(GetArenaNoVirtual());
    geodetic_position_ = p;
  }
  return geodetic_position_;
}
inline ::osi3::GeodeticPosition* HostVehicleData_VehicleLocalization::mutable_geodetic_position() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
  return _internal_mutable_geodetic_position();
}
inline void HostVehicleData_VehicleLocalization::set_allocated_geodetic_position(::osi3::GeodeticPosition* geodetic_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(geodetic_position_);
  }
  if (geodetic_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      geodetic_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geodetic_position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  geodetic_position_ = geodetic_position;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.VehicleLocalization.geodetic_position)
}

// -------------------------------------------------------------------

// HostVehicleData

// optional .osi3.InterfaceVersion version = 9;
inline bool HostVehicleData::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || version_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_version() const {
  return _internal_has_version();
}
inline const ::osi3::InterfaceVersion& HostVehicleData::_internal_version() const {
  const ::osi3::InterfaceVersion* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::InterfaceVersion*>(
      &::osi3::_InterfaceVersion_default_instance_);
}
inline const ::osi3::InterfaceVersion& HostVehicleData::version() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.version)
  return _internal_version();
}
inline ::osi3::InterfaceVersion* HostVehicleData::release_version() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.version)
  _has_bits_[0] &= ~0x00000100u;
  ::osi3::InterfaceVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::osi3::InterfaceVersion* HostVehicleData::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000100u;
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::InterfaceVersion>(GetArenaNoVirtual());
    version_ = p;
  }
  return version_;
}
inline ::osi3::InterfaceVersion* HostVehicleData::mutable_version() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.version)
  return _internal_mutable_version();
}
inline void HostVehicleData::set_allocated_version(::osi3::InterfaceVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.version)
}

// optional .osi3.Timestamp timestamp = 10;
inline bool HostVehicleData::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::osi3::Timestamp& HostVehicleData::_internal_timestamp() const {
  const ::osi3::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Timestamp*>(
      &::osi3::_Timestamp_default_instance_);
}
inline const ::osi3::Timestamp& HostVehicleData::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.timestamp)
  return _internal_timestamp();
}
inline ::osi3::Timestamp* HostVehicleData::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.timestamp)
  _has_bits_[0] &= ~0x00000200u;
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* HostVehicleData::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000200u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::osi3::Timestamp* HostVehicleData::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.timestamp)
  return _internal_mutable_timestamp();
}
inline void HostVehicleData::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.timestamp)
}

// optional .osi3.Identifier host_vehicle_id = 11;
inline bool HostVehicleData::_internal_has_host_vehicle_id() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || host_vehicle_id_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_host_vehicle_id() const {
  return _internal_has_host_vehicle_id();
}
inline const ::osi3::Identifier& HostVehicleData::_internal_host_vehicle_id() const {
  const ::osi3::Identifier* p = host_vehicle_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& HostVehicleData::host_vehicle_id() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.host_vehicle_id)
  return _internal_host_vehicle_id();
}
inline ::osi3::Identifier* HostVehicleData::release_host_vehicle_id() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.host_vehicle_id)
  _has_bits_[0] &= ~0x00000400u;
  ::osi3::Identifier* temp = host_vehicle_id_;
  host_vehicle_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* HostVehicleData::_internal_mutable_host_vehicle_id() {
  _has_bits_[0] |= 0x00000400u;
  if (host_vehicle_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    host_vehicle_id_ = p;
  }
  return host_vehicle_id_;
}
inline ::osi3::Identifier* HostVehicleData::mutable_host_vehicle_id() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.host_vehicle_id)
  return _internal_mutable_host_vehicle_id();
}
inline void HostVehicleData::set_allocated_host_vehicle_id(::osi3::Identifier* host_vehicle_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_vehicle_id_);
  }
  if (host_vehicle_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      host_vehicle_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host_vehicle_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  host_vehicle_id_ = host_vehicle_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.host_vehicle_id)
}

// optional .osi3.BaseMoving location = 1;
inline bool HostVehicleData::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || location_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_location() const {
  return _internal_has_location();
}
inline const ::osi3::BaseMoving& HostVehicleData::_internal_location() const {
  const ::osi3::BaseMoving* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseMoving*>(
      &::osi3::_BaseMoving_default_instance_);
}
inline const ::osi3::BaseMoving& HostVehicleData::location() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location)
  return _internal_location();
}
inline ::osi3::BaseMoving* HostVehicleData::release_location() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::BaseMoving* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000001u;
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseMoving>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::osi3::BaseMoving* HostVehicleData::mutable_location() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location)
  return _internal_mutable_location();
}
inline void HostVehicleData::set_allocated_location(::osi3::BaseMoving* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location)
}

// optional .osi3.BaseMoving location_rmse = 2;
inline bool HostVehicleData::_internal_has_location_rmse() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || location_rmse_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_location_rmse() const {
  return _internal_has_location_rmse();
}
inline const ::osi3::BaseMoving& HostVehicleData::_internal_location_rmse() const {
  const ::osi3::BaseMoving* p = location_rmse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::BaseMoving*>(
      &::osi3::_BaseMoving_default_instance_);
}
inline const ::osi3::BaseMoving& HostVehicleData::location_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location_rmse)
  return _internal_location_rmse();
}
inline ::osi3::BaseMoving* HostVehicleData::release_location_rmse() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location_rmse)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::BaseMoving* temp = location_rmse_;
  location_rmse_ = nullptr;
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::_internal_mutable_location_rmse() {
  _has_bits_[0] |= 0x00000002u;
  if (location_rmse_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseMoving>(GetArenaNoVirtual());
    location_rmse_ = p;
  }
  return location_rmse_;
}
inline ::osi3::BaseMoving* HostVehicleData::mutable_location_rmse() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location_rmse)
  return _internal_mutable_location_rmse();
}
inline void HostVehicleData::set_allocated_location_rmse(::osi3::BaseMoving* location_rmse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_rmse_);
  }
  if (location_rmse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location_rmse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_rmse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_rmse_ = location_rmse;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location_rmse)
}

// optional .osi3.HostVehicleData.VehicleBasics vehicle_basics = 3;
inline bool HostVehicleData::_internal_has_vehicle_basics() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_basics_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_basics() const {
  return _internal_has_vehicle_basics();
}
inline void HostVehicleData::clear_vehicle_basics() {
  if (vehicle_basics_ != nullptr) vehicle_basics_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::osi3::HostVehicleData_VehicleBasics& HostVehicleData::_internal_vehicle_basics() const {
  const ::osi3::HostVehicleData_VehicleBasics* p = vehicle_basics_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::HostVehicleData_VehicleBasics*>(
      &::osi3::_HostVehicleData_VehicleBasics_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleBasics& HostVehicleData::vehicle_basics() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_basics)
  return _internal_vehicle_basics();
}
inline ::osi3::HostVehicleData_VehicleBasics* HostVehicleData::release_vehicle_basics() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_basics)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::HostVehicleData_VehicleBasics* temp = vehicle_basics_;
  vehicle_basics_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleBasics* HostVehicleData::_internal_mutable_vehicle_basics() {
  _has_bits_[0] |= 0x00000004u;
  if (vehicle_basics_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleBasics>(GetArenaNoVirtual());
    vehicle_basics_ = p;
  }
  return vehicle_basics_;
}
inline ::osi3::HostVehicleData_VehicleBasics* HostVehicleData::mutable_vehicle_basics() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_basics)
  return _internal_mutable_vehicle_basics();
}
inline void HostVehicleData::set_allocated_vehicle_basics(::osi3::HostVehicleData_VehicleBasics* vehicle_basics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_basics_;
  }
  if (vehicle_basics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_basics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_basics, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vehicle_basics_ = vehicle_basics;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_basics)
}

// optional .osi3.HostVehicleData.VehiclePowertrain vehicle_powertrain = 4;
inline bool HostVehicleData::_internal_has_vehicle_powertrain() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_powertrain_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_powertrain() const {
  return _internal_has_vehicle_powertrain();
}
inline void HostVehicleData::clear_vehicle_powertrain() {
  if (vehicle_powertrain_ != nullptr) vehicle_powertrain_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::osi3::HostVehicleData_VehiclePowertrain& HostVehicleData::_internal_vehicle_powertrain() const {
  const ::osi3::HostVehicleData_VehiclePowertrain* p = vehicle_powertrain_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::HostVehicleData_VehiclePowertrain*>(
      &::osi3::_HostVehicleData_VehiclePowertrain_default_instance_);
}
inline const ::osi3::HostVehicleData_VehiclePowertrain& HostVehicleData::vehicle_powertrain() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_powertrain)
  return _internal_vehicle_powertrain();
}
inline ::osi3::HostVehicleData_VehiclePowertrain* HostVehicleData::release_vehicle_powertrain() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_powertrain)
  _has_bits_[0] &= ~0x00000008u;
  ::osi3::HostVehicleData_VehiclePowertrain* temp = vehicle_powertrain_;
  vehicle_powertrain_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehiclePowertrain* HostVehicleData::_internal_mutable_vehicle_powertrain() {
  _has_bits_[0] |= 0x00000008u;
  if (vehicle_powertrain_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehiclePowertrain>(GetArenaNoVirtual());
    vehicle_powertrain_ = p;
  }
  return vehicle_powertrain_;
}
inline ::osi3::HostVehicleData_VehiclePowertrain* HostVehicleData::mutable_vehicle_powertrain() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_powertrain)
  return _internal_mutable_vehicle_powertrain();
}
inline void HostVehicleData::set_allocated_vehicle_powertrain(::osi3::HostVehicleData_VehiclePowertrain* vehicle_powertrain) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_powertrain_;
  }
  if (vehicle_powertrain) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_powertrain = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_powertrain, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  vehicle_powertrain_ = vehicle_powertrain;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_powertrain)
}

// optional .osi3.HostVehicleData.VehicleBrakeSystem vehicle_brake_system = 5;
inline bool HostVehicleData::_internal_has_vehicle_brake_system() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_brake_system_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_brake_system() const {
  return _internal_has_vehicle_brake_system();
}
inline void HostVehicleData::clear_vehicle_brake_system() {
  if (vehicle_brake_system_ != nullptr) vehicle_brake_system_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::osi3::HostVehicleData_VehicleBrakeSystem& HostVehicleData::_internal_vehicle_brake_system() const {
  const ::osi3::HostVehicleData_VehicleBrakeSystem* p = vehicle_brake_system_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::HostVehicleData_VehicleBrakeSystem*>(
      &::osi3::_HostVehicleData_VehicleBrakeSystem_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleBrakeSystem& HostVehicleData::vehicle_brake_system() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_brake_system)
  return _internal_vehicle_brake_system();
}
inline ::osi3::HostVehicleData_VehicleBrakeSystem* HostVehicleData::release_vehicle_brake_system() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_brake_system)
  _has_bits_[0] &= ~0x00000010u;
  ::osi3::HostVehicleData_VehicleBrakeSystem* temp = vehicle_brake_system_;
  vehicle_brake_system_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleBrakeSystem* HostVehicleData::_internal_mutable_vehicle_brake_system() {
  _has_bits_[0] |= 0x00000010u;
  if (vehicle_brake_system_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleBrakeSystem>(GetArenaNoVirtual());
    vehicle_brake_system_ = p;
  }
  return vehicle_brake_system_;
}
inline ::osi3::HostVehicleData_VehicleBrakeSystem* HostVehicleData::mutable_vehicle_brake_system() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_brake_system)
  return _internal_mutable_vehicle_brake_system();
}
inline void HostVehicleData::set_allocated_vehicle_brake_system(::osi3::HostVehicleData_VehicleBrakeSystem* vehicle_brake_system) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_brake_system_;
  }
  if (vehicle_brake_system) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_brake_system = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_brake_system, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  vehicle_brake_system_ = vehicle_brake_system;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_brake_system)
}

// optional .osi3.HostVehicleData.VehicleSteering vehicle_steering = 6;
inline bool HostVehicleData::_internal_has_vehicle_steering() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_steering_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_steering() const {
  return _internal_has_vehicle_steering();
}
inline void HostVehicleData::clear_vehicle_steering() {
  if (vehicle_steering_ != nullptr) vehicle_steering_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::osi3::HostVehicleData_VehicleSteering& HostVehicleData::_internal_vehicle_steering() const {
  const ::osi3::HostVehicleData_VehicleSteering* p = vehicle_steering_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::HostVehicleData_VehicleSteering*>(
      &::osi3::_HostVehicleData_VehicleSteering_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleSteering& HostVehicleData::vehicle_steering() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_steering)
  return _internal_vehicle_steering();
}
inline ::osi3::HostVehicleData_VehicleSteering* HostVehicleData::release_vehicle_steering() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_steering)
  _has_bits_[0] &= ~0x00000020u;
  ::osi3::HostVehicleData_VehicleSteering* temp = vehicle_steering_;
  vehicle_steering_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleSteering* HostVehicleData::_internal_mutable_vehicle_steering() {
  _has_bits_[0] |= 0x00000020u;
  if (vehicle_steering_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleSteering>(GetArenaNoVirtual());
    vehicle_steering_ = p;
  }
  return vehicle_steering_;
}
inline ::osi3::HostVehicleData_VehicleSteering* HostVehicleData::mutable_vehicle_steering() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_steering)
  return _internal_mutable_vehicle_steering();
}
inline void HostVehicleData::set_allocated_vehicle_steering(::osi3::HostVehicleData_VehicleSteering* vehicle_steering) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_steering_;
  }
  if (vehicle_steering) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_steering = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_steering, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  vehicle_steering_ = vehicle_steering;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_steering)
}

// optional .osi3.HostVehicleData.VehicleWheels vehicle_wheels = 7;
inline bool HostVehicleData::_internal_has_vehicle_wheels() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_wheels_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_wheels() const {
  return _internal_has_vehicle_wheels();
}
inline void HostVehicleData::clear_vehicle_wheels() {
  if (vehicle_wheels_ != nullptr) vehicle_wheels_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::osi3::HostVehicleData_VehicleWheels& HostVehicleData::_internal_vehicle_wheels() const {
  const ::osi3::HostVehicleData_VehicleWheels* p = vehicle_wheels_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::HostVehicleData_VehicleWheels*>(
      &::osi3::_HostVehicleData_VehicleWheels_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleWheels& HostVehicleData::vehicle_wheels() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_wheels)
  return _internal_vehicle_wheels();
}
inline ::osi3::HostVehicleData_VehicleWheels* HostVehicleData::release_vehicle_wheels() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_wheels)
  _has_bits_[0] &= ~0x00000040u;
  ::osi3::HostVehicleData_VehicleWheels* temp = vehicle_wheels_;
  vehicle_wheels_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleWheels* HostVehicleData::_internal_mutable_vehicle_wheels() {
  _has_bits_[0] |= 0x00000040u;
  if (vehicle_wheels_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleWheels>(GetArenaNoVirtual());
    vehicle_wheels_ = p;
  }
  return vehicle_wheels_;
}
inline ::osi3::HostVehicleData_VehicleWheels* HostVehicleData::mutable_vehicle_wheels() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_wheels)
  return _internal_mutable_vehicle_wheels();
}
inline void HostVehicleData::set_allocated_vehicle_wheels(::osi3::HostVehicleData_VehicleWheels* vehicle_wheels) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_wheels_;
  }
  if (vehicle_wheels) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_wheels = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_wheels, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  vehicle_wheels_ = vehicle_wheels;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_wheels)
}

// optional .osi3.HostVehicleData.VehicleLocalization vehicle_localization = 8;
inline bool HostVehicleData::_internal_has_vehicle_localization() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || vehicle_localization_ != nullptr);
  return value;
}
inline bool HostVehicleData::has_vehicle_localization() const {
  return _internal_has_vehicle_localization();
}
inline void HostVehicleData::clear_vehicle_localization() {
  if (vehicle_localization_ != nullptr) vehicle_localization_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::osi3::HostVehicleData_VehicleLocalization& HostVehicleData::_internal_vehicle_localization() const {
  const ::osi3::HostVehicleData_VehicleLocalization* p = vehicle_localization_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::HostVehicleData_VehicleLocalization*>(
      &::osi3::_HostVehicleData_VehicleLocalization_default_instance_);
}
inline const ::osi3::HostVehicleData_VehicleLocalization& HostVehicleData::vehicle_localization() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.vehicle_localization)
  return _internal_vehicle_localization();
}
inline ::osi3::HostVehicleData_VehicleLocalization* HostVehicleData::release_vehicle_localization() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.vehicle_localization)
  _has_bits_[0] &= ~0x00000080u;
  ::osi3::HostVehicleData_VehicleLocalization* temp = vehicle_localization_;
  vehicle_localization_ = nullptr;
  return temp;
}
inline ::osi3::HostVehicleData_VehicleLocalization* HostVehicleData::_internal_mutable_vehicle_localization() {
  _has_bits_[0] |= 0x00000080u;
  if (vehicle_localization_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::HostVehicleData_VehicleLocalization>(GetArenaNoVirtual());
    vehicle_localization_ = p;
  }
  return vehicle_localization_;
}
inline ::osi3::HostVehicleData_VehicleLocalization* HostVehicleData::mutable_vehicle_localization() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.vehicle_localization)
  return _internal_mutable_vehicle_localization();
}
inline void HostVehicleData::set_allocated_vehicle_localization(::osi3::HostVehicleData_VehicleLocalization* vehicle_localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vehicle_localization_;
  }
  if (vehicle_localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vehicle_localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehicle_localization, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  vehicle_localization_ = vehicle_localization;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.vehicle_localization)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type>() {
  return ::osi3::HostVehicleData_VehiclePowertrain_Motor_Type_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto

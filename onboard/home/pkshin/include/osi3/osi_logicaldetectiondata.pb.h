// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_logicaldetectiondata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5flogicaldetectiondata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5flogicaldetectiondata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5flogicaldetectiondata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5flogicaldetectiondata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5flogicaldetectiondata_2eproto;
namespace osi3 {
class LogicalDetection;
class LogicalDetectionDefaultTypeInternal;
extern LogicalDetectionDefaultTypeInternal _LogicalDetection_default_instance_;
class LogicalDetectionData;
class LogicalDetectionDataDefaultTypeInternal;
extern LogicalDetectionDataDefaultTypeInternal _LogicalDetectionData_default_instance_;
class LogicalDetectionDataHeader;
class LogicalDetectionDataHeaderDefaultTypeInternal;
extern LogicalDetectionDataHeaderDefaultTypeInternal _LogicalDetectionDataHeader_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::LogicalDetection* Arena::CreateMaybeMessage<::osi3::LogicalDetection>(Arena*);
template<> ::osi3::LogicalDetectionData* Arena::CreateMaybeMessage<::osi3::LogicalDetectionData>(Arena*);
template<> ::osi3::LogicalDetectionDataHeader* Arena::CreateMaybeMessage<::osi3::LogicalDetectionDataHeader>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum LogicalDetectionDataHeader_DataQualifier : int {
  LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN = 0,
  LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_OTHER = 1,
  LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE = 2,
  LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE_REDUCED = 3,
  LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_NOT_AVAILABLE = 4,
  LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_BLINDNESS = 5,
  LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_TEMPORARY_AVAILABLE = 6,
  LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_INVALID = 7
};
bool LogicalDetectionDataHeader_DataQualifier_IsValid(int value);
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader_DataQualifier_DataQualifier_MIN = LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN;
constexpr LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader_DataQualifier_DataQualifier_MAX = LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_INVALID;
constexpr int LogicalDetectionDataHeader_DataQualifier_DataQualifier_ARRAYSIZE = LogicalDetectionDataHeader_DataQualifier_DataQualifier_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalDetectionDataHeader_DataQualifier_descriptor();
template<typename T>
inline const std::string& LogicalDetectionDataHeader_DataQualifier_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalDetectionDataHeader_DataQualifier>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalDetectionDataHeader_DataQualifier_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicalDetectionDataHeader_DataQualifier_descriptor(), enum_t_value);
}
inline bool LogicalDetectionDataHeader_DataQualifier_Parse(
    const std::string& name, LogicalDetectionDataHeader_DataQualifier* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicalDetectionDataHeader_DataQualifier>(
    LogicalDetectionDataHeader_DataQualifier_descriptor(), name, value);
}
enum LogicalDetectionClassification : int {
  LOGICAL_DETECTION_CLASSIFICATION_UNKNOWN = 0,
  LOGICAL_DETECTION_CLASSIFICATION_OTHER = 1,
  LOGICAL_DETECTION_CLASSIFICATION_INVALID = 2,
  LOGICAL_DETECTION_CLASSIFICATION_CLUTTER = 3,
  LOGICAL_DETECTION_CLASSIFICATION_OVERDRIVABLE = 4,
  LOGICAL_DETECTION_CLASSIFICATION_UNDERDRIVABLE = 5
};
bool LogicalDetectionClassification_IsValid(int value);
constexpr LogicalDetectionClassification LogicalDetectionClassification_MIN = LOGICAL_DETECTION_CLASSIFICATION_UNKNOWN;
constexpr LogicalDetectionClassification LogicalDetectionClassification_MAX = LOGICAL_DETECTION_CLASSIFICATION_UNDERDRIVABLE;
constexpr int LogicalDetectionClassification_ARRAYSIZE = LogicalDetectionClassification_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalDetectionClassification_descriptor();
template<typename T>
inline const std::string& LogicalDetectionClassification_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalDetectionClassification>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalDetectionClassification_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicalDetectionClassification_descriptor(), enum_t_value);
}
inline bool LogicalDetectionClassification_Parse(
    const std::string& name, LogicalDetectionClassification* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicalDetectionClassification>(
    LogicalDetectionClassification_descriptor(), name, value);
}
// ===================================================================

class LogicalDetectionData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalDetectionData) */ {
 public:
  LogicalDetectionData();
  virtual ~LogicalDetectionData();

  LogicalDetectionData(const LogicalDetectionData& from);
  LogicalDetectionData(LogicalDetectionData&& from) noexcept
    : LogicalDetectionData() {
    *this = ::std::move(from);
  }

  inline LogicalDetectionData& operator=(const LogicalDetectionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalDetectionData& operator=(LogicalDetectionData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalDetectionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalDetectionData* internal_default_instance() {
    return reinterpret_cast<const LogicalDetectionData*>(
               &_LogicalDetectionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogicalDetectionData& a, LogicalDetectionData& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalDetectionData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalDetectionData* New() const final {
    return CreateMaybeMessage<LogicalDetectionData>(nullptr);
  }

  LogicalDetectionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalDetectionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalDetectionData& from);
  void MergeFrom(const LogicalDetectionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalDetectionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalDetectionData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicaldetectiondata_2eproto);
    return ::descriptor_table_osi_5flogicaldetectiondata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalDetectionFieldNumber = 3,
    kVersionFieldNumber = 1,
    kHeaderFieldNumber = 2,
  };
  // repeated .osi3.LogicalDetection logical_detection = 3;
  int logical_detection_size() const;
  private:
  int _internal_logical_detection_size() const;
  public:
  void clear_logical_detection();
  ::osi3::LogicalDetection* mutable_logical_detection(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalDetection >*
      mutable_logical_detection();
  private:
  const ::osi3::LogicalDetection& _internal_logical_detection(int index) const;
  ::osi3::LogicalDetection* _internal_add_logical_detection();
  public:
  const ::osi3::LogicalDetection& logical_detection(int index) const;
  ::osi3::LogicalDetection* add_logical_detection();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalDetection >&
      logical_detection() const;

  // optional .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* release_version();
  ::osi3::InterfaceVersion* mutable_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);
  private:
  const ::osi3::InterfaceVersion& _internal_version() const;
  ::osi3::InterfaceVersion* _internal_mutable_version();
  public:

  // optional .osi3.LogicalDetectionDataHeader header = 2;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::osi3::LogicalDetectionDataHeader& header() const;
  ::osi3::LogicalDetectionDataHeader* release_header();
  ::osi3::LogicalDetectionDataHeader* mutable_header();
  void set_allocated_header(::osi3::LogicalDetectionDataHeader* header);
  private:
  const ::osi3::LogicalDetectionDataHeader& _internal_header() const;
  ::osi3::LogicalDetectionDataHeader* _internal_mutable_header();
  public:

  // @@protoc_insertion_point(class_scope:osi3.LogicalDetectionData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalDetection > logical_detection_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::LogicalDetectionDataHeader* header_;
  friend struct ::TableStruct_osi_5flogicaldetectiondata_2eproto;
};
// -------------------------------------------------------------------

class LogicalDetectionDataHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalDetectionDataHeader) */ {
 public:
  LogicalDetectionDataHeader();
  virtual ~LogicalDetectionDataHeader();

  LogicalDetectionDataHeader(const LogicalDetectionDataHeader& from);
  LogicalDetectionDataHeader(LogicalDetectionDataHeader&& from) noexcept
    : LogicalDetectionDataHeader() {
    *this = ::std::move(from);
  }

  inline LogicalDetectionDataHeader& operator=(const LogicalDetectionDataHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalDetectionDataHeader& operator=(LogicalDetectionDataHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalDetectionDataHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalDetectionDataHeader* internal_default_instance() {
    return reinterpret_cast<const LogicalDetectionDataHeader*>(
               &_LogicalDetectionDataHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogicalDetectionDataHeader& a, LogicalDetectionDataHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalDetectionDataHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalDetectionDataHeader* New() const final {
    return CreateMaybeMessage<LogicalDetectionDataHeader>(nullptr);
  }

  LogicalDetectionDataHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalDetectionDataHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalDetectionDataHeader& from);
  void MergeFrom(const LogicalDetectionDataHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalDetectionDataHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalDetectionDataHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicaldetectiondata_2eproto);
    return ::descriptor_table_osi_5flogicaldetectiondata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogicalDetectionDataHeader_DataQualifier DataQualifier;
  static constexpr DataQualifier DATA_QUALIFIER_UNKNOWN =
    LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_UNKNOWN;
  static constexpr DataQualifier DATA_QUALIFIER_OTHER =
    LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_OTHER;
  static constexpr DataQualifier DATA_QUALIFIER_AVAILABLE =
    LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE;
  static constexpr DataQualifier DATA_QUALIFIER_AVAILABLE_REDUCED =
    LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_AVAILABLE_REDUCED;
  static constexpr DataQualifier DATA_QUALIFIER_NOT_AVAILABLE =
    LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_NOT_AVAILABLE;
  static constexpr DataQualifier DATA_QUALIFIER_BLINDNESS =
    LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_BLINDNESS;
  static constexpr DataQualifier DATA_QUALIFIER_TEMPORARY_AVAILABLE =
    LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_TEMPORARY_AVAILABLE;
  static constexpr DataQualifier DATA_QUALIFIER_INVALID =
    LogicalDetectionDataHeader_DataQualifier_DATA_QUALIFIER_INVALID;
  static inline bool DataQualifier_IsValid(int value) {
    return LogicalDetectionDataHeader_DataQualifier_IsValid(value);
  }
  static constexpr DataQualifier DataQualifier_MIN =
    LogicalDetectionDataHeader_DataQualifier_DataQualifier_MIN;
  static constexpr DataQualifier DataQualifier_MAX =
    LogicalDetectionDataHeader_DataQualifier_DataQualifier_MAX;
  static constexpr int DataQualifier_ARRAYSIZE =
    LogicalDetectionDataHeader_DataQualifier_DataQualifier_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DataQualifier_descriptor() {
    return LogicalDetectionDataHeader_DataQualifier_descriptor();
  }
  template<typename T>
  static inline const std::string& DataQualifier_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DataQualifier>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DataQualifier_Name.");
    return LogicalDetectionDataHeader_DataQualifier_Name(enum_t_value);
  }
  static inline bool DataQualifier_Parse(const std::string& name,
      DataQualifier* value) {
    return LogicalDetectionDataHeader_DataQualifier_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSensorIdFieldNumber = 4,
    kLogicalDetectionTimeFieldNumber = 1,
    kDataQualifierFieldNumber = 2,
    kNumberOfValidLogicalDetectionsFieldNumber = 3,
  };
  // repeated .osi3.Identifier sensor_id = 4;
  int sensor_id_size() const;
  private:
  int _internal_sensor_id_size() const;
  public:
  void clear_sensor_id();
  ::osi3::Identifier* mutable_sensor_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
      mutable_sensor_id();
  private:
  const ::osi3::Identifier& _internal_sensor_id(int index) const;
  ::osi3::Identifier* _internal_add_sensor_id();
  public:
  const ::osi3::Identifier& sensor_id(int index) const;
  ::osi3::Identifier* add_sensor_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
      sensor_id() const;

  // optional .osi3.Timestamp logical_detection_time = 1;
  bool has_logical_detection_time() const;
  private:
  bool _internal_has_logical_detection_time() const;
  public:
  void clear_logical_detection_time();
  const ::osi3::Timestamp& logical_detection_time() const;
  ::osi3::Timestamp* release_logical_detection_time();
  ::osi3::Timestamp* mutable_logical_detection_time();
  void set_allocated_logical_detection_time(::osi3::Timestamp* logical_detection_time);
  private:
  const ::osi3::Timestamp& _internal_logical_detection_time() const;
  ::osi3::Timestamp* _internal_mutable_logical_detection_time();
  public:

  // optional .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
  bool has_data_qualifier() const;
  private:
  bool _internal_has_data_qualifier() const;
  public:
  void clear_data_qualifier();
  ::osi3::LogicalDetectionDataHeader_DataQualifier data_qualifier() const;
  void set_data_qualifier(::osi3::LogicalDetectionDataHeader_DataQualifier value);
  private:
  ::osi3::LogicalDetectionDataHeader_DataQualifier _internal_data_qualifier() const;
  void _internal_set_data_qualifier(::osi3::LogicalDetectionDataHeader_DataQualifier value);
  public:

  // optional uint32 number_of_valid_logical_detections = 3;
  bool has_number_of_valid_logical_detections() const;
  private:
  bool _internal_has_number_of_valid_logical_detections() const;
  public:
  void clear_number_of_valid_logical_detections();
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_valid_logical_detections() const;
  void set_number_of_valid_logical_detections(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_number_of_valid_logical_detections() const;
  void _internal_set_number_of_valid_logical_detections(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.LogicalDetectionDataHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier > sensor_id_;
  ::osi3::Timestamp* logical_detection_time_;
  int data_qualifier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 number_of_valid_logical_detections_;
  friend struct ::TableStruct_osi_5flogicaldetectiondata_2eproto;
};
// -------------------------------------------------------------------

class LogicalDetection :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalDetection) */ {
 public:
  LogicalDetection();
  virtual ~LogicalDetection();

  LogicalDetection(const LogicalDetection& from);
  LogicalDetection(LogicalDetection&& from) noexcept
    : LogicalDetection() {
    *this = ::std::move(from);
  }

  inline LogicalDetection& operator=(const LogicalDetection& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalDetection& operator=(LogicalDetection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalDetection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogicalDetection* internal_default_instance() {
    return reinterpret_cast<const LogicalDetection*>(
               &_LogicalDetection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogicalDetection& a, LogicalDetection& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalDetection* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalDetection* New() const final {
    return CreateMaybeMessage<LogicalDetection>(nullptr);
  }

  LogicalDetection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalDetection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalDetection& from);
  void MergeFrom(const LogicalDetection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalDetection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalDetection";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5flogicaldetectiondata_2eproto);
    return ::descriptor_table_osi_5flogicaldetectiondata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorIdFieldNumber = 10,
    kObjectIdFieldNumber = 2,
    kPositionFieldNumber = 3,
    kPositionRmseFieldNumber = 4,
    kVelocityFieldNumber = 5,
    kVelocityRmseFieldNumber = 6,
    kExistenceProbabilityFieldNumber = 1,
    kIntensityFieldNumber = 7,
    kSnrFieldNumber = 8,
    kPointTargetProbabilityFieldNumber = 9,
    kClassificationFieldNumber = 11,
  };
  // repeated .osi3.Identifier sensor_id = 10;
  int sensor_id_size() const;
  private:
  int _internal_sensor_id_size() const;
  public:
  void clear_sensor_id();
  ::osi3::Identifier* mutable_sensor_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
      mutable_sensor_id();
  private:
  const ::osi3::Identifier& _internal_sensor_id(int index) const;
  ::osi3::Identifier* _internal_add_sensor_id();
  public:
  const ::osi3::Identifier& sensor_id(int index) const;
  ::osi3::Identifier* add_sensor_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
      sensor_id() const;

  // optional .osi3.Identifier object_id = 2;
  bool has_object_id() const;
  private:
  bool _internal_has_object_id() const;
  public:
  void clear_object_id();
  const ::osi3::Identifier& object_id() const;
  ::osi3::Identifier* release_object_id();
  ::osi3::Identifier* mutable_object_id();
  void set_allocated_object_id(::osi3::Identifier* object_id);
  private:
  const ::osi3::Identifier& _internal_object_id() const;
  ::osi3::Identifier* _internal_mutable_object_id();
  public:

  // optional .osi3.Vector3d position = 3;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:

  // optional .osi3.Vector3d position_rmse = 4;
  bool has_position_rmse() const;
  private:
  bool _internal_has_position_rmse() const;
  public:
  void clear_position_rmse();
  const ::osi3::Vector3d& position_rmse() const;
  ::osi3::Vector3d* release_position_rmse();
  ::osi3::Vector3d* mutable_position_rmse();
  void set_allocated_position_rmse(::osi3::Vector3d* position_rmse);
  private:
  const ::osi3::Vector3d& _internal_position_rmse() const;
  ::osi3::Vector3d* _internal_mutable_position_rmse();
  public:

  // optional .osi3.Vector3d velocity = 5;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::osi3::Vector3d& velocity() const;
  ::osi3::Vector3d* release_velocity();
  ::osi3::Vector3d* mutable_velocity();
  void set_allocated_velocity(::osi3::Vector3d* velocity);
  private:
  const ::osi3::Vector3d& _internal_velocity() const;
  ::osi3::Vector3d* _internal_mutable_velocity();
  public:

  // optional .osi3.Vector3d velocity_rmse = 6;
  bool has_velocity_rmse() const;
  private:
  bool _internal_has_velocity_rmse() const;
  public:
  void clear_velocity_rmse();
  const ::osi3::Vector3d& velocity_rmse() const;
  ::osi3::Vector3d* release_velocity_rmse();
  ::osi3::Vector3d* mutable_velocity_rmse();
  void set_allocated_velocity_rmse(::osi3::Vector3d* velocity_rmse);
  private:
  const ::osi3::Vector3d& _internal_velocity_rmse() const;
  ::osi3::Vector3d* _internal_mutable_velocity_rmse();
  public:

  // optional double existence_probability = 1;
  bool has_existence_probability() const;
  private:
  bool _internal_has_existence_probability() const;
  public:
  void clear_existence_probability();
  double existence_probability() const;
  void set_existence_probability(double value);
  private:
  double _internal_existence_probability() const;
  void _internal_set_existence_probability(double value);
  public:

  // optional double intensity = 7;
  bool has_intensity() const;
  private:
  bool _internal_has_intensity() const;
  public:
  void clear_intensity();
  double intensity() const;
  void set_intensity(double value);
  private:
  double _internal_intensity() const;
  void _internal_set_intensity(double value);
  public:

  // optional double snr = 8;
  bool has_snr() const;
  private:
  bool _internal_has_snr() const;
  public:
  void clear_snr();
  double snr() const;
  void set_snr(double value);
  private:
  double _internal_snr() const;
  void _internal_set_snr(double value);
  public:

  // optional double point_target_probability = 9;
  bool has_point_target_probability() const;
  private:
  bool _internal_has_point_target_probability() const;
  public:
  void clear_point_target_probability();
  double point_target_probability() const;
  void set_point_target_probability(double value);
  private:
  double _internal_point_target_probability() const;
  void _internal_set_point_target_probability(double value);
  public:

  // optional .osi3.LogicalDetectionClassification classification = 11;
  bool has_classification() const;
  private:
  bool _internal_has_classification() const;
  public:
  void clear_classification();
  ::osi3::LogicalDetectionClassification classification() const;
  void set_classification(::osi3::LogicalDetectionClassification value);
  private:
  ::osi3::LogicalDetectionClassification _internal_classification() const;
  void _internal_set_classification(::osi3::LogicalDetectionClassification value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.LogicalDetection)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier > sensor_id_;
  ::osi3::Identifier* object_id_;
  ::osi3::Vector3d* position_;
  ::osi3::Vector3d* position_rmse_;
  ::osi3::Vector3d* velocity_;
  ::osi3::Vector3d* velocity_rmse_;
  double existence_probability_;
  double intensity_;
  double snr_;
  double point_target_probability_;
  int classification_;
  friend struct ::TableStruct_osi_5flogicaldetectiondata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogicalDetectionData

// optional .osi3.InterfaceVersion version = 1;
inline bool LogicalDetectionData::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || version_ != nullptr);
  return value;
}
inline bool LogicalDetectionData::has_version() const {
  return _internal_has_version();
}
inline const ::osi3::InterfaceVersion& LogicalDetectionData::_internal_version() const {
  const ::osi3::InterfaceVersion* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::InterfaceVersion*>(
      &::osi3::_InterfaceVersion_default_instance_);
}
inline const ::osi3::InterfaceVersion& LogicalDetectionData::version() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetectionData.version)
  return _internal_version();
}
inline ::osi3::InterfaceVersion* LogicalDetectionData::release_version() {
  // @@protoc_insertion_point(field_release:osi3.LogicalDetectionData.version)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::InterfaceVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::osi3::InterfaceVersion* LogicalDetectionData::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::InterfaceVersion>(GetArenaNoVirtual());
    version_ = p;
  }
  return version_;
}
inline ::osi3::InterfaceVersion* LogicalDetectionData::mutable_version() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetectionData.version)
  return _internal_mutable_version();
}
inline void LogicalDetectionData::set_allocated_version(::osi3::InterfaceVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalDetectionData.version)
}

// optional .osi3.LogicalDetectionDataHeader header = 2;
inline bool LogicalDetectionData::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool LogicalDetectionData::has_header() const {
  return _internal_has_header();
}
inline void LogicalDetectionData::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::osi3::LogicalDetectionDataHeader& LogicalDetectionData::_internal_header() const {
  const ::osi3::LogicalDetectionDataHeader* p = header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::LogicalDetectionDataHeader*>(
      &::osi3::_LogicalDetectionDataHeader_default_instance_);
}
inline const ::osi3::LogicalDetectionDataHeader& LogicalDetectionData::header() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetectionData.header)
  return _internal_header();
}
inline ::osi3::LogicalDetectionDataHeader* LogicalDetectionData::release_header() {
  // @@protoc_insertion_point(field_release:osi3.LogicalDetectionData.header)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::LogicalDetectionDataHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::osi3::LogicalDetectionDataHeader* LogicalDetectionData::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::LogicalDetectionDataHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  return header_;
}
inline ::osi3::LogicalDetectionDataHeader* LogicalDetectionData::mutable_header() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetectionData.header)
  return _internal_mutable_header();
}
inline void LogicalDetectionData::set_allocated_header(::osi3::LogicalDetectionDataHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalDetectionData.header)
}

// repeated .osi3.LogicalDetection logical_detection = 3;
inline int LogicalDetectionData::_internal_logical_detection_size() const {
  return logical_detection_.size();
}
inline int LogicalDetectionData::logical_detection_size() const {
  return _internal_logical_detection_size();
}
inline void LogicalDetectionData::clear_logical_detection() {
  logical_detection_.Clear();
}
inline ::osi3::LogicalDetection* LogicalDetectionData::mutable_logical_detection(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetectionData.logical_detection)
  return logical_detection_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalDetection >*
LogicalDetectionData::mutable_logical_detection() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalDetectionData.logical_detection)
  return &logical_detection_;
}
inline const ::osi3::LogicalDetection& LogicalDetectionData::_internal_logical_detection(int index) const {
  return logical_detection_.Get(index);
}
inline const ::osi3::LogicalDetection& LogicalDetectionData::logical_detection(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetectionData.logical_detection)
  return _internal_logical_detection(index);
}
inline ::osi3::LogicalDetection* LogicalDetectionData::_internal_add_logical_detection() {
  return logical_detection_.Add();
}
inline ::osi3::LogicalDetection* LogicalDetectionData::add_logical_detection() {
  // @@protoc_insertion_point(field_add:osi3.LogicalDetectionData.logical_detection)
  return _internal_add_logical_detection();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::LogicalDetection >&
LogicalDetectionData::logical_detection() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalDetectionData.logical_detection)
  return logical_detection_;
}

// -------------------------------------------------------------------

// LogicalDetectionDataHeader

// optional .osi3.Timestamp logical_detection_time = 1;
inline bool LogicalDetectionDataHeader::_internal_has_logical_detection_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || logical_detection_time_ != nullptr);
  return value;
}
inline bool LogicalDetectionDataHeader::has_logical_detection_time() const {
  return _internal_has_logical_detection_time();
}
inline const ::osi3::Timestamp& LogicalDetectionDataHeader::_internal_logical_detection_time() const {
  const ::osi3::Timestamp* p = logical_detection_time_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Timestamp*>(
      &::osi3::_Timestamp_default_instance_);
}
inline const ::osi3::Timestamp& LogicalDetectionDataHeader::logical_detection_time() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetectionDataHeader.logical_detection_time)
  return _internal_logical_detection_time();
}
inline ::osi3::Timestamp* LogicalDetectionDataHeader::release_logical_detection_time() {
  // @@protoc_insertion_point(field_release:osi3.LogicalDetectionDataHeader.logical_detection_time)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::Timestamp* temp = logical_detection_time_;
  logical_detection_time_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* LogicalDetectionDataHeader::_internal_mutable_logical_detection_time() {
  _has_bits_[0] |= 0x00000001u;
  if (logical_detection_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaNoVirtual());
    logical_detection_time_ = p;
  }
  return logical_detection_time_;
}
inline ::osi3::Timestamp* LogicalDetectionDataHeader::mutable_logical_detection_time() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetectionDataHeader.logical_detection_time)
  return _internal_mutable_logical_detection_time();
}
inline void LogicalDetectionDataHeader::set_allocated_logical_detection_time(::osi3::Timestamp* logical_detection_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(logical_detection_time_);
  }
  if (logical_detection_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logical_detection_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logical_detection_time, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  logical_detection_time_ = logical_detection_time;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalDetectionDataHeader.logical_detection_time)
}

// optional .osi3.LogicalDetectionDataHeader.DataQualifier data_qualifier = 2;
inline bool LogicalDetectionDataHeader::_internal_has_data_qualifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogicalDetectionDataHeader::has_data_qualifier() const {
  return _internal_has_data_qualifier();
}
inline void LogicalDetectionDataHeader::clear_data_qualifier() {
  data_qualifier_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::osi3::LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::_internal_data_qualifier() const {
  return static_cast< ::osi3::LogicalDetectionDataHeader_DataQualifier >(data_qualifier_);
}
inline ::osi3::LogicalDetectionDataHeader_DataQualifier LogicalDetectionDataHeader::data_qualifier() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetectionDataHeader.data_qualifier)
  return _internal_data_qualifier();
}
inline void LogicalDetectionDataHeader::_internal_set_data_qualifier(::osi3::LogicalDetectionDataHeader_DataQualifier value) {
  assert(::osi3::LogicalDetectionDataHeader_DataQualifier_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  data_qualifier_ = value;
}
inline void LogicalDetectionDataHeader::set_data_qualifier(::osi3::LogicalDetectionDataHeader_DataQualifier value) {
  _internal_set_data_qualifier(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalDetectionDataHeader.data_qualifier)
}

// optional uint32 number_of_valid_logical_detections = 3;
inline bool LogicalDetectionDataHeader::_internal_has_number_of_valid_logical_detections() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LogicalDetectionDataHeader::has_number_of_valid_logical_detections() const {
  return _internal_has_number_of_valid_logical_detections();
}
inline void LogicalDetectionDataHeader::clear_number_of_valid_logical_detections() {
  number_of_valid_logical_detections_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogicalDetectionDataHeader::_internal_number_of_valid_logical_detections() const {
  return number_of_valid_logical_detections_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogicalDetectionDataHeader::number_of_valid_logical_detections() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetectionDataHeader.number_of_valid_logical_detections)
  return _internal_number_of_valid_logical_detections();
}
inline void LogicalDetectionDataHeader::_internal_set_number_of_valid_logical_detections(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  number_of_valid_logical_detections_ = value;
}
inline void LogicalDetectionDataHeader::set_number_of_valid_logical_detections(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_number_of_valid_logical_detections(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalDetectionDataHeader.number_of_valid_logical_detections)
}

// repeated .osi3.Identifier sensor_id = 4;
inline int LogicalDetectionDataHeader::_internal_sensor_id_size() const {
  return sensor_id_.size();
}
inline int LogicalDetectionDataHeader::sensor_id_size() const {
  return _internal_sensor_id_size();
}
inline ::osi3::Identifier* LogicalDetectionDataHeader::mutable_sensor_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetectionDataHeader.sensor_id)
  return sensor_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
LogicalDetectionDataHeader::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalDetectionDataHeader.sensor_id)
  return &sensor_id_;
}
inline const ::osi3::Identifier& LogicalDetectionDataHeader::_internal_sensor_id(int index) const {
  return sensor_id_.Get(index);
}
inline const ::osi3::Identifier& LogicalDetectionDataHeader::sensor_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetectionDataHeader.sensor_id)
  return _internal_sensor_id(index);
}
inline ::osi3::Identifier* LogicalDetectionDataHeader::_internal_add_sensor_id() {
  return sensor_id_.Add();
}
inline ::osi3::Identifier* LogicalDetectionDataHeader::add_sensor_id() {
  // @@protoc_insertion_point(field_add:osi3.LogicalDetectionDataHeader.sensor_id)
  return _internal_add_sensor_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
LogicalDetectionDataHeader::sensor_id() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalDetectionDataHeader.sensor_id)
  return sensor_id_;
}

// -------------------------------------------------------------------

// LogicalDetection

// optional double existence_probability = 1;
inline bool LogicalDetection::_internal_has_existence_probability() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool LogicalDetection::has_existence_probability() const {
  return _internal_has_existence_probability();
}
inline void LogicalDetection::clear_existence_probability() {
  existence_probability_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double LogicalDetection::_internal_existence_probability() const {
  return existence_probability_;
}
inline double LogicalDetection::existence_probability() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.existence_probability)
  return _internal_existence_probability();
}
inline void LogicalDetection::_internal_set_existence_probability(double value) {
  _has_bits_[0] |= 0x00000020u;
  existence_probability_ = value;
}
inline void LogicalDetection::set_existence_probability(double value) {
  _internal_set_existence_probability(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalDetection.existence_probability)
}

// optional .osi3.Identifier object_id = 2;
inline bool LogicalDetection::_internal_has_object_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || object_id_ != nullptr);
  return value;
}
inline bool LogicalDetection::has_object_id() const {
  return _internal_has_object_id();
}
inline const ::osi3::Identifier& LogicalDetection::_internal_object_id() const {
  const ::osi3::Identifier* p = object_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& LogicalDetection::object_id() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.object_id)
  return _internal_object_id();
}
inline ::osi3::Identifier* LogicalDetection::release_object_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalDetection.object_id)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::Identifier* temp = object_id_;
  object_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalDetection::_internal_mutable_object_id() {
  _has_bits_[0] |= 0x00000001u;
  if (object_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    object_id_ = p;
  }
  return object_id_;
}
inline ::osi3::Identifier* LogicalDetection::mutable_object_id() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetection.object_id)
  return _internal_mutable_object_id();
}
inline void LogicalDetection::set_allocated_object_id(::osi3::Identifier* object_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_id_);
  }
  if (object_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  object_id_ = object_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalDetection.object_id)
}

// optional .osi3.Vector3d position = 3;
inline bool LogicalDetection::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool LogicalDetection::has_position() const {
  return _internal_has_position();
}
inline const ::osi3::Vector3d& LogicalDetection::_internal_position() const {
  const ::osi3::Vector3d* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& LogicalDetection::position() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.position)
  return _internal_position();
}
inline ::osi3::Vector3d* LogicalDetection::release_position() {
  // @@protoc_insertion_point(field_release:osi3.LogicalDetection.position)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* LogicalDetection::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::osi3::Vector3d* LogicalDetection::mutable_position() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetection.position)
  return _internal_mutable_position();
}
inline void LogicalDetection::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalDetection.position)
}

// optional .osi3.Vector3d position_rmse = 4;
inline bool LogicalDetection::_internal_has_position_rmse() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || position_rmse_ != nullptr);
  return value;
}
inline bool LogicalDetection::has_position_rmse() const {
  return _internal_has_position_rmse();
}
inline const ::osi3::Vector3d& LogicalDetection::_internal_position_rmse() const {
  const ::osi3::Vector3d* p = position_rmse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& LogicalDetection::position_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.position_rmse)
  return _internal_position_rmse();
}
inline ::osi3::Vector3d* LogicalDetection::release_position_rmse() {
  // @@protoc_insertion_point(field_release:osi3.LogicalDetection.position_rmse)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::Vector3d* temp = position_rmse_;
  position_rmse_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* LogicalDetection::_internal_mutable_position_rmse() {
  _has_bits_[0] |= 0x00000004u;
  if (position_rmse_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    position_rmse_ = p;
  }
  return position_rmse_;
}
inline ::osi3::Vector3d* LogicalDetection::mutable_position_rmse() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetection.position_rmse)
  return _internal_mutable_position_rmse();
}
inline void LogicalDetection::set_allocated_position_rmse(::osi3::Vector3d* position_rmse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_rmse_);
  }
  if (position_rmse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position_rmse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position_rmse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  position_rmse_ = position_rmse;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalDetection.position_rmse)
}

// optional .osi3.Vector3d velocity = 5;
inline bool LogicalDetection::_internal_has_velocity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || velocity_ != nullptr);
  return value;
}
inline bool LogicalDetection::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::osi3::Vector3d& LogicalDetection::_internal_velocity() const {
  const ::osi3::Vector3d* p = velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& LogicalDetection::velocity() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.velocity)
  return _internal_velocity();
}
inline ::osi3::Vector3d* LogicalDetection::release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.LogicalDetection.velocity)
  _has_bits_[0] &= ~0x00000008u;
  ::osi3::Vector3d* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* LogicalDetection::_internal_mutable_velocity() {
  _has_bits_[0] |= 0x00000008u;
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    velocity_ = p;
  }
  return velocity_;
}
inline ::osi3::Vector3d* LogicalDetection::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetection.velocity)
  return _internal_mutable_velocity();
}
inline void LogicalDetection::set_allocated_velocity(::osi3::Vector3d* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalDetection.velocity)
}

// optional .osi3.Vector3d velocity_rmse = 6;
inline bool LogicalDetection::_internal_has_velocity_rmse() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || velocity_rmse_ != nullptr);
  return value;
}
inline bool LogicalDetection::has_velocity_rmse() const {
  return _internal_has_velocity_rmse();
}
inline const ::osi3::Vector3d& LogicalDetection::_internal_velocity_rmse() const {
  const ::osi3::Vector3d* p = velocity_rmse_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& LogicalDetection::velocity_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.velocity_rmse)
  return _internal_velocity_rmse();
}
inline ::osi3::Vector3d* LogicalDetection::release_velocity_rmse() {
  // @@protoc_insertion_point(field_release:osi3.LogicalDetection.velocity_rmse)
  _has_bits_[0] &= ~0x00000010u;
  ::osi3::Vector3d* temp = velocity_rmse_;
  velocity_rmse_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* LogicalDetection::_internal_mutable_velocity_rmse() {
  _has_bits_[0] |= 0x00000010u;
  if (velocity_rmse_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    velocity_rmse_ = p;
  }
  return velocity_rmse_;
}
inline ::osi3::Vector3d* LogicalDetection::mutable_velocity_rmse() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetection.velocity_rmse)
  return _internal_mutable_velocity_rmse();
}
inline void LogicalDetection::set_allocated_velocity_rmse(::osi3::Vector3d* velocity_rmse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_rmse_);
  }
  if (velocity_rmse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      velocity_rmse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity_rmse, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  velocity_rmse_ = velocity_rmse;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalDetection.velocity_rmse)
}

// optional double intensity = 7;
inline bool LogicalDetection::_internal_has_intensity() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool LogicalDetection::has_intensity() const {
  return _internal_has_intensity();
}
inline void LogicalDetection::clear_intensity() {
  intensity_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double LogicalDetection::_internal_intensity() const {
  return intensity_;
}
inline double LogicalDetection::intensity() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.intensity)
  return _internal_intensity();
}
inline void LogicalDetection::_internal_set_intensity(double value) {
  _has_bits_[0] |= 0x00000040u;
  intensity_ = value;
}
inline void LogicalDetection::set_intensity(double value) {
  _internal_set_intensity(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalDetection.intensity)
}

// optional double snr = 8;
inline bool LogicalDetection::_internal_has_snr() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool LogicalDetection::has_snr() const {
  return _internal_has_snr();
}
inline void LogicalDetection::clear_snr() {
  snr_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double LogicalDetection::_internal_snr() const {
  return snr_;
}
inline double LogicalDetection::snr() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.snr)
  return _internal_snr();
}
inline void LogicalDetection::_internal_set_snr(double value) {
  _has_bits_[0] |= 0x00000080u;
  snr_ = value;
}
inline void LogicalDetection::set_snr(double value) {
  _internal_set_snr(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalDetection.snr)
}

// optional double point_target_probability = 9;
inline bool LogicalDetection::_internal_has_point_target_probability() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool LogicalDetection::has_point_target_probability() const {
  return _internal_has_point_target_probability();
}
inline void LogicalDetection::clear_point_target_probability() {
  point_target_probability_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double LogicalDetection::_internal_point_target_probability() const {
  return point_target_probability_;
}
inline double LogicalDetection::point_target_probability() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.point_target_probability)
  return _internal_point_target_probability();
}
inline void LogicalDetection::_internal_set_point_target_probability(double value) {
  _has_bits_[0] |= 0x00000100u;
  point_target_probability_ = value;
}
inline void LogicalDetection::set_point_target_probability(double value) {
  _internal_set_point_target_probability(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalDetection.point_target_probability)
}

// repeated .osi3.Identifier sensor_id = 10;
inline int LogicalDetection::_internal_sensor_id_size() const {
  return sensor_id_.size();
}
inline int LogicalDetection::sensor_id_size() const {
  return _internal_sensor_id_size();
}
inline ::osi3::Identifier* LogicalDetection::mutable_sensor_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalDetection.sensor_id)
  return sensor_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
LogicalDetection::mutable_sensor_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.LogicalDetection.sensor_id)
  return &sensor_id_;
}
inline const ::osi3::Identifier& LogicalDetection::_internal_sensor_id(int index) const {
  return sensor_id_.Get(index);
}
inline const ::osi3::Identifier& LogicalDetection::sensor_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.sensor_id)
  return _internal_sensor_id(index);
}
inline ::osi3::Identifier* LogicalDetection::_internal_add_sensor_id() {
  return sensor_id_.Add();
}
inline ::osi3::Identifier* LogicalDetection::add_sensor_id() {
  // @@protoc_insertion_point(field_add:osi3.LogicalDetection.sensor_id)
  return _internal_add_sensor_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
LogicalDetection::sensor_id() const {
  // @@protoc_insertion_point(field_list:osi3.LogicalDetection.sensor_id)
  return sensor_id_;
}

// optional .osi3.LogicalDetectionClassification classification = 11;
inline bool LogicalDetection::_internal_has_classification() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool LogicalDetection::has_classification() const {
  return _internal_has_classification();
}
inline void LogicalDetection::clear_classification() {
  classification_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::osi3::LogicalDetectionClassification LogicalDetection::_internal_classification() const {
  return static_cast< ::osi3::LogicalDetectionClassification >(classification_);
}
inline ::osi3::LogicalDetectionClassification LogicalDetection::classification() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalDetection.classification)
  return _internal_classification();
}
inline void LogicalDetection::_internal_set_classification(::osi3::LogicalDetectionClassification value) {
  assert(::osi3::LogicalDetectionClassification_IsValid(value));
  _has_bits_[0] |= 0x00000200u;
  classification_ = value;
}
inline void LogicalDetection::set_classification(::osi3::LogicalDetectionClassification value) {
  _internal_set_classification(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalDetection.classification)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::LogicalDetectionDataHeader_DataQualifier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::LogicalDetectionDataHeader_DataQualifier>() {
  return ::osi3::LogicalDetectionDataHeader_DataQualifier_descriptor();
}
template <> struct is_proto_enum< ::osi3::LogicalDetectionClassification> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::LogicalDetectionClassification>() {
  return ::osi3::LogicalDetectionClassification_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5flogicaldetectiondata_2eproto

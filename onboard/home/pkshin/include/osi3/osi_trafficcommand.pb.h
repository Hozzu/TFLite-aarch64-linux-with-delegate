// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_trafficcommand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5ftrafficcommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5ftrafficcommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_version.pb.h"
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5ftrafficcommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5ftrafficcommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5ftrafficcommand_2eproto;
namespace osi3 {
class TrafficAction;
class TrafficActionDefaultTypeInternal;
extern TrafficActionDefaultTypeInternal _TrafficAction_default_instance_;
class TrafficAction_AbortActionsAction;
class TrafficAction_AbortActionsActionDefaultTypeInternal;
extern TrafficAction_AbortActionsActionDefaultTypeInternal _TrafficAction_AbortActionsAction_default_instance_;
class TrafficAction_AcquireGlobalPositionAction;
class TrafficAction_AcquireGlobalPositionActionDefaultTypeInternal;
extern TrafficAction_AcquireGlobalPositionActionDefaultTypeInternal _TrafficAction_AcquireGlobalPositionAction_default_instance_;
class TrafficAction_ActionHeader;
class TrafficAction_ActionHeaderDefaultTypeInternal;
extern TrafficAction_ActionHeaderDefaultTypeInternal _TrafficAction_ActionHeader_default_instance_;
class TrafficAction_CustomAction;
class TrafficAction_CustomActionDefaultTypeInternal;
extern TrafficAction_CustomActionDefaultTypeInternal _TrafficAction_CustomAction_default_instance_;
class TrafficAction_DynamicConstraints;
class TrafficAction_DynamicConstraintsDefaultTypeInternal;
extern TrafficAction_DynamicConstraintsDefaultTypeInternal _TrafficAction_DynamicConstraints_default_instance_;
class TrafficAction_EndActionsAction;
class TrafficAction_EndActionsActionDefaultTypeInternal;
extern TrafficAction_EndActionsActionDefaultTypeInternal _TrafficAction_EndActionsAction_default_instance_;
class TrafficAction_FollowPathAction;
class TrafficAction_FollowPathActionDefaultTypeInternal;
extern TrafficAction_FollowPathActionDefaultTypeInternal _TrafficAction_FollowPathAction_default_instance_;
class TrafficAction_FollowTrajectoryAction;
class TrafficAction_FollowTrajectoryActionDefaultTypeInternal;
extern TrafficAction_FollowTrajectoryActionDefaultTypeInternal _TrafficAction_FollowTrajectoryAction_default_instance_;
class TrafficAction_LaneChangeAction;
class TrafficAction_LaneChangeActionDefaultTypeInternal;
extern TrafficAction_LaneChangeActionDefaultTypeInternal _TrafficAction_LaneChangeAction_default_instance_;
class TrafficAction_LaneOffsetAction;
class TrafficAction_LaneOffsetActionDefaultTypeInternal;
extern TrafficAction_LaneOffsetActionDefaultTypeInternal _TrafficAction_LaneOffsetAction_default_instance_;
class TrafficAction_LateralDistanceAction;
class TrafficAction_LateralDistanceActionDefaultTypeInternal;
extern TrafficAction_LateralDistanceActionDefaultTypeInternal _TrafficAction_LateralDistanceAction_default_instance_;
class TrafficAction_LongitudinalDistanceAction;
class TrafficAction_LongitudinalDistanceActionDefaultTypeInternal;
extern TrafficAction_LongitudinalDistanceActionDefaultTypeInternal _TrafficAction_LongitudinalDistanceAction_default_instance_;
class TrafficAction_SpeedAction;
class TrafficAction_SpeedActionDefaultTypeInternal;
extern TrafficAction_SpeedActionDefaultTypeInternal _TrafficAction_SpeedAction_default_instance_;
class TrafficAction_TeleportAction;
class TrafficAction_TeleportActionDefaultTypeInternal;
extern TrafficAction_TeleportActionDefaultTypeInternal _TrafficAction_TeleportAction_default_instance_;
class TrafficCommand;
class TrafficCommandDefaultTypeInternal;
extern TrafficCommandDefaultTypeInternal _TrafficCommand_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::TrafficAction* Arena::CreateMaybeMessage<::osi3::TrafficAction>(Arena*);
template<> ::osi3::TrafficAction_AbortActionsAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_AbortActionsAction>(Arena*);
template<> ::osi3::TrafficAction_AcquireGlobalPositionAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_AcquireGlobalPositionAction>(Arena*);
template<> ::osi3::TrafficAction_ActionHeader* Arena::CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(Arena*);
template<> ::osi3::TrafficAction_CustomAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_CustomAction>(Arena*);
template<> ::osi3::TrafficAction_DynamicConstraints* Arena::CreateMaybeMessage<::osi3::TrafficAction_DynamicConstraints>(Arena*);
template<> ::osi3::TrafficAction_EndActionsAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_EndActionsAction>(Arena*);
template<> ::osi3::TrafficAction_FollowPathAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_FollowPathAction>(Arena*);
template<> ::osi3::TrafficAction_FollowTrajectoryAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_FollowTrajectoryAction>(Arena*);
template<> ::osi3::TrafficAction_LaneChangeAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_LaneChangeAction>(Arena*);
template<> ::osi3::TrafficAction_LaneOffsetAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_LaneOffsetAction>(Arena*);
template<> ::osi3::TrafficAction_LateralDistanceAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_LateralDistanceAction>(Arena*);
template<> ::osi3::TrafficAction_LongitudinalDistanceAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_LongitudinalDistanceAction>(Arena*);
template<> ::osi3::TrafficAction_SpeedAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_SpeedAction>(Arena*);
template<> ::osi3::TrafficAction_TeleportAction* Arena::CreateMaybeMessage<::osi3::TrafficAction_TeleportAction>(Arena*);
template<> ::osi3::TrafficCommand* Arena::CreateMaybeMessage<::osi3::TrafficCommand>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum TrafficAction_FollowingMode : int {
  TrafficAction_FollowingMode_FOLLOWING_MODE_POSITION = 0,
  TrafficAction_FollowingMode_FOLLOWING_MODE_FOLLOW = 1
};
bool TrafficAction_FollowingMode_IsValid(int value);
constexpr TrafficAction_FollowingMode TrafficAction_FollowingMode_FollowingMode_MIN = TrafficAction_FollowingMode_FOLLOWING_MODE_POSITION;
constexpr TrafficAction_FollowingMode TrafficAction_FollowingMode_FollowingMode_MAX = TrafficAction_FollowingMode_FOLLOWING_MODE_FOLLOW;
constexpr int TrafficAction_FollowingMode_FollowingMode_ARRAYSIZE = TrafficAction_FollowingMode_FollowingMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficAction_FollowingMode_descriptor();
template<typename T>
inline const std::string& TrafficAction_FollowingMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficAction_FollowingMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficAction_FollowingMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficAction_FollowingMode_descriptor(), enum_t_value);
}
inline bool TrafficAction_FollowingMode_Parse(
    const std::string& name, TrafficAction_FollowingMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficAction_FollowingMode>(
    TrafficAction_FollowingMode_descriptor(), name, value);
}
enum TrafficAction_DynamicsShape : int {
  TrafficAction_DynamicsShape_DYNAMICS_SHAPE_UNSPECIFIED = 0,
  TrafficAction_DynamicsShape_DYNAMICS_SHAPE_LINEAR = 1,
  TrafficAction_DynamicsShape_DYNAMICS_SHAPE_CUBIC = 2,
  TrafficAction_DynamicsShape_DYNAMICS_SHAPE_SINUSOIDAL = 3,
  TrafficAction_DynamicsShape_DYNAMICS_SHAPE_STEP = 4
};
bool TrafficAction_DynamicsShape_IsValid(int value);
constexpr TrafficAction_DynamicsShape TrafficAction_DynamicsShape_DynamicsShape_MIN = TrafficAction_DynamicsShape_DYNAMICS_SHAPE_UNSPECIFIED;
constexpr TrafficAction_DynamicsShape TrafficAction_DynamicsShape_DynamicsShape_MAX = TrafficAction_DynamicsShape_DYNAMICS_SHAPE_STEP;
constexpr int TrafficAction_DynamicsShape_DynamicsShape_ARRAYSIZE = TrafficAction_DynamicsShape_DynamicsShape_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficAction_DynamicsShape_descriptor();
template<typename T>
inline const std::string& TrafficAction_DynamicsShape_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficAction_DynamicsShape>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficAction_DynamicsShape_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficAction_DynamicsShape_descriptor(), enum_t_value);
}
inline bool TrafficAction_DynamicsShape_Parse(
    const std::string& name, TrafficAction_DynamicsShape* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficAction_DynamicsShape>(
    TrafficAction_DynamicsShape_descriptor(), name, value);
}
// ===================================================================

class TrafficCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficCommand) */ {
 public:
  TrafficCommand();
  virtual ~TrafficCommand();

  TrafficCommand(const TrafficCommand& from);
  TrafficCommand(TrafficCommand&& from) noexcept
    : TrafficCommand() {
    *this = ::std::move(from);
  }

  inline TrafficCommand& operator=(const TrafficCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficCommand& operator=(TrafficCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficCommand* internal_default_instance() {
    return reinterpret_cast<const TrafficCommand*>(
               &_TrafficCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrafficCommand& a, TrafficCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficCommand* New() const final {
    return CreateMaybeMessage<TrafficCommand>(nullptr);
  }

  TrafficCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficCommand& from);
  void MergeFrom(const TrafficCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 4,
    kVersionFieldNumber = 1,
    kTimestampFieldNumber = 2,
    kTrafficParticipantIdFieldNumber = 3,
  };
  // repeated .osi3.TrafficAction action = 4;
  int action_size() const;
  private:
  int _internal_action_size() const;
  public:
  void clear_action();
  ::osi3::TrafficAction* mutable_action(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficAction >*
      mutable_action();
  private:
  const ::osi3::TrafficAction& _internal_action(int index) const;
  ::osi3::TrafficAction* _internal_add_action();
  public:
  const ::osi3::TrafficAction& action(int index) const;
  ::osi3::TrafficAction* add_action();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficAction >&
      action() const;

  // optional .osi3.InterfaceVersion version = 1;
  bool has_version() const;
  private:
  bool _internal_has_version() const;
  public:
  void clear_version();
  const ::osi3::InterfaceVersion& version() const;
  ::osi3::InterfaceVersion* release_version();
  ::osi3::InterfaceVersion* mutable_version();
  void set_allocated_version(::osi3::InterfaceVersion* version);
  private:
  const ::osi3::InterfaceVersion& _internal_version() const;
  ::osi3::InterfaceVersion* _internal_mutable_version();
  public:

  // optional .osi3.Timestamp timestamp = 2;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);
  private:
  const ::osi3::Timestamp& _internal_timestamp() const;
  ::osi3::Timestamp* _internal_mutable_timestamp();
  public:

  // optional .osi3.Identifier traffic_participant_id = 3;
  bool has_traffic_participant_id() const;
  private:
  bool _internal_has_traffic_participant_id() const;
  public:
  void clear_traffic_participant_id();
  const ::osi3::Identifier& traffic_participant_id() const;
  ::osi3::Identifier* release_traffic_participant_id();
  ::osi3::Identifier* mutable_traffic_participant_id();
  void set_allocated_traffic_participant_id(::osi3::Identifier* traffic_participant_id);
  private:
  const ::osi3::Identifier& _internal_traffic_participant_id() const;
  ::osi3::Identifier* _internal_mutable_traffic_participant_id();
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficAction > action_;
  ::osi3::InterfaceVersion* version_;
  ::osi3::Timestamp* timestamp_;
  ::osi3::Identifier* traffic_participant_id_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_ActionHeader :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.ActionHeader) */ {
 public:
  TrafficAction_ActionHeader();
  virtual ~TrafficAction_ActionHeader();

  TrafficAction_ActionHeader(const TrafficAction_ActionHeader& from);
  TrafficAction_ActionHeader(TrafficAction_ActionHeader&& from) noexcept
    : TrafficAction_ActionHeader() {
    *this = ::std::move(from);
  }

  inline TrafficAction_ActionHeader& operator=(const TrafficAction_ActionHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_ActionHeader& operator=(TrafficAction_ActionHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_ActionHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_ActionHeader* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_ActionHeader*>(
               &_TrafficAction_ActionHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TrafficAction_ActionHeader& a, TrafficAction_ActionHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_ActionHeader* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_ActionHeader* New() const final {
    return CreateMaybeMessage<TrafficAction_ActionHeader>(nullptr);
  }

  TrafficAction_ActionHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_ActionHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_ActionHeader& from);
  void MergeFrom(const TrafficAction_ActionHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_ActionHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.ActionHeader";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionIdFieldNumber = 1,
  };
  // optional .osi3.Identifier action_id = 1;
  bool has_action_id() const;
  private:
  bool _internal_has_action_id() const;
  public:
  void clear_action_id();
  const ::osi3::Identifier& action_id() const;
  ::osi3::Identifier* release_action_id();
  ::osi3::Identifier* mutable_action_id();
  void set_allocated_action_id(::osi3::Identifier* action_id);
  private:
  const ::osi3::Identifier& _internal_action_id() const;
  ::osi3::Identifier* _internal_mutable_action_id();
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.ActionHeader)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::Identifier* action_id_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_DynamicConstraints :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.DynamicConstraints) */ {
 public:
  TrafficAction_DynamicConstraints();
  virtual ~TrafficAction_DynamicConstraints();

  TrafficAction_DynamicConstraints(const TrafficAction_DynamicConstraints& from);
  TrafficAction_DynamicConstraints(TrafficAction_DynamicConstraints&& from) noexcept
    : TrafficAction_DynamicConstraints() {
    *this = ::std::move(from);
  }

  inline TrafficAction_DynamicConstraints& operator=(const TrafficAction_DynamicConstraints& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_DynamicConstraints& operator=(TrafficAction_DynamicConstraints&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_DynamicConstraints& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_DynamicConstraints* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_DynamicConstraints*>(
               &_TrafficAction_DynamicConstraints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrafficAction_DynamicConstraints& a, TrafficAction_DynamicConstraints& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_DynamicConstraints* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_DynamicConstraints* New() const final {
    return CreateMaybeMessage<TrafficAction_DynamicConstraints>(nullptr);
  }

  TrafficAction_DynamicConstraints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_DynamicConstraints>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_DynamicConstraints& from);
  void MergeFrom(const TrafficAction_DynamicConstraints& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_DynamicConstraints* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.DynamicConstraints";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxAccelerationFieldNumber = 1,
    kMaxDecelerationFieldNumber = 2,
    kMaxSpeedFieldNumber = 3,
  };
  // optional double max_acceleration = 1;
  bool has_max_acceleration() const;
  private:
  bool _internal_has_max_acceleration() const;
  public:
  void clear_max_acceleration();
  double max_acceleration() const;
  void set_max_acceleration(double value);
  private:
  double _internal_max_acceleration() const;
  void _internal_set_max_acceleration(double value);
  public:

  // optional double max_deceleration = 2;
  bool has_max_deceleration() const;
  private:
  bool _internal_has_max_deceleration() const;
  public:
  void clear_max_deceleration();
  double max_deceleration() const;
  void set_max_deceleration(double value);
  private:
  double _internal_max_deceleration() const;
  void _internal_set_max_deceleration(double value);
  public:

  // optional double max_speed = 3;
  bool has_max_speed() const;
  private:
  bool _internal_has_max_speed() const;
  public:
  void clear_max_speed();
  double max_speed() const;
  void set_max_speed(double value);
  private:
  double _internal_max_speed() const;
  void _internal_set_max_speed(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.DynamicConstraints)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double max_acceleration_;
  double max_deceleration_;
  double max_speed_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_FollowTrajectoryAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.FollowTrajectoryAction) */ {
 public:
  TrafficAction_FollowTrajectoryAction();
  virtual ~TrafficAction_FollowTrajectoryAction();

  TrafficAction_FollowTrajectoryAction(const TrafficAction_FollowTrajectoryAction& from);
  TrafficAction_FollowTrajectoryAction(TrafficAction_FollowTrajectoryAction&& from) noexcept
    : TrafficAction_FollowTrajectoryAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_FollowTrajectoryAction& operator=(const TrafficAction_FollowTrajectoryAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_FollowTrajectoryAction& operator=(TrafficAction_FollowTrajectoryAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_FollowTrajectoryAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_FollowTrajectoryAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_FollowTrajectoryAction*>(
               &_TrafficAction_FollowTrajectoryAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrafficAction_FollowTrajectoryAction& a, TrafficAction_FollowTrajectoryAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_FollowTrajectoryAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_FollowTrajectoryAction* New() const final {
    return CreateMaybeMessage<TrafficAction_FollowTrajectoryAction>(nullptr);
  }

  TrafficAction_FollowTrajectoryAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_FollowTrajectoryAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_FollowTrajectoryAction& from);
  void MergeFrom(const TrafficAction_FollowTrajectoryAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_FollowTrajectoryAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.FollowTrajectoryAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrajectoryPointFieldNumber = 2,
    kActionHeaderFieldNumber = 1,
    kConstrainOrientationFieldNumber = 3,
    kFollowingModeFieldNumber = 4,
  };
  // repeated .osi3.StatePoint trajectory_point = 2;
  int trajectory_point_size() const;
  private:
  int _internal_trajectory_point_size() const;
  public:
  void clear_trajectory_point();
  ::osi3::StatePoint* mutable_trajectory_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >*
      mutable_trajectory_point();
  private:
  const ::osi3::StatePoint& _internal_trajectory_point(int index) const;
  ::osi3::StatePoint* _internal_add_trajectory_point();
  public:
  const ::osi3::StatePoint& trajectory_point(int index) const;
  ::osi3::StatePoint* add_trajectory_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >&
      trajectory_point() const;

  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional bool constrain_orientation = 3;
  bool has_constrain_orientation() const;
  private:
  bool _internal_has_constrain_orientation() const;
  public:
  void clear_constrain_orientation();
  bool constrain_orientation() const;
  void set_constrain_orientation(bool value);
  private:
  bool _internal_constrain_orientation() const;
  void _internal_set_constrain_orientation(bool value);
  public:

  // optional .osi3.TrafficAction.FollowingMode following_mode = 4;
  bool has_following_mode() const;
  private:
  bool _internal_has_following_mode() const;
  public:
  void clear_following_mode();
  ::osi3::TrafficAction_FollowingMode following_mode() const;
  void set_following_mode(::osi3::TrafficAction_FollowingMode value);
  private:
  ::osi3::TrafficAction_FollowingMode _internal_following_mode() const;
  void _internal_set_following_mode(::osi3::TrafficAction_FollowingMode value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.FollowTrajectoryAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint > trajectory_point_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  bool constrain_orientation_;
  int following_mode_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_FollowPathAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.FollowPathAction) */ {
 public:
  TrafficAction_FollowPathAction();
  virtual ~TrafficAction_FollowPathAction();

  TrafficAction_FollowPathAction(const TrafficAction_FollowPathAction& from);
  TrafficAction_FollowPathAction(TrafficAction_FollowPathAction&& from) noexcept
    : TrafficAction_FollowPathAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_FollowPathAction& operator=(const TrafficAction_FollowPathAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_FollowPathAction& operator=(TrafficAction_FollowPathAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_FollowPathAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_FollowPathAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_FollowPathAction*>(
               &_TrafficAction_FollowPathAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrafficAction_FollowPathAction& a, TrafficAction_FollowPathAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_FollowPathAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_FollowPathAction* New() const final {
    return CreateMaybeMessage<TrafficAction_FollowPathAction>(nullptr);
  }

  TrafficAction_FollowPathAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_FollowPathAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_FollowPathAction& from);
  void MergeFrom(const TrafficAction_FollowPathAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_FollowPathAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.FollowPathAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPointFieldNumber = 2,
    kActionHeaderFieldNumber = 1,
    kConstrainOrientationFieldNumber = 3,
    kFollowingModeFieldNumber = 4,
  };
  // repeated .osi3.StatePoint path_point = 2;
  int path_point_size() const;
  private:
  int _internal_path_point_size() const;
  public:
  void clear_path_point();
  ::osi3::StatePoint* mutable_path_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >*
      mutable_path_point();
  private:
  const ::osi3::StatePoint& _internal_path_point(int index) const;
  ::osi3::StatePoint* _internal_add_path_point();
  public:
  const ::osi3::StatePoint& path_point(int index) const;
  ::osi3::StatePoint* add_path_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >&
      path_point() const;

  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional bool constrain_orientation = 3;
  bool has_constrain_orientation() const;
  private:
  bool _internal_has_constrain_orientation() const;
  public:
  void clear_constrain_orientation();
  bool constrain_orientation() const;
  void set_constrain_orientation(bool value);
  private:
  bool _internal_constrain_orientation() const;
  void _internal_set_constrain_orientation(bool value);
  public:

  // optional .osi3.TrafficAction.FollowingMode following_mode = 4;
  bool has_following_mode() const;
  private:
  bool _internal_has_following_mode() const;
  public:
  void clear_following_mode();
  ::osi3::TrafficAction_FollowingMode following_mode() const;
  void set_following_mode(::osi3::TrafficAction_FollowingMode value);
  private:
  ::osi3::TrafficAction_FollowingMode _internal_following_mode() const;
  void _internal_set_following_mode(::osi3::TrafficAction_FollowingMode value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.FollowPathAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint > path_point_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  bool constrain_orientation_;
  int following_mode_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_AcquireGlobalPositionAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.AcquireGlobalPositionAction) */ {
 public:
  TrafficAction_AcquireGlobalPositionAction();
  virtual ~TrafficAction_AcquireGlobalPositionAction();

  TrafficAction_AcquireGlobalPositionAction(const TrafficAction_AcquireGlobalPositionAction& from);
  TrafficAction_AcquireGlobalPositionAction(TrafficAction_AcquireGlobalPositionAction&& from) noexcept
    : TrafficAction_AcquireGlobalPositionAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_AcquireGlobalPositionAction& operator=(const TrafficAction_AcquireGlobalPositionAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_AcquireGlobalPositionAction& operator=(TrafficAction_AcquireGlobalPositionAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_AcquireGlobalPositionAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_AcquireGlobalPositionAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_AcquireGlobalPositionAction*>(
               &_TrafficAction_AcquireGlobalPositionAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TrafficAction_AcquireGlobalPositionAction& a, TrafficAction_AcquireGlobalPositionAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_AcquireGlobalPositionAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_AcquireGlobalPositionAction* New() const final {
    return CreateMaybeMessage<TrafficAction_AcquireGlobalPositionAction>(nullptr);
  }

  TrafficAction_AcquireGlobalPositionAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_AcquireGlobalPositionAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_AcquireGlobalPositionAction& from);
  void MergeFrom(const TrafficAction_AcquireGlobalPositionAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_AcquireGlobalPositionAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.AcquireGlobalPositionAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionHeaderFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
  };
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional .osi3.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:

  // optional .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.AcquireGlobalPositionAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_LaneChangeAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.LaneChangeAction) */ {
 public:
  TrafficAction_LaneChangeAction();
  virtual ~TrafficAction_LaneChangeAction();

  TrafficAction_LaneChangeAction(const TrafficAction_LaneChangeAction& from);
  TrafficAction_LaneChangeAction(TrafficAction_LaneChangeAction&& from) noexcept
    : TrafficAction_LaneChangeAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_LaneChangeAction& operator=(const TrafficAction_LaneChangeAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_LaneChangeAction& operator=(TrafficAction_LaneChangeAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_LaneChangeAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_LaneChangeAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_LaneChangeAction*>(
               &_TrafficAction_LaneChangeAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TrafficAction_LaneChangeAction& a, TrafficAction_LaneChangeAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_LaneChangeAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_LaneChangeAction* New() const final {
    return CreateMaybeMessage<TrafficAction_LaneChangeAction>(nullptr);
  }

  TrafficAction_LaneChangeAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_LaneChangeAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_LaneChangeAction& from);
  void MergeFrom(const TrafficAction_LaneChangeAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_LaneChangeAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.LaneChangeAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionHeaderFieldNumber = 1,
    kRelativeTargetLaneFieldNumber = 2,
    kDynamicsShapeFieldNumber = 3,
    kDurationFieldNumber = 4,
    kDistanceFieldNumber = 5,
  };
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional int32 relative_target_lane = 2;
  bool has_relative_target_lane() const;
  private:
  bool _internal_has_relative_target_lane() const;
  public:
  void clear_relative_target_lane();
  ::PROTOBUF_NAMESPACE_ID::int32 relative_target_lane() const;
  void set_relative_target_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relative_target_lane() const;
  void _internal_set_relative_target_lane(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
  bool has_dynamics_shape() const;
  private:
  bool _internal_has_dynamics_shape() const;
  public:
  void clear_dynamics_shape();
  ::osi3::TrafficAction_DynamicsShape dynamics_shape() const;
  void set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value);
  private:
  ::osi3::TrafficAction_DynamicsShape _internal_dynamics_shape() const;
  void _internal_set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value);
  public:

  // optional double duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional double distance = 5;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.LaneChangeAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  ::PROTOBUF_NAMESPACE_ID::int32 relative_target_lane_;
  int dynamics_shape_;
  double duration_;
  double distance_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_SpeedAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.SpeedAction) */ {
 public:
  TrafficAction_SpeedAction();
  virtual ~TrafficAction_SpeedAction();

  TrafficAction_SpeedAction(const TrafficAction_SpeedAction& from);
  TrafficAction_SpeedAction(TrafficAction_SpeedAction&& from) noexcept
    : TrafficAction_SpeedAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_SpeedAction& operator=(const TrafficAction_SpeedAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_SpeedAction& operator=(TrafficAction_SpeedAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_SpeedAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_SpeedAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_SpeedAction*>(
               &_TrafficAction_SpeedAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrafficAction_SpeedAction& a, TrafficAction_SpeedAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_SpeedAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_SpeedAction* New() const final {
    return CreateMaybeMessage<TrafficAction_SpeedAction>(nullptr);
  }

  TrafficAction_SpeedAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_SpeedAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_SpeedAction& from);
  void MergeFrom(const TrafficAction_SpeedAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_SpeedAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.SpeedAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionHeaderFieldNumber = 1,
    kAbsoluteTargetSpeedFieldNumber = 2,
    kDurationFieldNumber = 4,
    kDistanceFieldNumber = 5,
    kDynamicsShapeFieldNumber = 3,
  };
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional double absolute_target_speed = 2;
  bool has_absolute_target_speed() const;
  private:
  bool _internal_has_absolute_target_speed() const;
  public:
  void clear_absolute_target_speed();
  double absolute_target_speed() const;
  void set_absolute_target_speed(double value);
  private:
  double _internal_absolute_target_speed() const;
  void _internal_set_absolute_target_speed(double value);
  public:

  // optional double duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // optional double distance = 5;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
  bool has_dynamics_shape() const;
  private:
  bool _internal_has_dynamics_shape() const;
  public:
  void clear_dynamics_shape();
  ::osi3::TrafficAction_DynamicsShape dynamics_shape() const;
  void set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value);
  private:
  ::osi3::TrafficAction_DynamicsShape _internal_dynamics_shape() const;
  void _internal_set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.SpeedAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  double absolute_target_speed_;
  double duration_;
  double distance_;
  int dynamics_shape_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_AbortActionsAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.AbortActionsAction) */ {
 public:
  TrafficAction_AbortActionsAction();
  virtual ~TrafficAction_AbortActionsAction();

  TrafficAction_AbortActionsAction(const TrafficAction_AbortActionsAction& from);
  TrafficAction_AbortActionsAction(TrafficAction_AbortActionsAction&& from) noexcept
    : TrafficAction_AbortActionsAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_AbortActionsAction& operator=(const TrafficAction_AbortActionsAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_AbortActionsAction& operator=(TrafficAction_AbortActionsAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_AbortActionsAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_AbortActionsAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_AbortActionsAction*>(
               &_TrafficAction_AbortActionsAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TrafficAction_AbortActionsAction& a, TrafficAction_AbortActionsAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_AbortActionsAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_AbortActionsAction* New() const final {
    return CreateMaybeMessage<TrafficAction_AbortActionsAction>(nullptr);
  }

  TrafficAction_AbortActionsAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_AbortActionsAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_AbortActionsAction& from);
  void MergeFrom(const TrafficAction_AbortActionsAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_AbortActionsAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.AbortActionsAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetActionIdFieldNumber = 2,
    kActionHeaderFieldNumber = 1,
  };
  // repeated .osi3.Identifier target_action_id = 2;
  int target_action_id_size() const;
  private:
  int _internal_target_action_id_size() const;
  public:
  void clear_target_action_id();
  ::osi3::Identifier* mutable_target_action_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
      mutable_target_action_id();
  private:
  const ::osi3::Identifier& _internal_target_action_id(int index) const;
  ::osi3::Identifier* _internal_add_target_action_id();
  public:
  const ::osi3::Identifier& target_action_id(int index) const;
  ::osi3::Identifier* add_target_action_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
      target_action_id() const;

  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.AbortActionsAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier > target_action_id_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_EndActionsAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.EndActionsAction) */ {
 public:
  TrafficAction_EndActionsAction();
  virtual ~TrafficAction_EndActionsAction();

  TrafficAction_EndActionsAction(const TrafficAction_EndActionsAction& from);
  TrafficAction_EndActionsAction(TrafficAction_EndActionsAction&& from) noexcept
    : TrafficAction_EndActionsAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_EndActionsAction& operator=(const TrafficAction_EndActionsAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_EndActionsAction& operator=(TrafficAction_EndActionsAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_EndActionsAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_EndActionsAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_EndActionsAction*>(
               &_TrafficAction_EndActionsAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TrafficAction_EndActionsAction& a, TrafficAction_EndActionsAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_EndActionsAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_EndActionsAction* New() const final {
    return CreateMaybeMessage<TrafficAction_EndActionsAction>(nullptr);
  }

  TrafficAction_EndActionsAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_EndActionsAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_EndActionsAction& from);
  void MergeFrom(const TrafficAction_EndActionsAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_EndActionsAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.EndActionsAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetActionIdFieldNumber = 2,
    kActionHeaderFieldNumber = 1,
  };
  // repeated .osi3.Identifier target_action_id = 2;
  int target_action_id_size() const;
  private:
  int _internal_target_action_id_size() const;
  public:
  void clear_target_action_id();
  ::osi3::Identifier* mutable_target_action_id(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
      mutable_target_action_id();
  private:
  const ::osi3::Identifier& _internal_target_action_id(int index) const;
  ::osi3::Identifier* _internal_add_target_action_id();
  public:
  const ::osi3::Identifier& target_action_id(int index) const;
  ::osi3::Identifier* add_target_action_id();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
      target_action_id() const;

  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.EndActionsAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier > target_action_id_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_CustomAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.CustomAction) */ {
 public:
  TrafficAction_CustomAction();
  virtual ~TrafficAction_CustomAction();

  TrafficAction_CustomAction(const TrafficAction_CustomAction& from);
  TrafficAction_CustomAction(TrafficAction_CustomAction&& from) noexcept
    : TrafficAction_CustomAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_CustomAction& operator=(const TrafficAction_CustomAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_CustomAction& operator=(TrafficAction_CustomAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_CustomAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_CustomAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_CustomAction*>(
               &_TrafficAction_CustomAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TrafficAction_CustomAction& a, TrafficAction_CustomAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_CustomAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_CustomAction* New() const final {
    return CreateMaybeMessage<TrafficAction_CustomAction>(nullptr);
  }

  TrafficAction_CustomAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_CustomAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_CustomAction& from);
  void MergeFrom(const TrafficAction_CustomAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_CustomAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.CustomAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 2,
    kCommandTypeFieldNumber = 3,
    kActionHeaderFieldNumber = 1,
  };
  // optional string command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const std::string& command() const;
  void set_command(const std::string& value);
  void set_command(std::string&& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  std::string* mutable_command();
  std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // optional string command_type = 3;
  bool has_command_type() const;
  private:
  bool _internal_has_command_type() const;
  public:
  void clear_command_type();
  const std::string& command_type() const;
  void set_command_type(const std::string& value);
  void set_command_type(std::string&& value);
  void set_command_type(const char* value);
  void set_command_type(const char* value, size_t size);
  std::string* mutable_command_type();
  std::string* release_command_type();
  void set_allocated_command_type(std::string* command_type);
  private:
  const std::string& _internal_command_type() const;
  void _internal_set_command_type(const std::string& value);
  std::string* _internal_mutable_command_type();
  public:

  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.CustomAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_type_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_LongitudinalDistanceAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.LongitudinalDistanceAction) */ {
 public:
  TrafficAction_LongitudinalDistanceAction();
  virtual ~TrafficAction_LongitudinalDistanceAction();

  TrafficAction_LongitudinalDistanceAction(const TrafficAction_LongitudinalDistanceAction& from);
  TrafficAction_LongitudinalDistanceAction(TrafficAction_LongitudinalDistanceAction&& from) noexcept
    : TrafficAction_LongitudinalDistanceAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_LongitudinalDistanceAction& operator=(const TrafficAction_LongitudinalDistanceAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_LongitudinalDistanceAction& operator=(TrafficAction_LongitudinalDistanceAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_LongitudinalDistanceAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_LongitudinalDistanceAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_LongitudinalDistanceAction*>(
               &_TrafficAction_LongitudinalDistanceAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TrafficAction_LongitudinalDistanceAction& a, TrafficAction_LongitudinalDistanceAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_LongitudinalDistanceAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_LongitudinalDistanceAction* New() const final {
    return CreateMaybeMessage<TrafficAction_LongitudinalDistanceAction>(nullptr);
  }

  TrafficAction_LongitudinalDistanceAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_LongitudinalDistanceAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_LongitudinalDistanceAction& from);
  void MergeFrom(const TrafficAction_LongitudinalDistanceAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_LongitudinalDistanceAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.LongitudinalDistanceAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionHeaderFieldNumber = 1,
    kTargetTrafficParticipantIdFieldNumber = 2,
    kDynamicConstraintsFieldNumber = 6,
    kDistanceFieldNumber = 3,
    kFreespaceFieldNumber = 4,
    kFollowFieldNumber = 5,
  };
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional .osi3.Identifier target_traffic_participant_id = 2;
  bool has_target_traffic_participant_id() const;
  private:
  bool _internal_has_target_traffic_participant_id() const;
  public:
  void clear_target_traffic_participant_id();
  const ::osi3::Identifier& target_traffic_participant_id() const;
  ::osi3::Identifier* release_target_traffic_participant_id();
  ::osi3::Identifier* mutable_target_traffic_participant_id();
  void set_allocated_target_traffic_participant_id(::osi3::Identifier* target_traffic_participant_id);
  private:
  const ::osi3::Identifier& _internal_target_traffic_participant_id() const;
  ::osi3::Identifier* _internal_mutable_target_traffic_participant_id();
  public:

  // optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
  bool has_dynamic_constraints() const;
  private:
  bool _internal_has_dynamic_constraints() const;
  public:
  void clear_dynamic_constraints();
  const ::osi3::TrafficAction_DynamicConstraints& dynamic_constraints() const;
  ::osi3::TrafficAction_DynamicConstraints* release_dynamic_constraints();
  ::osi3::TrafficAction_DynamicConstraints* mutable_dynamic_constraints();
  void set_allocated_dynamic_constraints(::osi3::TrafficAction_DynamicConstraints* dynamic_constraints);
  private:
  const ::osi3::TrafficAction_DynamicConstraints& _internal_dynamic_constraints() const;
  ::osi3::TrafficAction_DynamicConstraints* _internal_mutable_dynamic_constraints();
  public:

  // optional double distance = 3;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // optional bool freespace = 4;
  bool has_freespace() const;
  private:
  bool _internal_has_freespace() const;
  public:
  void clear_freespace();
  bool freespace() const;
  void set_freespace(bool value);
  private:
  bool _internal_freespace() const;
  void _internal_set_freespace(bool value);
  public:

  // optional bool follow = 5;
  bool has_follow() const;
  private:
  bool _internal_has_follow() const;
  public:
  void clear_follow();
  bool follow() const;
  void set_follow(bool value);
  private:
  bool _internal_follow() const;
  void _internal_set_follow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.LongitudinalDistanceAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  ::osi3::Identifier* target_traffic_participant_id_;
  ::osi3::TrafficAction_DynamicConstraints* dynamic_constraints_;
  double distance_;
  bool freespace_;
  bool follow_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_LateralDistanceAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.LateralDistanceAction) */ {
 public:
  TrafficAction_LateralDistanceAction();
  virtual ~TrafficAction_LateralDistanceAction();

  TrafficAction_LateralDistanceAction(const TrafficAction_LateralDistanceAction& from);
  TrafficAction_LateralDistanceAction(TrafficAction_LateralDistanceAction&& from) noexcept
    : TrafficAction_LateralDistanceAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_LateralDistanceAction& operator=(const TrafficAction_LateralDistanceAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_LateralDistanceAction& operator=(TrafficAction_LateralDistanceAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_LateralDistanceAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_LateralDistanceAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_LateralDistanceAction*>(
               &_TrafficAction_LateralDistanceAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TrafficAction_LateralDistanceAction& a, TrafficAction_LateralDistanceAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_LateralDistanceAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_LateralDistanceAction* New() const final {
    return CreateMaybeMessage<TrafficAction_LateralDistanceAction>(nullptr);
  }

  TrafficAction_LateralDistanceAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_LateralDistanceAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_LateralDistanceAction& from);
  void MergeFrom(const TrafficAction_LateralDistanceAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_LateralDistanceAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.LateralDistanceAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionHeaderFieldNumber = 1,
    kTargetTrafficParticipantIdFieldNumber = 2,
    kDynamicConstraintsFieldNumber = 6,
    kDistanceFieldNumber = 3,
    kFreespaceFieldNumber = 4,
    kFollowFieldNumber = 5,
  };
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional .osi3.Identifier target_traffic_participant_id = 2;
  bool has_target_traffic_participant_id() const;
  private:
  bool _internal_has_target_traffic_participant_id() const;
  public:
  void clear_target_traffic_participant_id();
  const ::osi3::Identifier& target_traffic_participant_id() const;
  ::osi3::Identifier* release_target_traffic_participant_id();
  ::osi3::Identifier* mutable_target_traffic_participant_id();
  void set_allocated_target_traffic_participant_id(::osi3::Identifier* target_traffic_participant_id);
  private:
  const ::osi3::Identifier& _internal_target_traffic_participant_id() const;
  ::osi3::Identifier* _internal_mutable_target_traffic_participant_id();
  public:

  // optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
  bool has_dynamic_constraints() const;
  private:
  bool _internal_has_dynamic_constraints() const;
  public:
  void clear_dynamic_constraints();
  const ::osi3::TrafficAction_DynamicConstraints& dynamic_constraints() const;
  ::osi3::TrafficAction_DynamicConstraints* release_dynamic_constraints();
  ::osi3::TrafficAction_DynamicConstraints* mutable_dynamic_constraints();
  void set_allocated_dynamic_constraints(::osi3::TrafficAction_DynamicConstraints* dynamic_constraints);
  private:
  const ::osi3::TrafficAction_DynamicConstraints& _internal_dynamic_constraints() const;
  ::osi3::TrafficAction_DynamicConstraints* _internal_mutable_dynamic_constraints();
  public:

  // optional double distance = 3;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // optional bool freespace = 4;
  bool has_freespace() const;
  private:
  bool _internal_has_freespace() const;
  public:
  void clear_freespace();
  bool freespace() const;
  void set_freespace(bool value);
  private:
  bool _internal_freespace() const;
  void _internal_set_freespace(bool value);
  public:

  // optional bool follow = 5;
  bool has_follow() const;
  private:
  bool _internal_has_follow() const;
  public:
  void clear_follow();
  bool follow() const;
  void set_follow(bool value);
  private:
  bool _internal_follow() const;
  void _internal_set_follow(bool value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.LateralDistanceAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  ::osi3::Identifier* target_traffic_participant_id_;
  ::osi3::TrafficAction_DynamicConstraints* dynamic_constraints_;
  double distance_;
  bool freespace_;
  bool follow_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_LaneOffsetAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.LaneOffsetAction) */ {
 public:
  TrafficAction_LaneOffsetAction();
  virtual ~TrafficAction_LaneOffsetAction();

  TrafficAction_LaneOffsetAction(const TrafficAction_LaneOffsetAction& from);
  TrafficAction_LaneOffsetAction(TrafficAction_LaneOffsetAction&& from) noexcept
    : TrafficAction_LaneOffsetAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_LaneOffsetAction& operator=(const TrafficAction_LaneOffsetAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_LaneOffsetAction& operator=(TrafficAction_LaneOffsetAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_LaneOffsetAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_LaneOffsetAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_LaneOffsetAction*>(
               &_TrafficAction_LaneOffsetAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TrafficAction_LaneOffsetAction& a, TrafficAction_LaneOffsetAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_LaneOffsetAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_LaneOffsetAction* New() const final {
    return CreateMaybeMessage<TrafficAction_LaneOffsetAction>(nullptr);
  }

  TrafficAction_LaneOffsetAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_LaneOffsetAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_LaneOffsetAction& from);
  void MergeFrom(const TrafficAction_LaneOffsetAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_LaneOffsetAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.LaneOffsetAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionHeaderFieldNumber = 1,
    kTargetLaneOffsetFieldNumber = 2,
    kDynamicsShapeFieldNumber = 3,
  };
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional double target_lane_offset = 2;
  bool has_target_lane_offset() const;
  private:
  bool _internal_has_target_lane_offset() const;
  public:
  void clear_target_lane_offset();
  double target_lane_offset() const;
  void set_target_lane_offset(double value);
  private:
  double _internal_target_lane_offset() const;
  void _internal_set_target_lane_offset(double value);
  public:

  // optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
  bool has_dynamics_shape() const;
  private:
  bool _internal_has_dynamics_shape() const;
  public:
  void clear_dynamics_shape();
  ::osi3::TrafficAction_DynamicsShape dynamics_shape() const;
  void set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value);
  private:
  ::osi3::TrafficAction_DynamicsShape _internal_dynamics_shape() const;
  void _internal_set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.LaneOffsetAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  double target_lane_offset_;
  int dynamics_shape_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction_TeleportAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction.TeleportAction) */ {
 public:
  TrafficAction_TeleportAction();
  virtual ~TrafficAction_TeleportAction();

  TrafficAction_TeleportAction(const TrafficAction_TeleportAction& from);
  TrafficAction_TeleportAction(TrafficAction_TeleportAction&& from) noexcept
    : TrafficAction_TeleportAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction_TeleportAction& operator=(const TrafficAction_TeleportAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction_TeleportAction& operator=(TrafficAction_TeleportAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction_TeleportAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction_TeleportAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction_TeleportAction*>(
               &_TrafficAction_TeleportAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TrafficAction_TeleportAction& a, TrafficAction_TeleportAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction_TeleportAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction_TeleportAction* New() const final {
    return CreateMaybeMessage<TrafficAction_TeleportAction>(nullptr);
  }

  TrafficAction_TeleportAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction_TeleportAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction_TeleportAction& from);
  void MergeFrom(const TrafficAction_TeleportAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction_TeleportAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction.TeleportAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionHeaderFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
  };
  // optional .osi3.TrafficAction.ActionHeader action_header = 1;
  bool has_action_header() const;
  private:
  bool _internal_has_action_header() const;
  public:
  void clear_action_header();
  const ::osi3::TrafficAction_ActionHeader& action_header() const;
  ::osi3::TrafficAction_ActionHeader* release_action_header();
  ::osi3::TrafficAction_ActionHeader* mutable_action_header();
  void set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header);
  private:
  const ::osi3::TrafficAction_ActionHeader& _internal_action_header() const;
  ::osi3::TrafficAction_ActionHeader* _internal_mutable_action_header();
  public:

  // optional .osi3.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:

  // optional .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction.TeleportAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficAction_ActionHeader* action_header_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// -------------------------------------------------------------------

class TrafficAction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.TrafficAction) */ {
 public:
  TrafficAction();
  virtual ~TrafficAction();

  TrafficAction(const TrafficAction& from);
  TrafficAction(TrafficAction&& from) noexcept
    : TrafficAction() {
    *this = ::std::move(from);
  }

  inline TrafficAction& operator=(const TrafficAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficAction& operator=(TrafficAction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrafficAction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrafficAction* internal_default_instance() {
    return reinterpret_cast<const TrafficAction*>(
               &_TrafficAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TrafficAction& a, TrafficAction& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficAction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficAction* New() const final {
    return CreateMaybeMessage<TrafficAction>(nullptr);
  }

  TrafficAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrafficAction& from);
  void MergeFrom(const TrafficAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.TrafficAction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5ftrafficcommand_2eproto);
    return ::descriptor_table_osi_5ftrafficcommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrafficAction_ActionHeader ActionHeader;
  typedef TrafficAction_DynamicConstraints DynamicConstraints;
  typedef TrafficAction_FollowTrajectoryAction FollowTrajectoryAction;
  typedef TrafficAction_FollowPathAction FollowPathAction;
  typedef TrafficAction_AcquireGlobalPositionAction AcquireGlobalPositionAction;
  typedef TrafficAction_LaneChangeAction LaneChangeAction;
  typedef TrafficAction_SpeedAction SpeedAction;
  typedef TrafficAction_AbortActionsAction AbortActionsAction;
  typedef TrafficAction_EndActionsAction EndActionsAction;
  typedef TrafficAction_CustomAction CustomAction;
  typedef TrafficAction_LongitudinalDistanceAction LongitudinalDistanceAction;
  typedef TrafficAction_LateralDistanceAction LateralDistanceAction;
  typedef TrafficAction_LaneOffsetAction LaneOffsetAction;
  typedef TrafficAction_TeleportAction TeleportAction;

  typedef TrafficAction_FollowingMode FollowingMode;
  static constexpr FollowingMode FOLLOWING_MODE_POSITION =
    TrafficAction_FollowingMode_FOLLOWING_MODE_POSITION;
  static constexpr FollowingMode FOLLOWING_MODE_FOLLOW =
    TrafficAction_FollowingMode_FOLLOWING_MODE_FOLLOW;
  static inline bool FollowingMode_IsValid(int value) {
    return TrafficAction_FollowingMode_IsValid(value);
  }
  static constexpr FollowingMode FollowingMode_MIN =
    TrafficAction_FollowingMode_FollowingMode_MIN;
  static constexpr FollowingMode FollowingMode_MAX =
    TrafficAction_FollowingMode_FollowingMode_MAX;
  static constexpr int FollowingMode_ARRAYSIZE =
    TrafficAction_FollowingMode_FollowingMode_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FollowingMode_descriptor() {
    return TrafficAction_FollowingMode_descriptor();
  }
  template<typename T>
  static inline const std::string& FollowingMode_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FollowingMode>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FollowingMode_Name.");
    return TrafficAction_FollowingMode_Name(enum_t_value);
  }
  static inline bool FollowingMode_Parse(const std::string& name,
      FollowingMode* value) {
    return TrafficAction_FollowingMode_Parse(name, value);
  }

  typedef TrafficAction_DynamicsShape DynamicsShape;
  static constexpr DynamicsShape DYNAMICS_SHAPE_UNSPECIFIED =
    TrafficAction_DynamicsShape_DYNAMICS_SHAPE_UNSPECIFIED;
  static constexpr DynamicsShape DYNAMICS_SHAPE_LINEAR =
    TrafficAction_DynamicsShape_DYNAMICS_SHAPE_LINEAR;
  static constexpr DynamicsShape DYNAMICS_SHAPE_CUBIC =
    TrafficAction_DynamicsShape_DYNAMICS_SHAPE_CUBIC;
  static constexpr DynamicsShape DYNAMICS_SHAPE_SINUSOIDAL =
    TrafficAction_DynamicsShape_DYNAMICS_SHAPE_SINUSOIDAL;
  static constexpr DynamicsShape DYNAMICS_SHAPE_STEP =
    TrafficAction_DynamicsShape_DYNAMICS_SHAPE_STEP;
  static inline bool DynamicsShape_IsValid(int value) {
    return TrafficAction_DynamicsShape_IsValid(value);
  }
  static constexpr DynamicsShape DynamicsShape_MIN =
    TrafficAction_DynamicsShape_DynamicsShape_MIN;
  static constexpr DynamicsShape DynamicsShape_MAX =
    TrafficAction_DynamicsShape_DynamicsShape_MAX;
  static constexpr int DynamicsShape_ARRAYSIZE =
    TrafficAction_DynamicsShape_DynamicsShape_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DynamicsShape_descriptor() {
    return TrafficAction_DynamicsShape_descriptor();
  }
  template<typename T>
  static inline const std::string& DynamicsShape_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DynamicsShape>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DynamicsShape_Name.");
    return TrafficAction_DynamicsShape_Name(enum_t_value);
  }
  static inline bool DynamicsShape_Parse(const std::string& name,
      DynamicsShape* value) {
    return TrafficAction_DynamicsShape_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFollowTrajectoryActionFieldNumber = 1,
    kFollowPathActionFieldNumber = 2,
    kAcquireGlobalPositionActionFieldNumber = 3,
    kLaneChangeActionFieldNumber = 4,
    kSpeedActionFieldNumber = 5,
    kAbortActionsActionFieldNumber = 6,
    kEndActionsActionFieldNumber = 7,
    kCustomActionFieldNumber = 8,
    kLongitudinalDistanceActionFieldNumber = 9,
    kLaneOffsetActionFieldNumber = 10,
    kLateralDistanceActionFieldNumber = 11,
    kTeleportActionFieldNumber = 12,
  };
  // optional .osi3.TrafficAction.FollowTrajectoryAction follow_trajectory_action = 1;
  bool has_follow_trajectory_action() const;
  private:
  bool _internal_has_follow_trajectory_action() const;
  public:
  void clear_follow_trajectory_action();
  const ::osi3::TrafficAction_FollowTrajectoryAction& follow_trajectory_action() const;
  ::osi3::TrafficAction_FollowTrajectoryAction* release_follow_trajectory_action();
  ::osi3::TrafficAction_FollowTrajectoryAction* mutable_follow_trajectory_action();
  void set_allocated_follow_trajectory_action(::osi3::TrafficAction_FollowTrajectoryAction* follow_trajectory_action);
  private:
  const ::osi3::TrafficAction_FollowTrajectoryAction& _internal_follow_trajectory_action() const;
  ::osi3::TrafficAction_FollowTrajectoryAction* _internal_mutable_follow_trajectory_action();
  public:

  // optional .osi3.TrafficAction.FollowPathAction follow_path_action = 2;
  bool has_follow_path_action() const;
  private:
  bool _internal_has_follow_path_action() const;
  public:
  void clear_follow_path_action();
  const ::osi3::TrafficAction_FollowPathAction& follow_path_action() const;
  ::osi3::TrafficAction_FollowPathAction* release_follow_path_action();
  ::osi3::TrafficAction_FollowPathAction* mutable_follow_path_action();
  void set_allocated_follow_path_action(::osi3::TrafficAction_FollowPathAction* follow_path_action);
  private:
  const ::osi3::TrafficAction_FollowPathAction& _internal_follow_path_action() const;
  ::osi3::TrafficAction_FollowPathAction* _internal_mutable_follow_path_action();
  public:

  // optional .osi3.TrafficAction.AcquireGlobalPositionAction acquire_global_position_action = 3;
  bool has_acquire_global_position_action() const;
  private:
  bool _internal_has_acquire_global_position_action() const;
  public:
  void clear_acquire_global_position_action();
  const ::osi3::TrafficAction_AcquireGlobalPositionAction& acquire_global_position_action() const;
  ::osi3::TrafficAction_AcquireGlobalPositionAction* release_acquire_global_position_action();
  ::osi3::TrafficAction_AcquireGlobalPositionAction* mutable_acquire_global_position_action();
  void set_allocated_acquire_global_position_action(::osi3::TrafficAction_AcquireGlobalPositionAction* acquire_global_position_action);
  private:
  const ::osi3::TrafficAction_AcquireGlobalPositionAction& _internal_acquire_global_position_action() const;
  ::osi3::TrafficAction_AcquireGlobalPositionAction* _internal_mutable_acquire_global_position_action();
  public:

  // optional .osi3.TrafficAction.LaneChangeAction lane_change_action = 4;
  bool has_lane_change_action() const;
  private:
  bool _internal_has_lane_change_action() const;
  public:
  void clear_lane_change_action();
  const ::osi3::TrafficAction_LaneChangeAction& lane_change_action() const;
  ::osi3::TrafficAction_LaneChangeAction* release_lane_change_action();
  ::osi3::TrafficAction_LaneChangeAction* mutable_lane_change_action();
  void set_allocated_lane_change_action(::osi3::TrafficAction_LaneChangeAction* lane_change_action);
  private:
  const ::osi3::TrafficAction_LaneChangeAction& _internal_lane_change_action() const;
  ::osi3::TrafficAction_LaneChangeAction* _internal_mutable_lane_change_action();
  public:

  // optional .osi3.TrafficAction.SpeedAction speed_action = 5;
  bool has_speed_action() const;
  private:
  bool _internal_has_speed_action() const;
  public:
  void clear_speed_action();
  const ::osi3::TrafficAction_SpeedAction& speed_action() const;
  ::osi3::TrafficAction_SpeedAction* release_speed_action();
  ::osi3::TrafficAction_SpeedAction* mutable_speed_action();
  void set_allocated_speed_action(::osi3::TrafficAction_SpeedAction* speed_action);
  private:
  const ::osi3::TrafficAction_SpeedAction& _internal_speed_action() const;
  ::osi3::TrafficAction_SpeedAction* _internal_mutable_speed_action();
  public:

  // optional .osi3.TrafficAction.AbortActionsAction abort_actions_action = 6;
  bool has_abort_actions_action() const;
  private:
  bool _internal_has_abort_actions_action() const;
  public:
  void clear_abort_actions_action();
  const ::osi3::TrafficAction_AbortActionsAction& abort_actions_action() const;
  ::osi3::TrafficAction_AbortActionsAction* release_abort_actions_action();
  ::osi3::TrafficAction_AbortActionsAction* mutable_abort_actions_action();
  void set_allocated_abort_actions_action(::osi3::TrafficAction_AbortActionsAction* abort_actions_action);
  private:
  const ::osi3::TrafficAction_AbortActionsAction& _internal_abort_actions_action() const;
  ::osi3::TrafficAction_AbortActionsAction* _internal_mutable_abort_actions_action();
  public:

  // optional .osi3.TrafficAction.EndActionsAction end_actions_action = 7;
  bool has_end_actions_action() const;
  private:
  bool _internal_has_end_actions_action() const;
  public:
  void clear_end_actions_action();
  const ::osi3::TrafficAction_EndActionsAction& end_actions_action() const;
  ::osi3::TrafficAction_EndActionsAction* release_end_actions_action();
  ::osi3::TrafficAction_EndActionsAction* mutable_end_actions_action();
  void set_allocated_end_actions_action(::osi3::TrafficAction_EndActionsAction* end_actions_action);
  private:
  const ::osi3::TrafficAction_EndActionsAction& _internal_end_actions_action() const;
  ::osi3::TrafficAction_EndActionsAction* _internal_mutable_end_actions_action();
  public:

  // optional .osi3.TrafficAction.CustomAction custom_action = 8;
  bool has_custom_action() const;
  private:
  bool _internal_has_custom_action() const;
  public:
  void clear_custom_action();
  const ::osi3::TrafficAction_CustomAction& custom_action() const;
  ::osi3::TrafficAction_CustomAction* release_custom_action();
  ::osi3::TrafficAction_CustomAction* mutable_custom_action();
  void set_allocated_custom_action(::osi3::TrafficAction_CustomAction* custom_action);
  private:
  const ::osi3::TrafficAction_CustomAction& _internal_custom_action() const;
  ::osi3::TrafficAction_CustomAction* _internal_mutable_custom_action();
  public:

  // optional .osi3.TrafficAction.LongitudinalDistanceAction longitudinal_distance_action = 9;
  bool has_longitudinal_distance_action() const;
  private:
  bool _internal_has_longitudinal_distance_action() const;
  public:
  void clear_longitudinal_distance_action();
  const ::osi3::TrafficAction_LongitudinalDistanceAction& longitudinal_distance_action() const;
  ::osi3::TrafficAction_LongitudinalDistanceAction* release_longitudinal_distance_action();
  ::osi3::TrafficAction_LongitudinalDistanceAction* mutable_longitudinal_distance_action();
  void set_allocated_longitudinal_distance_action(::osi3::TrafficAction_LongitudinalDistanceAction* longitudinal_distance_action);
  private:
  const ::osi3::TrafficAction_LongitudinalDistanceAction& _internal_longitudinal_distance_action() const;
  ::osi3::TrafficAction_LongitudinalDistanceAction* _internal_mutable_longitudinal_distance_action();
  public:

  // optional .osi3.TrafficAction.LaneOffsetAction lane_offset_action = 10;
  bool has_lane_offset_action() const;
  private:
  bool _internal_has_lane_offset_action() const;
  public:
  void clear_lane_offset_action();
  const ::osi3::TrafficAction_LaneOffsetAction& lane_offset_action() const;
  ::osi3::TrafficAction_LaneOffsetAction* release_lane_offset_action();
  ::osi3::TrafficAction_LaneOffsetAction* mutable_lane_offset_action();
  void set_allocated_lane_offset_action(::osi3::TrafficAction_LaneOffsetAction* lane_offset_action);
  private:
  const ::osi3::TrafficAction_LaneOffsetAction& _internal_lane_offset_action() const;
  ::osi3::TrafficAction_LaneOffsetAction* _internal_mutable_lane_offset_action();
  public:

  // optional .osi3.TrafficAction.LateralDistanceAction lateral_distance_action = 11;
  bool has_lateral_distance_action() const;
  private:
  bool _internal_has_lateral_distance_action() const;
  public:
  void clear_lateral_distance_action();
  const ::osi3::TrafficAction_LateralDistanceAction& lateral_distance_action() const;
  ::osi3::TrafficAction_LateralDistanceAction* release_lateral_distance_action();
  ::osi3::TrafficAction_LateralDistanceAction* mutable_lateral_distance_action();
  void set_allocated_lateral_distance_action(::osi3::TrafficAction_LateralDistanceAction* lateral_distance_action);
  private:
  const ::osi3::TrafficAction_LateralDistanceAction& _internal_lateral_distance_action() const;
  ::osi3::TrafficAction_LateralDistanceAction* _internal_mutable_lateral_distance_action();
  public:

  // optional .osi3.TrafficAction.TeleportAction teleport_action = 12;
  bool has_teleport_action() const;
  private:
  bool _internal_has_teleport_action() const;
  public:
  void clear_teleport_action();
  const ::osi3::TrafficAction_TeleportAction& teleport_action() const;
  ::osi3::TrafficAction_TeleportAction* release_teleport_action();
  ::osi3::TrafficAction_TeleportAction* mutable_teleport_action();
  void set_allocated_teleport_action(::osi3::TrafficAction_TeleportAction* teleport_action);
  private:
  const ::osi3::TrafficAction_TeleportAction& _internal_teleport_action() const;
  ::osi3::TrafficAction_TeleportAction* _internal_mutable_teleport_action();
  public:

  // @@protoc_insertion_point(class_scope:osi3.TrafficAction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::osi3::TrafficAction_FollowTrajectoryAction* follow_trajectory_action_;
  ::osi3::TrafficAction_FollowPathAction* follow_path_action_;
  ::osi3::TrafficAction_AcquireGlobalPositionAction* acquire_global_position_action_;
  ::osi3::TrafficAction_LaneChangeAction* lane_change_action_;
  ::osi3::TrafficAction_SpeedAction* speed_action_;
  ::osi3::TrafficAction_AbortActionsAction* abort_actions_action_;
  ::osi3::TrafficAction_EndActionsAction* end_actions_action_;
  ::osi3::TrafficAction_CustomAction* custom_action_;
  ::osi3::TrafficAction_LongitudinalDistanceAction* longitudinal_distance_action_;
  ::osi3::TrafficAction_LaneOffsetAction* lane_offset_action_;
  ::osi3::TrafficAction_LateralDistanceAction* lateral_distance_action_;
  ::osi3::TrafficAction_TeleportAction* teleport_action_;
  friend struct ::TableStruct_osi_5ftrafficcommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrafficCommand

// optional .osi3.InterfaceVersion version = 1;
inline bool TrafficCommand::_internal_has_version() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || version_ != nullptr);
  return value;
}
inline bool TrafficCommand::has_version() const {
  return _internal_has_version();
}
inline const ::osi3::InterfaceVersion& TrafficCommand::_internal_version() const {
  const ::osi3::InterfaceVersion* p = version_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::InterfaceVersion*>(
      &::osi3::_InterfaceVersion_default_instance_);
}
inline const ::osi3::InterfaceVersion& TrafficCommand::version() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficCommand.version)
  return _internal_version();
}
inline ::osi3::InterfaceVersion* TrafficCommand::release_version() {
  // @@protoc_insertion_point(field_release:osi3.TrafficCommand.version)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::InterfaceVersion* temp = version_;
  version_ = nullptr;
  return temp;
}
inline ::osi3::InterfaceVersion* TrafficCommand::_internal_mutable_version() {
  _has_bits_[0] |= 0x00000001u;
  if (version_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::InterfaceVersion>(GetArenaNoVirtual());
    version_ = p;
  }
  return version_;
}
inline ::osi3::InterfaceVersion* TrafficCommand::mutable_version() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficCommand.version)
  return _internal_mutable_version();
}
inline void TrafficCommand::set_allocated_version(::osi3::InterfaceVersion* version) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(version_);
  }
  if (version) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      version = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, version, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  version_ = version;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficCommand.version)
}

// optional .osi3.Timestamp timestamp = 2;
inline bool TrafficCommand::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || timestamp_ != nullptr);
  return value;
}
inline bool TrafficCommand::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const ::osi3::Timestamp& TrafficCommand::_internal_timestamp() const {
  const ::osi3::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Timestamp*>(
      &::osi3::_Timestamp_default_instance_);
}
inline const ::osi3::Timestamp& TrafficCommand::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficCommand.timestamp)
  return _internal_timestamp();
}
inline ::osi3::Timestamp* TrafficCommand::release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.TrafficCommand.timestamp)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* TrafficCommand::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000002u;
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::osi3::Timestamp* TrafficCommand::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficCommand.timestamp)
  return _internal_mutable_timestamp();
}
inline void TrafficCommand::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficCommand.timestamp)
}

// optional .osi3.Identifier traffic_participant_id = 3;
inline bool TrafficCommand::_internal_has_traffic_participant_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || traffic_participant_id_ != nullptr);
  return value;
}
inline bool TrafficCommand::has_traffic_participant_id() const {
  return _internal_has_traffic_participant_id();
}
inline const ::osi3::Identifier& TrafficCommand::_internal_traffic_participant_id() const {
  const ::osi3::Identifier* p = traffic_participant_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& TrafficCommand::traffic_participant_id() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficCommand.traffic_participant_id)
  return _internal_traffic_participant_id();
}
inline ::osi3::Identifier* TrafficCommand::release_traffic_participant_id() {
  // @@protoc_insertion_point(field_release:osi3.TrafficCommand.traffic_participant_id)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::Identifier* temp = traffic_participant_id_;
  traffic_participant_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* TrafficCommand::_internal_mutable_traffic_participant_id() {
  _has_bits_[0] |= 0x00000004u;
  if (traffic_participant_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    traffic_participant_id_ = p;
  }
  return traffic_participant_id_;
}
inline ::osi3::Identifier* TrafficCommand::mutable_traffic_participant_id() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficCommand.traffic_participant_id)
  return _internal_mutable_traffic_participant_id();
}
inline void TrafficCommand::set_allocated_traffic_participant_id(::osi3::Identifier* traffic_participant_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(traffic_participant_id_);
  }
  if (traffic_participant_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      traffic_participant_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, traffic_participant_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  traffic_participant_id_ = traffic_participant_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficCommand.traffic_participant_id)
}

// repeated .osi3.TrafficAction action = 4;
inline int TrafficCommand::_internal_action_size() const {
  return action_.size();
}
inline int TrafficCommand::action_size() const {
  return _internal_action_size();
}
inline void TrafficCommand::clear_action() {
  action_.Clear();
}
inline ::osi3::TrafficAction* TrafficCommand::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficCommand.action)
  return action_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficAction >*
TrafficCommand::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficCommand.action)
  return &action_;
}
inline const ::osi3::TrafficAction& TrafficCommand::_internal_action(int index) const {
  return action_.Get(index);
}
inline const ::osi3::TrafficAction& TrafficCommand::action(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficCommand.action)
  return _internal_action(index);
}
inline ::osi3::TrafficAction* TrafficCommand::_internal_add_action() {
  return action_.Add();
}
inline ::osi3::TrafficAction* TrafficCommand::add_action() {
  // @@protoc_insertion_point(field_add:osi3.TrafficCommand.action)
  return _internal_add_action();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::TrafficAction >&
TrafficCommand::action() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficCommand.action)
  return action_;
}

// -------------------------------------------------------------------

// TrafficAction_ActionHeader

// optional .osi3.Identifier action_id = 1;
inline bool TrafficAction_ActionHeader::_internal_has_action_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_id_ != nullptr);
  return value;
}
inline bool TrafficAction_ActionHeader::has_action_id() const {
  return _internal_has_action_id();
}
inline const ::osi3::Identifier& TrafficAction_ActionHeader::_internal_action_id() const {
  const ::osi3::Identifier* p = action_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& TrafficAction_ActionHeader::action_id() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.ActionHeader.action_id)
  return _internal_action_id();
}
inline ::osi3::Identifier* TrafficAction_ActionHeader::release_action_id() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.ActionHeader.action_id)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::Identifier* temp = action_id_;
  action_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* TrafficAction_ActionHeader::_internal_mutable_action_id() {
  _has_bits_[0] |= 0x00000001u;
  if (action_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    action_id_ = p;
  }
  return action_id_;
}
inline ::osi3::Identifier* TrafficAction_ActionHeader::mutable_action_id() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.ActionHeader.action_id)
  return _internal_mutable_action_id();
}
inline void TrafficAction_ActionHeader::set_allocated_action_id(::osi3::Identifier* action_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_id_);
  }
  if (action_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_id_ = action_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.ActionHeader.action_id)
}

// -------------------------------------------------------------------

// TrafficAction_DynamicConstraints

// optional double max_acceleration = 1;
inline bool TrafficAction_DynamicConstraints::_internal_has_max_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrafficAction_DynamicConstraints::has_max_acceleration() const {
  return _internal_has_max_acceleration();
}
inline void TrafficAction_DynamicConstraints::clear_max_acceleration() {
  max_acceleration_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double TrafficAction_DynamicConstraints::_internal_max_acceleration() const {
  return max_acceleration_;
}
inline double TrafficAction_DynamicConstraints::max_acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.DynamicConstraints.max_acceleration)
  return _internal_max_acceleration();
}
inline void TrafficAction_DynamicConstraints::_internal_set_max_acceleration(double value) {
  _has_bits_[0] |= 0x00000001u;
  max_acceleration_ = value;
}
inline void TrafficAction_DynamicConstraints::set_max_acceleration(double value) {
  _internal_set_max_acceleration(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.DynamicConstraints.max_acceleration)
}

// optional double max_deceleration = 2;
inline bool TrafficAction_DynamicConstraints::_internal_has_max_deceleration() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficAction_DynamicConstraints::has_max_deceleration() const {
  return _internal_has_max_deceleration();
}
inline void TrafficAction_DynamicConstraints::clear_max_deceleration() {
  max_deceleration_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TrafficAction_DynamicConstraints::_internal_max_deceleration() const {
  return max_deceleration_;
}
inline double TrafficAction_DynamicConstraints::max_deceleration() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.DynamicConstraints.max_deceleration)
  return _internal_max_deceleration();
}
inline void TrafficAction_DynamicConstraints::_internal_set_max_deceleration(double value) {
  _has_bits_[0] |= 0x00000002u;
  max_deceleration_ = value;
}
inline void TrafficAction_DynamicConstraints::set_max_deceleration(double value) {
  _internal_set_max_deceleration(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.DynamicConstraints.max_deceleration)
}

// optional double max_speed = 3;
inline bool TrafficAction_DynamicConstraints::_internal_has_max_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficAction_DynamicConstraints::has_max_speed() const {
  return _internal_has_max_speed();
}
inline void TrafficAction_DynamicConstraints::clear_max_speed() {
  max_speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TrafficAction_DynamicConstraints::_internal_max_speed() const {
  return max_speed_;
}
inline double TrafficAction_DynamicConstraints::max_speed() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.DynamicConstraints.max_speed)
  return _internal_max_speed();
}
inline void TrafficAction_DynamicConstraints::_internal_set_max_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  max_speed_ = value;
}
inline void TrafficAction_DynamicConstraints::set_max_speed(double value) {
  _internal_set_max_speed(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.DynamicConstraints.max_speed)
}

// -------------------------------------------------------------------

// TrafficAction_FollowTrajectoryAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_FollowTrajectoryAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_FollowTrajectoryAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_FollowTrajectoryAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_FollowTrajectoryAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_FollowTrajectoryAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.FollowTrajectoryAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_FollowTrajectoryAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.FollowTrajectoryAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_FollowTrajectoryAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_FollowTrajectoryAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.FollowTrajectoryAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_FollowTrajectoryAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.FollowTrajectoryAction.action_header)
}

// repeated .osi3.StatePoint trajectory_point = 2;
inline int TrafficAction_FollowTrajectoryAction::_internal_trajectory_point_size() const {
  return trajectory_point_.size();
}
inline int TrafficAction_FollowTrajectoryAction::trajectory_point_size() const {
  return _internal_trajectory_point_size();
}
inline ::osi3::StatePoint* TrafficAction_FollowTrajectoryAction::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.FollowTrajectoryAction.trajectory_point)
  return trajectory_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >*
TrafficAction_FollowTrajectoryAction::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficAction.FollowTrajectoryAction.trajectory_point)
  return &trajectory_point_;
}
inline const ::osi3::StatePoint& TrafficAction_FollowTrajectoryAction::_internal_trajectory_point(int index) const {
  return trajectory_point_.Get(index);
}
inline const ::osi3::StatePoint& TrafficAction_FollowTrajectoryAction::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.FollowTrajectoryAction.trajectory_point)
  return _internal_trajectory_point(index);
}
inline ::osi3::StatePoint* TrafficAction_FollowTrajectoryAction::_internal_add_trajectory_point() {
  return trajectory_point_.Add();
}
inline ::osi3::StatePoint* TrafficAction_FollowTrajectoryAction::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:osi3.TrafficAction.FollowTrajectoryAction.trajectory_point)
  return _internal_add_trajectory_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >&
TrafficAction_FollowTrajectoryAction::trajectory_point() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficAction.FollowTrajectoryAction.trajectory_point)
  return trajectory_point_;
}

// optional bool constrain_orientation = 3;
inline bool TrafficAction_FollowTrajectoryAction::_internal_has_constrain_orientation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficAction_FollowTrajectoryAction::has_constrain_orientation() const {
  return _internal_has_constrain_orientation();
}
inline void TrafficAction_FollowTrajectoryAction::clear_constrain_orientation() {
  constrain_orientation_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TrafficAction_FollowTrajectoryAction::_internal_constrain_orientation() const {
  return constrain_orientation_;
}
inline bool TrafficAction_FollowTrajectoryAction::constrain_orientation() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.FollowTrajectoryAction.constrain_orientation)
  return _internal_constrain_orientation();
}
inline void TrafficAction_FollowTrajectoryAction::_internal_set_constrain_orientation(bool value) {
  _has_bits_[0] |= 0x00000002u;
  constrain_orientation_ = value;
}
inline void TrafficAction_FollowTrajectoryAction::set_constrain_orientation(bool value) {
  _internal_set_constrain_orientation(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.FollowTrajectoryAction.constrain_orientation)
}

// optional .osi3.TrafficAction.FollowingMode following_mode = 4;
inline bool TrafficAction_FollowTrajectoryAction::_internal_has_following_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficAction_FollowTrajectoryAction::has_following_mode() const {
  return _internal_has_following_mode();
}
inline void TrafficAction_FollowTrajectoryAction::clear_following_mode() {
  following_mode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::osi3::TrafficAction_FollowingMode TrafficAction_FollowTrajectoryAction::_internal_following_mode() const {
  return static_cast< ::osi3::TrafficAction_FollowingMode >(following_mode_);
}
inline ::osi3::TrafficAction_FollowingMode TrafficAction_FollowTrajectoryAction::following_mode() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.FollowTrajectoryAction.following_mode)
  return _internal_following_mode();
}
inline void TrafficAction_FollowTrajectoryAction::_internal_set_following_mode(::osi3::TrafficAction_FollowingMode value) {
  assert(::osi3::TrafficAction_FollowingMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  following_mode_ = value;
}
inline void TrafficAction_FollowTrajectoryAction::set_following_mode(::osi3::TrafficAction_FollowingMode value) {
  _internal_set_following_mode(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.FollowTrajectoryAction.following_mode)
}

// -------------------------------------------------------------------

// TrafficAction_FollowPathAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_FollowPathAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_FollowPathAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_FollowPathAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_FollowPathAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_FollowPathAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.FollowPathAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_FollowPathAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.FollowPathAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_FollowPathAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_FollowPathAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.FollowPathAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_FollowPathAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.FollowPathAction.action_header)
}

// repeated .osi3.StatePoint path_point = 2;
inline int TrafficAction_FollowPathAction::_internal_path_point_size() const {
  return path_point_.size();
}
inline int TrafficAction_FollowPathAction::path_point_size() const {
  return _internal_path_point_size();
}
inline ::osi3::StatePoint* TrafficAction_FollowPathAction::mutable_path_point(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.FollowPathAction.path_point)
  return path_point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >*
TrafficAction_FollowPathAction::mutable_path_point() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficAction.FollowPathAction.path_point)
  return &path_point_;
}
inline const ::osi3::StatePoint& TrafficAction_FollowPathAction::_internal_path_point(int index) const {
  return path_point_.Get(index);
}
inline const ::osi3::StatePoint& TrafficAction_FollowPathAction::path_point(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.FollowPathAction.path_point)
  return _internal_path_point(index);
}
inline ::osi3::StatePoint* TrafficAction_FollowPathAction::_internal_add_path_point() {
  return path_point_.Add();
}
inline ::osi3::StatePoint* TrafficAction_FollowPathAction::add_path_point() {
  // @@protoc_insertion_point(field_add:osi3.TrafficAction.FollowPathAction.path_point)
  return _internal_add_path_point();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::StatePoint >&
TrafficAction_FollowPathAction::path_point() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficAction.FollowPathAction.path_point)
  return path_point_;
}

// optional bool constrain_orientation = 3;
inline bool TrafficAction_FollowPathAction::_internal_has_constrain_orientation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficAction_FollowPathAction::has_constrain_orientation() const {
  return _internal_has_constrain_orientation();
}
inline void TrafficAction_FollowPathAction::clear_constrain_orientation() {
  constrain_orientation_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool TrafficAction_FollowPathAction::_internal_constrain_orientation() const {
  return constrain_orientation_;
}
inline bool TrafficAction_FollowPathAction::constrain_orientation() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.FollowPathAction.constrain_orientation)
  return _internal_constrain_orientation();
}
inline void TrafficAction_FollowPathAction::_internal_set_constrain_orientation(bool value) {
  _has_bits_[0] |= 0x00000002u;
  constrain_orientation_ = value;
}
inline void TrafficAction_FollowPathAction::set_constrain_orientation(bool value) {
  _internal_set_constrain_orientation(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.FollowPathAction.constrain_orientation)
}

// optional .osi3.TrafficAction.FollowingMode following_mode = 4;
inline bool TrafficAction_FollowPathAction::_internal_has_following_mode() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficAction_FollowPathAction::has_following_mode() const {
  return _internal_has_following_mode();
}
inline void TrafficAction_FollowPathAction::clear_following_mode() {
  following_mode_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::osi3::TrafficAction_FollowingMode TrafficAction_FollowPathAction::_internal_following_mode() const {
  return static_cast< ::osi3::TrafficAction_FollowingMode >(following_mode_);
}
inline ::osi3::TrafficAction_FollowingMode TrafficAction_FollowPathAction::following_mode() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.FollowPathAction.following_mode)
  return _internal_following_mode();
}
inline void TrafficAction_FollowPathAction::_internal_set_following_mode(::osi3::TrafficAction_FollowingMode value) {
  assert(::osi3::TrafficAction_FollowingMode_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  following_mode_ = value;
}
inline void TrafficAction_FollowPathAction::set_following_mode(::osi3::TrafficAction_FollowingMode value) {
  _internal_set_following_mode(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.FollowPathAction.following_mode)
}

// -------------------------------------------------------------------

// TrafficAction_AcquireGlobalPositionAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_AcquireGlobalPositionAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_AcquireGlobalPositionAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_AcquireGlobalPositionAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_AcquireGlobalPositionAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_AcquireGlobalPositionAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.AcquireGlobalPositionAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_AcquireGlobalPositionAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.AcquireGlobalPositionAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_AcquireGlobalPositionAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_AcquireGlobalPositionAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.AcquireGlobalPositionAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_AcquireGlobalPositionAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.AcquireGlobalPositionAction.action_header)
}

// optional .osi3.Vector3d position = 2;
inline bool TrafficAction_AcquireGlobalPositionAction::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool TrafficAction_AcquireGlobalPositionAction::has_position() const {
  return _internal_has_position();
}
inline const ::osi3::Vector3d& TrafficAction_AcquireGlobalPositionAction::_internal_position() const {
  const ::osi3::Vector3d* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& TrafficAction_AcquireGlobalPositionAction::position() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.AcquireGlobalPositionAction.position)
  return _internal_position();
}
inline ::osi3::Vector3d* TrafficAction_AcquireGlobalPositionAction::release_position() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.AcquireGlobalPositionAction.position)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* TrafficAction_AcquireGlobalPositionAction::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::osi3::Vector3d* TrafficAction_AcquireGlobalPositionAction::mutable_position() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.AcquireGlobalPositionAction.position)
  return _internal_mutable_position();
}
inline void TrafficAction_AcquireGlobalPositionAction::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.AcquireGlobalPositionAction.position)
}

// optional .osi3.Orientation3d orientation = 3;
inline bool TrafficAction_AcquireGlobalPositionAction::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool TrafficAction_AcquireGlobalPositionAction::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::osi3::Orientation3d& TrafficAction_AcquireGlobalPositionAction::_internal_orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Orientation3d*>(
      &::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& TrafficAction_AcquireGlobalPositionAction::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.AcquireGlobalPositionAction.orientation)
  return _internal_orientation();
}
inline ::osi3::Orientation3d* TrafficAction_AcquireGlobalPositionAction::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.AcquireGlobalPositionAction.orientation)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* TrafficAction_AcquireGlobalPositionAction::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000004u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::osi3::Orientation3d* TrafficAction_AcquireGlobalPositionAction::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.AcquireGlobalPositionAction.orientation)
  return _internal_mutable_orientation();
}
inline void TrafficAction_AcquireGlobalPositionAction::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.AcquireGlobalPositionAction.orientation)
}

// -------------------------------------------------------------------

// TrafficAction_LaneChangeAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_LaneChangeAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_LaneChangeAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_LaneChangeAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_LaneChangeAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_LaneChangeAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LaneChangeAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LaneChangeAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.LaneChangeAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LaneChangeAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LaneChangeAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.LaneChangeAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_LaneChangeAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.LaneChangeAction.action_header)
}

// optional int32 relative_target_lane = 2;
inline bool TrafficAction_LaneChangeAction::_internal_has_relative_target_lane() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficAction_LaneChangeAction::has_relative_target_lane() const {
  return _internal_has_relative_target_lane();
}
inline void TrafficAction_LaneChangeAction::clear_relative_target_lane() {
  relative_target_lane_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficAction_LaneChangeAction::_internal_relative_target_lane() const {
  return relative_target_lane_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficAction_LaneChangeAction::relative_target_lane() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LaneChangeAction.relative_target_lane)
  return _internal_relative_target_lane();
}
inline void TrafficAction_LaneChangeAction::_internal_set_relative_target_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  relative_target_lane_ = value;
}
inline void TrafficAction_LaneChangeAction::set_relative_target_lane(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relative_target_lane(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LaneChangeAction.relative_target_lane)
}

// optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
inline bool TrafficAction_LaneChangeAction::_internal_has_dynamics_shape() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficAction_LaneChangeAction::has_dynamics_shape() const {
  return _internal_has_dynamics_shape();
}
inline void TrafficAction_LaneChangeAction::clear_dynamics_shape() {
  dynamics_shape_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::osi3::TrafficAction_DynamicsShape TrafficAction_LaneChangeAction::_internal_dynamics_shape() const {
  return static_cast< ::osi3::TrafficAction_DynamicsShape >(dynamics_shape_);
}
inline ::osi3::TrafficAction_DynamicsShape TrafficAction_LaneChangeAction::dynamics_shape() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LaneChangeAction.dynamics_shape)
  return _internal_dynamics_shape();
}
inline void TrafficAction_LaneChangeAction::_internal_set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value) {
  assert(::osi3::TrafficAction_DynamicsShape_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  dynamics_shape_ = value;
}
inline void TrafficAction_LaneChangeAction::set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value) {
  _internal_set_dynamics_shape(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LaneChangeAction.dynamics_shape)
}

// optional double duration = 4;
inline bool TrafficAction_LaneChangeAction::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficAction_LaneChangeAction::has_duration() const {
  return _internal_has_duration();
}
inline void TrafficAction_LaneChangeAction::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrafficAction_LaneChangeAction::_internal_duration() const {
  return duration_;
}
inline double TrafficAction_LaneChangeAction::duration() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LaneChangeAction.duration)
  return _internal_duration();
}
inline void TrafficAction_LaneChangeAction::_internal_set_duration(double value) {
  _has_bits_[0] |= 0x00000008u;
  duration_ = value;
}
inline void TrafficAction_LaneChangeAction::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LaneChangeAction.duration)
}

// optional double distance = 5;
inline bool TrafficAction_LaneChangeAction::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrafficAction_LaneChangeAction::has_distance() const {
  return _internal_has_distance();
}
inline void TrafficAction_LaneChangeAction::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double TrafficAction_LaneChangeAction::_internal_distance() const {
  return distance_;
}
inline double TrafficAction_LaneChangeAction::distance() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LaneChangeAction.distance)
  return _internal_distance();
}
inline void TrafficAction_LaneChangeAction::_internal_set_distance(double value) {
  _has_bits_[0] |= 0x00000010u;
  distance_ = value;
}
inline void TrafficAction_LaneChangeAction::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LaneChangeAction.distance)
}

// -------------------------------------------------------------------

// TrafficAction_SpeedAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_SpeedAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_SpeedAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_SpeedAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_SpeedAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_SpeedAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.SpeedAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_SpeedAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.SpeedAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_SpeedAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_SpeedAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.SpeedAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_SpeedAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.SpeedAction.action_header)
}

// optional double absolute_target_speed = 2;
inline bool TrafficAction_SpeedAction::_internal_has_absolute_target_speed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficAction_SpeedAction::has_absolute_target_speed() const {
  return _internal_has_absolute_target_speed();
}
inline void TrafficAction_SpeedAction::clear_absolute_target_speed() {
  absolute_target_speed_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TrafficAction_SpeedAction::_internal_absolute_target_speed() const {
  return absolute_target_speed_;
}
inline double TrafficAction_SpeedAction::absolute_target_speed() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.SpeedAction.absolute_target_speed)
  return _internal_absolute_target_speed();
}
inline void TrafficAction_SpeedAction::_internal_set_absolute_target_speed(double value) {
  _has_bits_[0] |= 0x00000002u;
  absolute_target_speed_ = value;
}
inline void TrafficAction_SpeedAction::set_absolute_target_speed(double value) {
  _internal_set_absolute_target_speed(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.SpeedAction.absolute_target_speed)
}

// optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
inline bool TrafficAction_SpeedAction::_internal_has_dynamics_shape() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrafficAction_SpeedAction::has_dynamics_shape() const {
  return _internal_has_dynamics_shape();
}
inline void TrafficAction_SpeedAction::clear_dynamics_shape() {
  dynamics_shape_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::osi3::TrafficAction_DynamicsShape TrafficAction_SpeedAction::_internal_dynamics_shape() const {
  return static_cast< ::osi3::TrafficAction_DynamicsShape >(dynamics_shape_);
}
inline ::osi3::TrafficAction_DynamicsShape TrafficAction_SpeedAction::dynamics_shape() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.SpeedAction.dynamics_shape)
  return _internal_dynamics_shape();
}
inline void TrafficAction_SpeedAction::_internal_set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value) {
  assert(::osi3::TrafficAction_DynamicsShape_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  dynamics_shape_ = value;
}
inline void TrafficAction_SpeedAction::set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value) {
  _internal_set_dynamics_shape(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.SpeedAction.dynamics_shape)
}

// optional double duration = 4;
inline bool TrafficAction_SpeedAction::_internal_has_duration() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficAction_SpeedAction::has_duration() const {
  return _internal_has_duration();
}
inline void TrafficAction_SpeedAction::clear_duration() {
  duration_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double TrafficAction_SpeedAction::_internal_duration() const {
  return duration_;
}
inline double TrafficAction_SpeedAction::duration() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.SpeedAction.duration)
  return _internal_duration();
}
inline void TrafficAction_SpeedAction::_internal_set_duration(double value) {
  _has_bits_[0] |= 0x00000004u;
  duration_ = value;
}
inline void TrafficAction_SpeedAction::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.SpeedAction.duration)
}

// optional double distance = 5;
inline bool TrafficAction_SpeedAction::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficAction_SpeedAction::has_distance() const {
  return _internal_has_distance();
}
inline void TrafficAction_SpeedAction::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrafficAction_SpeedAction::_internal_distance() const {
  return distance_;
}
inline double TrafficAction_SpeedAction::distance() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.SpeedAction.distance)
  return _internal_distance();
}
inline void TrafficAction_SpeedAction::_internal_set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
}
inline void TrafficAction_SpeedAction::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.SpeedAction.distance)
}

// -------------------------------------------------------------------

// TrafficAction_AbortActionsAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_AbortActionsAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_AbortActionsAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_AbortActionsAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_AbortActionsAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_AbortActionsAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.AbortActionsAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_AbortActionsAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.AbortActionsAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_AbortActionsAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_AbortActionsAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.AbortActionsAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_AbortActionsAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.AbortActionsAction.action_header)
}

// repeated .osi3.Identifier target_action_id = 2;
inline int TrafficAction_AbortActionsAction::_internal_target_action_id_size() const {
  return target_action_id_.size();
}
inline int TrafficAction_AbortActionsAction::target_action_id_size() const {
  return _internal_target_action_id_size();
}
inline ::osi3::Identifier* TrafficAction_AbortActionsAction::mutable_target_action_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.AbortActionsAction.target_action_id)
  return target_action_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
TrafficAction_AbortActionsAction::mutable_target_action_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficAction.AbortActionsAction.target_action_id)
  return &target_action_id_;
}
inline const ::osi3::Identifier& TrafficAction_AbortActionsAction::_internal_target_action_id(int index) const {
  return target_action_id_.Get(index);
}
inline const ::osi3::Identifier& TrafficAction_AbortActionsAction::target_action_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.AbortActionsAction.target_action_id)
  return _internal_target_action_id(index);
}
inline ::osi3::Identifier* TrafficAction_AbortActionsAction::_internal_add_target_action_id() {
  return target_action_id_.Add();
}
inline ::osi3::Identifier* TrafficAction_AbortActionsAction::add_target_action_id() {
  // @@protoc_insertion_point(field_add:osi3.TrafficAction.AbortActionsAction.target_action_id)
  return _internal_add_target_action_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
TrafficAction_AbortActionsAction::target_action_id() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficAction.AbortActionsAction.target_action_id)
  return target_action_id_;
}

// -------------------------------------------------------------------

// TrafficAction_EndActionsAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_EndActionsAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_EndActionsAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_EndActionsAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_EndActionsAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_EndActionsAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.EndActionsAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_EndActionsAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.EndActionsAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_EndActionsAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_EndActionsAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.EndActionsAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_EndActionsAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.EndActionsAction.action_header)
}

// repeated .osi3.Identifier target_action_id = 2;
inline int TrafficAction_EndActionsAction::_internal_target_action_id_size() const {
  return target_action_id_.size();
}
inline int TrafficAction_EndActionsAction::target_action_id_size() const {
  return _internal_target_action_id_size();
}
inline ::osi3::Identifier* TrafficAction_EndActionsAction::mutable_target_action_id(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.EndActionsAction.target_action_id)
  return target_action_id_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >*
TrafficAction_EndActionsAction::mutable_target_action_id() {
  // @@protoc_insertion_point(field_mutable_list:osi3.TrafficAction.EndActionsAction.target_action_id)
  return &target_action_id_;
}
inline const ::osi3::Identifier& TrafficAction_EndActionsAction::_internal_target_action_id(int index) const {
  return target_action_id_.Get(index);
}
inline const ::osi3::Identifier& TrafficAction_EndActionsAction::target_action_id(int index) const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.EndActionsAction.target_action_id)
  return _internal_target_action_id(index);
}
inline ::osi3::Identifier* TrafficAction_EndActionsAction::_internal_add_target_action_id() {
  return target_action_id_.Add();
}
inline ::osi3::Identifier* TrafficAction_EndActionsAction::add_target_action_id() {
  // @@protoc_insertion_point(field_add:osi3.TrafficAction.EndActionsAction.target_action_id)
  return _internal_add_target_action_id();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Identifier >&
TrafficAction_EndActionsAction::target_action_id() const {
  // @@protoc_insertion_point(field_list:osi3.TrafficAction.EndActionsAction.target_action_id)
  return target_action_id_;
}

// -------------------------------------------------------------------

// TrafficAction_CustomAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_CustomAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_CustomAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_CustomAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_CustomAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_CustomAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.CustomAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_CustomAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.CustomAction.action_header)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_CustomAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000004u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_CustomAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.CustomAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_CustomAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.CustomAction.action_header)
}

// optional string command = 2;
inline bool TrafficAction_CustomAction::_internal_has_command() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrafficAction_CustomAction::has_command() const {
  return _internal_has_command();
}
inline void TrafficAction_CustomAction::clear_command() {
  command_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrafficAction_CustomAction::command() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.CustomAction.command)
  return _internal_command();
}
inline void TrafficAction_CustomAction::set_command(const std::string& value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.CustomAction.command)
}
inline std::string* TrafficAction_CustomAction::mutable_command() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.CustomAction.command)
  return _internal_mutable_command();
}
inline const std::string& TrafficAction_CustomAction::_internal_command() const {
  return command_.GetNoArena();
}
inline void TrafficAction_CustomAction::_internal_set_command(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrafficAction_CustomAction::set_command(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.TrafficAction.CustomAction.command)
}
inline void TrafficAction_CustomAction::set_command(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.TrafficAction.CustomAction.command)
}
inline void TrafficAction_CustomAction::set_command(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  command_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.TrafficAction.CustomAction.command)
}
inline std::string* TrafficAction_CustomAction::_internal_mutable_command() {
  _has_bits_[0] |= 0x00000001u;
  return command_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficAction_CustomAction::release_command() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.CustomAction.command)
  if (!_internal_has_command()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return command_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficAction_CustomAction::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  command_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.CustomAction.command)
}

// optional string command_type = 3;
inline bool TrafficAction_CustomAction::_internal_has_command_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficAction_CustomAction::has_command_type() const {
  return _internal_has_command_type();
}
inline void TrafficAction_CustomAction::clear_command_type() {
  command_type_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrafficAction_CustomAction::command_type() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.CustomAction.command_type)
  return _internal_command_type();
}
inline void TrafficAction_CustomAction::set_command_type(const std::string& value) {
  _internal_set_command_type(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.CustomAction.command_type)
}
inline std::string* TrafficAction_CustomAction::mutable_command_type() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.CustomAction.command_type)
  return _internal_mutable_command_type();
}
inline const std::string& TrafficAction_CustomAction::_internal_command_type() const {
  return command_type_.GetNoArena();
}
inline void TrafficAction_CustomAction::_internal_set_command_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  command_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TrafficAction_CustomAction::set_command_type(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  command_type_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:osi3.TrafficAction.CustomAction.command_type)
}
inline void TrafficAction_CustomAction::set_command_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  command_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:osi3.TrafficAction.CustomAction.command_type)
}
inline void TrafficAction_CustomAction::set_command_type(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  command_type_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:osi3.TrafficAction.CustomAction.command_type)
}
inline std::string* TrafficAction_CustomAction::_internal_mutable_command_type() {
  _has_bits_[0] |= 0x00000002u;
  return command_type_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TrafficAction_CustomAction::release_command_type() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.CustomAction.command_type)
  if (!_internal_has_command_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return command_type_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TrafficAction_CustomAction::set_allocated_command_type(std::string* command_type) {
  if (command_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  command_type_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command_type);
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.CustomAction.command_type)
}

// -------------------------------------------------------------------

// TrafficAction_LongitudinalDistanceAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_LongitudinalDistanceAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_LongitudinalDistanceAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_LongitudinalDistanceAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_LongitudinalDistanceAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_LongitudinalDistanceAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LongitudinalDistanceAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LongitudinalDistanceAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.LongitudinalDistanceAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LongitudinalDistanceAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LongitudinalDistanceAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.LongitudinalDistanceAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_LongitudinalDistanceAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.LongitudinalDistanceAction.action_header)
}

// optional .osi3.Identifier target_traffic_participant_id = 2;
inline bool TrafficAction_LongitudinalDistanceAction::_internal_has_target_traffic_participant_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_traffic_participant_id_ != nullptr);
  return value;
}
inline bool TrafficAction_LongitudinalDistanceAction::has_target_traffic_participant_id() const {
  return _internal_has_target_traffic_participant_id();
}
inline const ::osi3::Identifier& TrafficAction_LongitudinalDistanceAction::_internal_target_traffic_participant_id() const {
  const ::osi3::Identifier* p = target_traffic_participant_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& TrafficAction_LongitudinalDistanceAction::target_traffic_participant_id() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LongitudinalDistanceAction.target_traffic_participant_id)
  return _internal_target_traffic_participant_id();
}
inline ::osi3::Identifier* TrafficAction_LongitudinalDistanceAction::release_target_traffic_participant_id() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.LongitudinalDistanceAction.target_traffic_participant_id)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::Identifier* temp = target_traffic_participant_id_;
  target_traffic_participant_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* TrafficAction_LongitudinalDistanceAction::_internal_mutable_target_traffic_participant_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_traffic_participant_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    target_traffic_participant_id_ = p;
  }
  return target_traffic_participant_id_;
}
inline ::osi3::Identifier* TrafficAction_LongitudinalDistanceAction::mutable_target_traffic_participant_id() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.LongitudinalDistanceAction.target_traffic_participant_id)
  return _internal_mutable_target_traffic_participant_id();
}
inline void TrafficAction_LongitudinalDistanceAction::set_allocated_target_traffic_participant_id(::osi3::Identifier* target_traffic_participant_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_traffic_participant_id_);
  }
  if (target_traffic_participant_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_traffic_participant_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_traffic_participant_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_traffic_participant_id_ = target_traffic_participant_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.LongitudinalDistanceAction.target_traffic_participant_id)
}

// optional double distance = 3;
inline bool TrafficAction_LongitudinalDistanceAction::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficAction_LongitudinalDistanceAction::has_distance() const {
  return _internal_has_distance();
}
inline void TrafficAction_LongitudinalDistanceAction::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrafficAction_LongitudinalDistanceAction::_internal_distance() const {
  return distance_;
}
inline double TrafficAction_LongitudinalDistanceAction::distance() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LongitudinalDistanceAction.distance)
  return _internal_distance();
}
inline void TrafficAction_LongitudinalDistanceAction::_internal_set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
}
inline void TrafficAction_LongitudinalDistanceAction::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LongitudinalDistanceAction.distance)
}

// optional bool freespace = 4;
inline bool TrafficAction_LongitudinalDistanceAction::_internal_has_freespace() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrafficAction_LongitudinalDistanceAction::has_freespace() const {
  return _internal_has_freespace();
}
inline void TrafficAction_LongitudinalDistanceAction::clear_freespace() {
  freespace_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TrafficAction_LongitudinalDistanceAction::_internal_freespace() const {
  return freespace_;
}
inline bool TrafficAction_LongitudinalDistanceAction::freespace() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LongitudinalDistanceAction.freespace)
  return _internal_freespace();
}
inline void TrafficAction_LongitudinalDistanceAction::_internal_set_freespace(bool value) {
  _has_bits_[0] |= 0x00000010u;
  freespace_ = value;
}
inline void TrafficAction_LongitudinalDistanceAction::set_freespace(bool value) {
  _internal_set_freespace(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LongitudinalDistanceAction.freespace)
}

// optional bool follow = 5;
inline bool TrafficAction_LongitudinalDistanceAction::_internal_has_follow() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrafficAction_LongitudinalDistanceAction::has_follow() const {
  return _internal_has_follow();
}
inline void TrafficAction_LongitudinalDistanceAction::clear_follow() {
  follow_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrafficAction_LongitudinalDistanceAction::_internal_follow() const {
  return follow_;
}
inline bool TrafficAction_LongitudinalDistanceAction::follow() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LongitudinalDistanceAction.follow)
  return _internal_follow();
}
inline void TrafficAction_LongitudinalDistanceAction::_internal_set_follow(bool value) {
  _has_bits_[0] |= 0x00000020u;
  follow_ = value;
}
inline void TrafficAction_LongitudinalDistanceAction::set_follow(bool value) {
  _internal_set_follow(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LongitudinalDistanceAction.follow)
}

// optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
inline bool TrafficAction_LongitudinalDistanceAction::_internal_has_dynamic_constraints() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dynamic_constraints_ != nullptr);
  return value;
}
inline bool TrafficAction_LongitudinalDistanceAction::has_dynamic_constraints() const {
  return _internal_has_dynamic_constraints();
}
inline void TrafficAction_LongitudinalDistanceAction::clear_dynamic_constraints() {
  if (dynamic_constraints_ != nullptr) dynamic_constraints_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::osi3::TrafficAction_DynamicConstraints& TrafficAction_LongitudinalDistanceAction::_internal_dynamic_constraints() const {
  const ::osi3::TrafficAction_DynamicConstraints* p = dynamic_constraints_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_DynamicConstraints*>(
      &::osi3::_TrafficAction_DynamicConstraints_default_instance_);
}
inline const ::osi3::TrafficAction_DynamicConstraints& TrafficAction_LongitudinalDistanceAction::dynamic_constraints() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LongitudinalDistanceAction.dynamic_constraints)
  return _internal_dynamic_constraints();
}
inline ::osi3::TrafficAction_DynamicConstraints* TrafficAction_LongitudinalDistanceAction::release_dynamic_constraints() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.LongitudinalDistanceAction.dynamic_constraints)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::TrafficAction_DynamicConstraints* temp = dynamic_constraints_;
  dynamic_constraints_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_DynamicConstraints* TrafficAction_LongitudinalDistanceAction::_internal_mutable_dynamic_constraints() {
  _has_bits_[0] |= 0x00000004u;
  if (dynamic_constraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_DynamicConstraints>(GetArenaNoVirtual());
    dynamic_constraints_ = p;
  }
  return dynamic_constraints_;
}
inline ::osi3::TrafficAction_DynamicConstraints* TrafficAction_LongitudinalDistanceAction::mutable_dynamic_constraints() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.LongitudinalDistanceAction.dynamic_constraints)
  return _internal_mutable_dynamic_constraints();
}
inline void TrafficAction_LongitudinalDistanceAction::set_allocated_dynamic_constraints(::osi3::TrafficAction_DynamicConstraints* dynamic_constraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dynamic_constraints_;
  }
  if (dynamic_constraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamic_constraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_constraints, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dynamic_constraints_ = dynamic_constraints;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.LongitudinalDistanceAction.dynamic_constraints)
}

// -------------------------------------------------------------------

// TrafficAction_LateralDistanceAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_LateralDistanceAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_LateralDistanceAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_LateralDistanceAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_LateralDistanceAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_LateralDistanceAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LateralDistanceAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LateralDistanceAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.LateralDistanceAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LateralDistanceAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LateralDistanceAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.LateralDistanceAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_LateralDistanceAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.LateralDistanceAction.action_header)
}

// optional .osi3.Identifier target_traffic_participant_id = 2;
inline bool TrafficAction_LateralDistanceAction::_internal_has_target_traffic_participant_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || target_traffic_participant_id_ != nullptr);
  return value;
}
inline bool TrafficAction_LateralDistanceAction::has_target_traffic_participant_id() const {
  return _internal_has_target_traffic_participant_id();
}
inline const ::osi3::Identifier& TrafficAction_LateralDistanceAction::_internal_target_traffic_participant_id() const {
  const ::osi3::Identifier* p = target_traffic_participant_id_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Identifier*>(
      &::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& TrafficAction_LateralDistanceAction::target_traffic_participant_id() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LateralDistanceAction.target_traffic_participant_id)
  return _internal_target_traffic_participant_id();
}
inline ::osi3::Identifier* TrafficAction_LateralDistanceAction::release_target_traffic_participant_id() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.LateralDistanceAction.target_traffic_participant_id)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::Identifier* temp = target_traffic_participant_id_;
  target_traffic_participant_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* TrafficAction_LateralDistanceAction::_internal_mutable_target_traffic_participant_id() {
  _has_bits_[0] |= 0x00000002u;
  if (target_traffic_participant_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArenaNoVirtual());
    target_traffic_participant_id_ = p;
  }
  return target_traffic_participant_id_;
}
inline ::osi3::Identifier* TrafficAction_LateralDistanceAction::mutable_target_traffic_participant_id() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.LateralDistanceAction.target_traffic_participant_id)
  return _internal_mutable_target_traffic_participant_id();
}
inline void TrafficAction_LateralDistanceAction::set_allocated_target_traffic_participant_id(::osi3::Identifier* target_traffic_participant_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_traffic_participant_id_);
  }
  if (target_traffic_participant_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      target_traffic_participant_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_traffic_participant_id, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  target_traffic_participant_id_ = target_traffic_participant_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.LateralDistanceAction.target_traffic_participant_id)
}

// optional double distance = 3;
inline bool TrafficAction_LateralDistanceAction::_internal_has_distance() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrafficAction_LateralDistanceAction::has_distance() const {
  return _internal_has_distance();
}
inline void TrafficAction_LateralDistanceAction::clear_distance() {
  distance_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double TrafficAction_LateralDistanceAction::_internal_distance() const {
  return distance_;
}
inline double TrafficAction_LateralDistanceAction::distance() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LateralDistanceAction.distance)
  return _internal_distance();
}
inline void TrafficAction_LateralDistanceAction::_internal_set_distance(double value) {
  _has_bits_[0] |= 0x00000008u;
  distance_ = value;
}
inline void TrafficAction_LateralDistanceAction::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LateralDistanceAction.distance)
}

// optional bool freespace = 4;
inline bool TrafficAction_LateralDistanceAction::_internal_has_freespace() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrafficAction_LateralDistanceAction::has_freespace() const {
  return _internal_has_freespace();
}
inline void TrafficAction_LateralDistanceAction::clear_freespace() {
  freespace_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool TrafficAction_LateralDistanceAction::_internal_freespace() const {
  return freespace_;
}
inline bool TrafficAction_LateralDistanceAction::freespace() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LateralDistanceAction.freespace)
  return _internal_freespace();
}
inline void TrafficAction_LateralDistanceAction::_internal_set_freespace(bool value) {
  _has_bits_[0] |= 0x00000010u;
  freespace_ = value;
}
inline void TrafficAction_LateralDistanceAction::set_freespace(bool value) {
  _internal_set_freespace(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LateralDistanceAction.freespace)
}

// optional bool follow = 5;
inline bool TrafficAction_LateralDistanceAction::_internal_has_follow() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrafficAction_LateralDistanceAction::has_follow() const {
  return _internal_has_follow();
}
inline void TrafficAction_LateralDistanceAction::clear_follow() {
  follow_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool TrafficAction_LateralDistanceAction::_internal_follow() const {
  return follow_;
}
inline bool TrafficAction_LateralDistanceAction::follow() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LateralDistanceAction.follow)
  return _internal_follow();
}
inline void TrafficAction_LateralDistanceAction::_internal_set_follow(bool value) {
  _has_bits_[0] |= 0x00000020u;
  follow_ = value;
}
inline void TrafficAction_LateralDistanceAction::set_follow(bool value) {
  _internal_set_follow(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LateralDistanceAction.follow)
}

// optional .osi3.TrafficAction.DynamicConstraints dynamic_constraints = 6;
inline bool TrafficAction_LateralDistanceAction::_internal_has_dynamic_constraints() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || dynamic_constraints_ != nullptr);
  return value;
}
inline bool TrafficAction_LateralDistanceAction::has_dynamic_constraints() const {
  return _internal_has_dynamic_constraints();
}
inline void TrafficAction_LateralDistanceAction::clear_dynamic_constraints() {
  if (dynamic_constraints_ != nullptr) dynamic_constraints_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::osi3::TrafficAction_DynamicConstraints& TrafficAction_LateralDistanceAction::_internal_dynamic_constraints() const {
  const ::osi3::TrafficAction_DynamicConstraints* p = dynamic_constraints_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_DynamicConstraints*>(
      &::osi3::_TrafficAction_DynamicConstraints_default_instance_);
}
inline const ::osi3::TrafficAction_DynamicConstraints& TrafficAction_LateralDistanceAction::dynamic_constraints() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LateralDistanceAction.dynamic_constraints)
  return _internal_dynamic_constraints();
}
inline ::osi3::TrafficAction_DynamicConstraints* TrafficAction_LateralDistanceAction::release_dynamic_constraints() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.LateralDistanceAction.dynamic_constraints)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::TrafficAction_DynamicConstraints* temp = dynamic_constraints_;
  dynamic_constraints_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_DynamicConstraints* TrafficAction_LateralDistanceAction::_internal_mutable_dynamic_constraints() {
  _has_bits_[0] |= 0x00000004u;
  if (dynamic_constraints_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_DynamicConstraints>(GetArenaNoVirtual());
    dynamic_constraints_ = p;
  }
  return dynamic_constraints_;
}
inline ::osi3::TrafficAction_DynamicConstraints* TrafficAction_LateralDistanceAction::mutable_dynamic_constraints() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.LateralDistanceAction.dynamic_constraints)
  return _internal_mutable_dynamic_constraints();
}
inline void TrafficAction_LateralDistanceAction::set_allocated_dynamic_constraints(::osi3::TrafficAction_DynamicConstraints* dynamic_constraints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dynamic_constraints_;
  }
  if (dynamic_constraints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dynamic_constraints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_constraints, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  dynamic_constraints_ = dynamic_constraints;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.LateralDistanceAction.dynamic_constraints)
}

// -------------------------------------------------------------------

// TrafficAction_LaneOffsetAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_LaneOffsetAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_LaneOffsetAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_LaneOffsetAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_LaneOffsetAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_LaneOffsetAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LaneOffsetAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LaneOffsetAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.LaneOffsetAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LaneOffsetAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_LaneOffsetAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.LaneOffsetAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_LaneOffsetAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.LaneOffsetAction.action_header)
}

// optional double target_lane_offset = 2;
inline bool TrafficAction_LaneOffsetAction::_internal_has_target_lane_offset() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrafficAction_LaneOffsetAction::has_target_lane_offset() const {
  return _internal_has_target_lane_offset();
}
inline void TrafficAction_LaneOffsetAction::clear_target_lane_offset() {
  target_lane_offset_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double TrafficAction_LaneOffsetAction::_internal_target_lane_offset() const {
  return target_lane_offset_;
}
inline double TrafficAction_LaneOffsetAction::target_lane_offset() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LaneOffsetAction.target_lane_offset)
  return _internal_target_lane_offset();
}
inline void TrafficAction_LaneOffsetAction::_internal_set_target_lane_offset(double value) {
  _has_bits_[0] |= 0x00000002u;
  target_lane_offset_ = value;
}
inline void TrafficAction_LaneOffsetAction::set_target_lane_offset(double value) {
  _internal_set_target_lane_offset(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LaneOffsetAction.target_lane_offset)
}

// optional .osi3.TrafficAction.DynamicsShape dynamics_shape = 3;
inline bool TrafficAction_LaneOffsetAction::_internal_has_dynamics_shape() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrafficAction_LaneOffsetAction::has_dynamics_shape() const {
  return _internal_has_dynamics_shape();
}
inline void TrafficAction_LaneOffsetAction::clear_dynamics_shape() {
  dynamics_shape_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::osi3::TrafficAction_DynamicsShape TrafficAction_LaneOffsetAction::_internal_dynamics_shape() const {
  return static_cast< ::osi3::TrafficAction_DynamicsShape >(dynamics_shape_);
}
inline ::osi3::TrafficAction_DynamicsShape TrafficAction_LaneOffsetAction::dynamics_shape() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.LaneOffsetAction.dynamics_shape)
  return _internal_dynamics_shape();
}
inline void TrafficAction_LaneOffsetAction::_internal_set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value) {
  assert(::osi3::TrafficAction_DynamicsShape_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  dynamics_shape_ = value;
}
inline void TrafficAction_LaneOffsetAction::set_dynamics_shape(::osi3::TrafficAction_DynamicsShape value) {
  _internal_set_dynamics_shape(value);
  // @@protoc_insertion_point(field_set:osi3.TrafficAction.LaneOffsetAction.dynamics_shape)
}

// -------------------------------------------------------------------

// TrafficAction_TeleportAction

// optional .osi3.TrafficAction.ActionHeader action_header = 1;
inline bool TrafficAction_TeleportAction::_internal_has_action_header() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || action_header_ != nullptr);
  return value;
}
inline bool TrafficAction_TeleportAction::has_action_header() const {
  return _internal_has_action_header();
}
inline void TrafficAction_TeleportAction::clear_action_header() {
  if (action_header_ != nullptr) action_header_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_TeleportAction::_internal_action_header() const {
  const ::osi3::TrafficAction_ActionHeader* p = action_header_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_ActionHeader*>(
      &::osi3::_TrafficAction_ActionHeader_default_instance_);
}
inline const ::osi3::TrafficAction_ActionHeader& TrafficAction_TeleportAction::action_header() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.TeleportAction.action_header)
  return _internal_action_header();
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_TeleportAction::release_action_header() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.TeleportAction.action_header)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_ActionHeader* temp = action_header_;
  action_header_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_TeleportAction::_internal_mutable_action_header() {
  _has_bits_[0] |= 0x00000001u;
  if (action_header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_ActionHeader>(GetArenaNoVirtual());
    action_header_ = p;
  }
  return action_header_;
}
inline ::osi3::TrafficAction_ActionHeader* TrafficAction_TeleportAction::mutable_action_header() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.TeleportAction.action_header)
  return _internal_mutable_action_header();
}
inline void TrafficAction_TeleportAction::set_allocated_action_header(::osi3::TrafficAction_ActionHeader* action_header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete action_header_;
  }
  if (action_header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      action_header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  action_header_ = action_header;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.TeleportAction.action_header)
}

// optional .osi3.Vector3d position = 2;
inline bool TrafficAction_TeleportAction::_internal_has_position() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || position_ != nullptr);
  return value;
}
inline bool TrafficAction_TeleportAction::has_position() const {
  return _internal_has_position();
}
inline const ::osi3::Vector3d& TrafficAction_TeleportAction::_internal_position() const {
  const ::osi3::Vector3d* p = position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Vector3d*>(
      &::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& TrafficAction_TeleportAction::position() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.TeleportAction.position)
  return _internal_position();
}
inline ::osi3::Vector3d* TrafficAction_TeleportAction::release_position() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.TeleportAction.position)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* TrafficAction_TeleportAction::_internal_mutable_position() {
  _has_bits_[0] |= 0x00000002u;
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  return position_;
}
inline ::osi3::Vector3d* TrafficAction_TeleportAction::mutable_position() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.TeleportAction.position)
  return _internal_mutable_position();
}
inline void TrafficAction_TeleportAction::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.TeleportAction.position)
}

// optional .osi3.Orientation3d orientation = 3;
inline bool TrafficAction_TeleportAction::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || orientation_ != nullptr);
  return value;
}
inline bool TrafficAction_TeleportAction::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::osi3::Orientation3d& TrafficAction_TeleportAction::_internal_orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::Orientation3d*>(
      &::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& TrafficAction_TeleportAction::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.TeleportAction.orientation)
  return _internal_orientation();
}
inline ::osi3::Orientation3d* TrafficAction_TeleportAction::release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.TeleportAction.orientation)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* TrafficAction_TeleportAction::_internal_mutable_orientation() {
  _has_bits_[0] |= 0x00000004u;
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::osi3::Orientation3d* TrafficAction_TeleportAction::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.TeleportAction.orientation)
  return _internal_mutable_orientation();
}
inline void TrafficAction_TeleportAction::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.TeleportAction.orientation)
}

// -------------------------------------------------------------------

// TrafficAction

// optional .osi3.TrafficAction.FollowTrajectoryAction follow_trajectory_action = 1;
inline bool TrafficAction::_internal_has_follow_trajectory_action() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || follow_trajectory_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_follow_trajectory_action() const {
  return _internal_has_follow_trajectory_action();
}
inline void TrafficAction::clear_follow_trajectory_action() {
  if (follow_trajectory_action_ != nullptr) follow_trajectory_action_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::TrafficAction_FollowTrajectoryAction& TrafficAction::_internal_follow_trajectory_action() const {
  const ::osi3::TrafficAction_FollowTrajectoryAction* p = follow_trajectory_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_FollowTrajectoryAction*>(
      &::osi3::_TrafficAction_FollowTrajectoryAction_default_instance_);
}
inline const ::osi3::TrafficAction_FollowTrajectoryAction& TrafficAction::follow_trajectory_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.follow_trajectory_action)
  return _internal_follow_trajectory_action();
}
inline ::osi3::TrafficAction_FollowTrajectoryAction* TrafficAction::release_follow_trajectory_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.follow_trajectory_action)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::TrafficAction_FollowTrajectoryAction* temp = follow_trajectory_action_;
  follow_trajectory_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_FollowTrajectoryAction* TrafficAction::_internal_mutable_follow_trajectory_action() {
  _has_bits_[0] |= 0x00000001u;
  if (follow_trajectory_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_FollowTrajectoryAction>(GetArenaNoVirtual());
    follow_trajectory_action_ = p;
  }
  return follow_trajectory_action_;
}
inline ::osi3::TrafficAction_FollowTrajectoryAction* TrafficAction::mutable_follow_trajectory_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.follow_trajectory_action)
  return _internal_mutable_follow_trajectory_action();
}
inline void TrafficAction::set_allocated_follow_trajectory_action(::osi3::TrafficAction_FollowTrajectoryAction* follow_trajectory_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete follow_trajectory_action_;
  }
  if (follow_trajectory_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      follow_trajectory_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, follow_trajectory_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  follow_trajectory_action_ = follow_trajectory_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.follow_trajectory_action)
}

// optional .osi3.TrafficAction.FollowPathAction follow_path_action = 2;
inline bool TrafficAction::_internal_has_follow_path_action() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || follow_path_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_follow_path_action() const {
  return _internal_has_follow_path_action();
}
inline void TrafficAction::clear_follow_path_action() {
  if (follow_path_action_ != nullptr) follow_path_action_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::osi3::TrafficAction_FollowPathAction& TrafficAction::_internal_follow_path_action() const {
  const ::osi3::TrafficAction_FollowPathAction* p = follow_path_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_FollowPathAction*>(
      &::osi3::_TrafficAction_FollowPathAction_default_instance_);
}
inline const ::osi3::TrafficAction_FollowPathAction& TrafficAction::follow_path_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.follow_path_action)
  return _internal_follow_path_action();
}
inline ::osi3::TrafficAction_FollowPathAction* TrafficAction::release_follow_path_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.follow_path_action)
  _has_bits_[0] &= ~0x00000002u;
  ::osi3::TrafficAction_FollowPathAction* temp = follow_path_action_;
  follow_path_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_FollowPathAction* TrafficAction::_internal_mutable_follow_path_action() {
  _has_bits_[0] |= 0x00000002u;
  if (follow_path_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_FollowPathAction>(GetArenaNoVirtual());
    follow_path_action_ = p;
  }
  return follow_path_action_;
}
inline ::osi3::TrafficAction_FollowPathAction* TrafficAction::mutable_follow_path_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.follow_path_action)
  return _internal_mutable_follow_path_action();
}
inline void TrafficAction::set_allocated_follow_path_action(::osi3::TrafficAction_FollowPathAction* follow_path_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete follow_path_action_;
  }
  if (follow_path_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      follow_path_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, follow_path_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  follow_path_action_ = follow_path_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.follow_path_action)
}

// optional .osi3.TrafficAction.AcquireGlobalPositionAction acquire_global_position_action = 3;
inline bool TrafficAction::_internal_has_acquire_global_position_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || acquire_global_position_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_acquire_global_position_action() const {
  return _internal_has_acquire_global_position_action();
}
inline void TrafficAction::clear_acquire_global_position_action() {
  if (acquire_global_position_action_ != nullptr) acquire_global_position_action_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::osi3::TrafficAction_AcquireGlobalPositionAction& TrafficAction::_internal_acquire_global_position_action() const {
  const ::osi3::TrafficAction_AcquireGlobalPositionAction* p = acquire_global_position_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_AcquireGlobalPositionAction*>(
      &::osi3::_TrafficAction_AcquireGlobalPositionAction_default_instance_);
}
inline const ::osi3::TrafficAction_AcquireGlobalPositionAction& TrafficAction::acquire_global_position_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.acquire_global_position_action)
  return _internal_acquire_global_position_action();
}
inline ::osi3::TrafficAction_AcquireGlobalPositionAction* TrafficAction::release_acquire_global_position_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.acquire_global_position_action)
  _has_bits_[0] &= ~0x00000004u;
  ::osi3::TrafficAction_AcquireGlobalPositionAction* temp = acquire_global_position_action_;
  acquire_global_position_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_AcquireGlobalPositionAction* TrafficAction::_internal_mutable_acquire_global_position_action() {
  _has_bits_[0] |= 0x00000004u;
  if (acquire_global_position_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_AcquireGlobalPositionAction>(GetArenaNoVirtual());
    acquire_global_position_action_ = p;
  }
  return acquire_global_position_action_;
}
inline ::osi3::TrafficAction_AcquireGlobalPositionAction* TrafficAction::mutable_acquire_global_position_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.acquire_global_position_action)
  return _internal_mutable_acquire_global_position_action();
}
inline void TrafficAction::set_allocated_acquire_global_position_action(::osi3::TrafficAction_AcquireGlobalPositionAction* acquire_global_position_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acquire_global_position_action_;
  }
  if (acquire_global_position_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acquire_global_position_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acquire_global_position_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  acquire_global_position_action_ = acquire_global_position_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.acquire_global_position_action)
}

// optional .osi3.TrafficAction.LaneChangeAction lane_change_action = 4;
inline bool TrafficAction::_internal_has_lane_change_action() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || lane_change_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_lane_change_action() const {
  return _internal_has_lane_change_action();
}
inline void TrafficAction::clear_lane_change_action() {
  if (lane_change_action_ != nullptr) lane_change_action_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::osi3::TrafficAction_LaneChangeAction& TrafficAction::_internal_lane_change_action() const {
  const ::osi3::TrafficAction_LaneChangeAction* p = lane_change_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_LaneChangeAction*>(
      &::osi3::_TrafficAction_LaneChangeAction_default_instance_);
}
inline const ::osi3::TrafficAction_LaneChangeAction& TrafficAction::lane_change_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.lane_change_action)
  return _internal_lane_change_action();
}
inline ::osi3::TrafficAction_LaneChangeAction* TrafficAction::release_lane_change_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.lane_change_action)
  _has_bits_[0] &= ~0x00000008u;
  ::osi3::TrafficAction_LaneChangeAction* temp = lane_change_action_;
  lane_change_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_LaneChangeAction* TrafficAction::_internal_mutable_lane_change_action() {
  _has_bits_[0] |= 0x00000008u;
  if (lane_change_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_LaneChangeAction>(GetArenaNoVirtual());
    lane_change_action_ = p;
  }
  return lane_change_action_;
}
inline ::osi3::TrafficAction_LaneChangeAction* TrafficAction::mutable_lane_change_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.lane_change_action)
  return _internal_mutable_lane_change_action();
}
inline void TrafficAction::set_allocated_lane_change_action(::osi3::TrafficAction_LaneChangeAction* lane_change_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_change_action_;
  }
  if (lane_change_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_change_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_change_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  lane_change_action_ = lane_change_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.lane_change_action)
}

// optional .osi3.TrafficAction.SpeedAction speed_action = 5;
inline bool TrafficAction::_internal_has_speed_action() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || speed_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_speed_action() const {
  return _internal_has_speed_action();
}
inline void TrafficAction::clear_speed_action() {
  if (speed_action_ != nullptr) speed_action_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::osi3::TrafficAction_SpeedAction& TrafficAction::_internal_speed_action() const {
  const ::osi3::TrafficAction_SpeedAction* p = speed_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_SpeedAction*>(
      &::osi3::_TrafficAction_SpeedAction_default_instance_);
}
inline const ::osi3::TrafficAction_SpeedAction& TrafficAction::speed_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.speed_action)
  return _internal_speed_action();
}
inline ::osi3::TrafficAction_SpeedAction* TrafficAction::release_speed_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.speed_action)
  _has_bits_[0] &= ~0x00000010u;
  ::osi3::TrafficAction_SpeedAction* temp = speed_action_;
  speed_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_SpeedAction* TrafficAction::_internal_mutable_speed_action() {
  _has_bits_[0] |= 0x00000010u;
  if (speed_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_SpeedAction>(GetArenaNoVirtual());
    speed_action_ = p;
  }
  return speed_action_;
}
inline ::osi3::TrafficAction_SpeedAction* TrafficAction::mutable_speed_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.speed_action)
  return _internal_mutable_speed_action();
}
inline void TrafficAction::set_allocated_speed_action(::osi3::TrafficAction_SpeedAction* speed_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete speed_action_;
  }
  if (speed_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      speed_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, speed_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  speed_action_ = speed_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.speed_action)
}

// optional .osi3.TrafficAction.AbortActionsAction abort_actions_action = 6;
inline bool TrafficAction::_internal_has_abort_actions_action() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || abort_actions_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_abort_actions_action() const {
  return _internal_has_abort_actions_action();
}
inline void TrafficAction::clear_abort_actions_action() {
  if (abort_actions_action_ != nullptr) abort_actions_action_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::osi3::TrafficAction_AbortActionsAction& TrafficAction::_internal_abort_actions_action() const {
  const ::osi3::TrafficAction_AbortActionsAction* p = abort_actions_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_AbortActionsAction*>(
      &::osi3::_TrafficAction_AbortActionsAction_default_instance_);
}
inline const ::osi3::TrafficAction_AbortActionsAction& TrafficAction::abort_actions_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.abort_actions_action)
  return _internal_abort_actions_action();
}
inline ::osi3::TrafficAction_AbortActionsAction* TrafficAction::release_abort_actions_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.abort_actions_action)
  _has_bits_[0] &= ~0x00000020u;
  ::osi3::TrafficAction_AbortActionsAction* temp = abort_actions_action_;
  abort_actions_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_AbortActionsAction* TrafficAction::_internal_mutable_abort_actions_action() {
  _has_bits_[0] |= 0x00000020u;
  if (abort_actions_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_AbortActionsAction>(GetArenaNoVirtual());
    abort_actions_action_ = p;
  }
  return abort_actions_action_;
}
inline ::osi3::TrafficAction_AbortActionsAction* TrafficAction::mutable_abort_actions_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.abort_actions_action)
  return _internal_mutable_abort_actions_action();
}
inline void TrafficAction::set_allocated_abort_actions_action(::osi3::TrafficAction_AbortActionsAction* abort_actions_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete abort_actions_action_;
  }
  if (abort_actions_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      abort_actions_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abort_actions_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  abort_actions_action_ = abort_actions_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.abort_actions_action)
}

// optional .osi3.TrafficAction.EndActionsAction end_actions_action = 7;
inline bool TrafficAction::_internal_has_end_actions_action() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || end_actions_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_end_actions_action() const {
  return _internal_has_end_actions_action();
}
inline void TrafficAction::clear_end_actions_action() {
  if (end_actions_action_ != nullptr) end_actions_action_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::osi3::TrafficAction_EndActionsAction& TrafficAction::_internal_end_actions_action() const {
  const ::osi3::TrafficAction_EndActionsAction* p = end_actions_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_EndActionsAction*>(
      &::osi3::_TrafficAction_EndActionsAction_default_instance_);
}
inline const ::osi3::TrafficAction_EndActionsAction& TrafficAction::end_actions_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.end_actions_action)
  return _internal_end_actions_action();
}
inline ::osi3::TrafficAction_EndActionsAction* TrafficAction::release_end_actions_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.end_actions_action)
  _has_bits_[0] &= ~0x00000040u;
  ::osi3::TrafficAction_EndActionsAction* temp = end_actions_action_;
  end_actions_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_EndActionsAction* TrafficAction::_internal_mutable_end_actions_action() {
  _has_bits_[0] |= 0x00000040u;
  if (end_actions_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_EndActionsAction>(GetArenaNoVirtual());
    end_actions_action_ = p;
  }
  return end_actions_action_;
}
inline ::osi3::TrafficAction_EndActionsAction* TrafficAction::mutable_end_actions_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.end_actions_action)
  return _internal_mutable_end_actions_action();
}
inline void TrafficAction::set_allocated_end_actions_action(::osi3::TrafficAction_EndActionsAction* end_actions_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete end_actions_action_;
  }
  if (end_actions_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      end_actions_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_actions_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  end_actions_action_ = end_actions_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.end_actions_action)
}

// optional .osi3.TrafficAction.CustomAction custom_action = 8;
inline bool TrafficAction::_internal_has_custom_action() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || custom_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_custom_action() const {
  return _internal_has_custom_action();
}
inline void TrafficAction::clear_custom_action() {
  if (custom_action_ != nullptr) custom_action_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::osi3::TrafficAction_CustomAction& TrafficAction::_internal_custom_action() const {
  const ::osi3::TrafficAction_CustomAction* p = custom_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_CustomAction*>(
      &::osi3::_TrafficAction_CustomAction_default_instance_);
}
inline const ::osi3::TrafficAction_CustomAction& TrafficAction::custom_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.custom_action)
  return _internal_custom_action();
}
inline ::osi3::TrafficAction_CustomAction* TrafficAction::release_custom_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.custom_action)
  _has_bits_[0] &= ~0x00000080u;
  ::osi3::TrafficAction_CustomAction* temp = custom_action_;
  custom_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_CustomAction* TrafficAction::_internal_mutable_custom_action() {
  _has_bits_[0] |= 0x00000080u;
  if (custom_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_CustomAction>(GetArenaNoVirtual());
    custom_action_ = p;
  }
  return custom_action_;
}
inline ::osi3::TrafficAction_CustomAction* TrafficAction::mutable_custom_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.custom_action)
  return _internal_mutable_custom_action();
}
inline void TrafficAction::set_allocated_custom_action(::osi3::TrafficAction_CustomAction* custom_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete custom_action_;
  }
  if (custom_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      custom_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  custom_action_ = custom_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.custom_action)
}

// optional .osi3.TrafficAction.LongitudinalDistanceAction longitudinal_distance_action = 9;
inline bool TrafficAction::_internal_has_longitudinal_distance_action() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || longitudinal_distance_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_longitudinal_distance_action() const {
  return _internal_has_longitudinal_distance_action();
}
inline void TrafficAction::clear_longitudinal_distance_action() {
  if (longitudinal_distance_action_ != nullptr) longitudinal_distance_action_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::osi3::TrafficAction_LongitudinalDistanceAction& TrafficAction::_internal_longitudinal_distance_action() const {
  const ::osi3::TrafficAction_LongitudinalDistanceAction* p = longitudinal_distance_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_LongitudinalDistanceAction*>(
      &::osi3::_TrafficAction_LongitudinalDistanceAction_default_instance_);
}
inline const ::osi3::TrafficAction_LongitudinalDistanceAction& TrafficAction::longitudinal_distance_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.longitudinal_distance_action)
  return _internal_longitudinal_distance_action();
}
inline ::osi3::TrafficAction_LongitudinalDistanceAction* TrafficAction::release_longitudinal_distance_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.longitudinal_distance_action)
  _has_bits_[0] &= ~0x00000100u;
  ::osi3::TrafficAction_LongitudinalDistanceAction* temp = longitudinal_distance_action_;
  longitudinal_distance_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_LongitudinalDistanceAction* TrafficAction::_internal_mutable_longitudinal_distance_action() {
  _has_bits_[0] |= 0x00000100u;
  if (longitudinal_distance_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_LongitudinalDistanceAction>(GetArenaNoVirtual());
    longitudinal_distance_action_ = p;
  }
  return longitudinal_distance_action_;
}
inline ::osi3::TrafficAction_LongitudinalDistanceAction* TrafficAction::mutable_longitudinal_distance_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.longitudinal_distance_action)
  return _internal_mutable_longitudinal_distance_action();
}
inline void TrafficAction::set_allocated_longitudinal_distance_action(::osi3::TrafficAction_LongitudinalDistanceAction* longitudinal_distance_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete longitudinal_distance_action_;
  }
  if (longitudinal_distance_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      longitudinal_distance_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, longitudinal_distance_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  longitudinal_distance_action_ = longitudinal_distance_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.longitudinal_distance_action)
}

// optional .osi3.TrafficAction.LaneOffsetAction lane_offset_action = 10;
inline bool TrafficAction::_internal_has_lane_offset_action() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || lane_offset_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_lane_offset_action() const {
  return _internal_has_lane_offset_action();
}
inline void TrafficAction::clear_lane_offset_action() {
  if (lane_offset_action_ != nullptr) lane_offset_action_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::osi3::TrafficAction_LaneOffsetAction& TrafficAction::_internal_lane_offset_action() const {
  const ::osi3::TrafficAction_LaneOffsetAction* p = lane_offset_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_LaneOffsetAction*>(
      &::osi3::_TrafficAction_LaneOffsetAction_default_instance_);
}
inline const ::osi3::TrafficAction_LaneOffsetAction& TrafficAction::lane_offset_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.lane_offset_action)
  return _internal_lane_offset_action();
}
inline ::osi3::TrafficAction_LaneOffsetAction* TrafficAction::release_lane_offset_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.lane_offset_action)
  _has_bits_[0] &= ~0x00000200u;
  ::osi3::TrafficAction_LaneOffsetAction* temp = lane_offset_action_;
  lane_offset_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_LaneOffsetAction* TrafficAction::_internal_mutable_lane_offset_action() {
  _has_bits_[0] |= 0x00000200u;
  if (lane_offset_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_LaneOffsetAction>(GetArenaNoVirtual());
    lane_offset_action_ = p;
  }
  return lane_offset_action_;
}
inline ::osi3::TrafficAction_LaneOffsetAction* TrafficAction::mutable_lane_offset_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.lane_offset_action)
  return _internal_mutable_lane_offset_action();
}
inline void TrafficAction::set_allocated_lane_offset_action(::osi3::TrafficAction_LaneOffsetAction* lane_offset_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lane_offset_action_;
  }
  if (lane_offset_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lane_offset_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lane_offset_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  lane_offset_action_ = lane_offset_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.lane_offset_action)
}

// optional .osi3.TrafficAction.LateralDistanceAction lateral_distance_action = 11;
inline bool TrafficAction::_internal_has_lateral_distance_action() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || lateral_distance_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_lateral_distance_action() const {
  return _internal_has_lateral_distance_action();
}
inline void TrafficAction::clear_lateral_distance_action() {
  if (lateral_distance_action_ != nullptr) lateral_distance_action_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::osi3::TrafficAction_LateralDistanceAction& TrafficAction::_internal_lateral_distance_action() const {
  const ::osi3::TrafficAction_LateralDistanceAction* p = lateral_distance_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_LateralDistanceAction*>(
      &::osi3::_TrafficAction_LateralDistanceAction_default_instance_);
}
inline const ::osi3::TrafficAction_LateralDistanceAction& TrafficAction::lateral_distance_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.lateral_distance_action)
  return _internal_lateral_distance_action();
}
inline ::osi3::TrafficAction_LateralDistanceAction* TrafficAction::release_lateral_distance_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.lateral_distance_action)
  _has_bits_[0] &= ~0x00000400u;
  ::osi3::TrafficAction_LateralDistanceAction* temp = lateral_distance_action_;
  lateral_distance_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_LateralDistanceAction* TrafficAction::_internal_mutable_lateral_distance_action() {
  _has_bits_[0] |= 0x00000400u;
  if (lateral_distance_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_LateralDistanceAction>(GetArenaNoVirtual());
    lateral_distance_action_ = p;
  }
  return lateral_distance_action_;
}
inline ::osi3::TrafficAction_LateralDistanceAction* TrafficAction::mutable_lateral_distance_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.lateral_distance_action)
  return _internal_mutable_lateral_distance_action();
}
inline void TrafficAction::set_allocated_lateral_distance_action(::osi3::TrafficAction_LateralDistanceAction* lateral_distance_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete lateral_distance_action_;
  }
  if (lateral_distance_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lateral_distance_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lateral_distance_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  lateral_distance_action_ = lateral_distance_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.lateral_distance_action)
}

// optional .osi3.TrafficAction.TeleportAction teleport_action = 12;
inline bool TrafficAction::_internal_has_teleport_action() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || teleport_action_ != nullptr);
  return value;
}
inline bool TrafficAction::has_teleport_action() const {
  return _internal_has_teleport_action();
}
inline void TrafficAction::clear_teleport_action() {
  if (teleport_action_ != nullptr) teleport_action_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::osi3::TrafficAction_TeleportAction& TrafficAction::_internal_teleport_action() const {
  const ::osi3::TrafficAction_TeleportAction* p = teleport_action_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::TrafficAction_TeleportAction*>(
      &::osi3::_TrafficAction_TeleportAction_default_instance_);
}
inline const ::osi3::TrafficAction_TeleportAction& TrafficAction::teleport_action() const {
  // @@protoc_insertion_point(field_get:osi3.TrafficAction.teleport_action)
  return _internal_teleport_action();
}
inline ::osi3::TrafficAction_TeleportAction* TrafficAction::release_teleport_action() {
  // @@protoc_insertion_point(field_release:osi3.TrafficAction.teleport_action)
  _has_bits_[0] &= ~0x00000800u;
  ::osi3::TrafficAction_TeleportAction* temp = teleport_action_;
  teleport_action_ = nullptr;
  return temp;
}
inline ::osi3::TrafficAction_TeleportAction* TrafficAction::_internal_mutable_teleport_action() {
  _has_bits_[0] |= 0x00000800u;
  if (teleport_action_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::TrafficAction_TeleportAction>(GetArenaNoVirtual());
    teleport_action_ = p;
  }
  return teleport_action_;
}
inline ::osi3::TrafficAction_TeleportAction* TrafficAction::mutable_teleport_action() {
  // @@protoc_insertion_point(field_mutable:osi3.TrafficAction.teleport_action)
  return _internal_mutable_teleport_action();
}
inline void TrafficAction::set_allocated_teleport_action(::osi3::TrafficAction_TeleportAction* teleport_action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete teleport_action_;
  }
  if (teleport_action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      teleport_action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teleport_action, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  teleport_action_ = teleport_action;
  // @@protoc_insertion_point(field_set_allocated:osi3.TrafficAction.teleport_action)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::TrafficAction_FollowingMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficAction_FollowingMode>() {
  return ::osi3::TrafficAction_FollowingMode_descriptor();
}
template <> struct is_proto_enum< ::osi3::TrafficAction_DynamicsShape> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::TrafficAction_DynamicsShape>() {
  return ::osi3::TrafficAction_DynamicsShape_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5ftrafficcommand_2eproto

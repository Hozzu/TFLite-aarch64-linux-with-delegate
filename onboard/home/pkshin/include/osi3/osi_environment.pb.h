// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_environment.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fenvironment_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fenvironment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fenvironment_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fenvironment_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fenvironment_2eproto;
namespace osi3 {
class EnvironmentalConditions;
class EnvironmentalConditionsDefaultTypeInternal;
extern EnvironmentalConditionsDefaultTypeInternal _EnvironmentalConditions_default_instance_;
class EnvironmentalConditions_TimeOfDay;
class EnvironmentalConditions_TimeOfDayDefaultTypeInternal;
extern EnvironmentalConditions_TimeOfDayDefaultTypeInternal _EnvironmentalConditions_TimeOfDay_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::EnvironmentalConditions* Arena::CreateMaybeMessage<::osi3::EnvironmentalConditions>(Arena*);
template<> ::osi3::EnvironmentalConditions_TimeOfDay* Arena::CreateMaybeMessage<::osi3::EnvironmentalConditions_TimeOfDay>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum EnvironmentalConditions_Precipitation : int {
  EnvironmentalConditions_Precipitation_PRECIPITATION_UNKNOWN = 0,
  EnvironmentalConditions_Precipitation_PRECIPITATION_OTHER = 1,
  EnvironmentalConditions_Precipitation_PRECIPITATION_NONE = 2,
  EnvironmentalConditions_Precipitation_PRECIPITATION_VERY_LIGHT = 3,
  EnvironmentalConditions_Precipitation_PRECIPITATION_LIGHT = 4,
  EnvironmentalConditions_Precipitation_PRECIPITATION_MODERATE = 5,
  EnvironmentalConditions_Precipitation_PRECIPITATION_HEAVY = 6,
  EnvironmentalConditions_Precipitation_PRECIPITATION_VERY_HEAVY = 7,
  EnvironmentalConditions_Precipitation_PRECIPITATION_EXTREME = 8
};
bool EnvironmentalConditions_Precipitation_IsValid(int value);
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions_Precipitation_Precipitation_MIN = EnvironmentalConditions_Precipitation_PRECIPITATION_UNKNOWN;
constexpr EnvironmentalConditions_Precipitation EnvironmentalConditions_Precipitation_Precipitation_MAX = EnvironmentalConditions_Precipitation_PRECIPITATION_EXTREME;
constexpr int EnvironmentalConditions_Precipitation_Precipitation_ARRAYSIZE = EnvironmentalConditions_Precipitation_Precipitation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Precipitation_descriptor();
template<typename T>
inline const std::string& EnvironmentalConditions_Precipitation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvironmentalConditions_Precipitation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvironmentalConditions_Precipitation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvironmentalConditions_Precipitation_descriptor(), enum_t_value);
}
inline bool EnvironmentalConditions_Precipitation_Parse(
    const std::string& name, EnvironmentalConditions_Precipitation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvironmentalConditions_Precipitation>(
    EnvironmentalConditions_Precipitation_descriptor(), name, value);
}
enum EnvironmentalConditions_Fog : int {
  EnvironmentalConditions_Fog_FOG_UNKNOWN = 0,
  EnvironmentalConditions_Fog_FOG_OTHER = 1,
  EnvironmentalConditions_Fog_FOG_EXCELLENT_VISIBILITY = 2,
  EnvironmentalConditions_Fog_FOG_GOOD_VISIBILITY = 3,
  EnvironmentalConditions_Fog_FOG_MODERATE_VISIBILITY = 4,
  EnvironmentalConditions_Fog_FOG_POOR_VISIBILITY = 5,
  EnvironmentalConditions_Fog_FOG_MIST = 6,
  EnvironmentalConditions_Fog_FOG_LIGHT = 7,
  EnvironmentalConditions_Fog_FOG_THICK = 8,
  EnvironmentalConditions_Fog_FOG_DENSE = 9
};
bool EnvironmentalConditions_Fog_IsValid(int value);
constexpr EnvironmentalConditions_Fog EnvironmentalConditions_Fog_Fog_MIN = EnvironmentalConditions_Fog_FOG_UNKNOWN;
constexpr EnvironmentalConditions_Fog EnvironmentalConditions_Fog_Fog_MAX = EnvironmentalConditions_Fog_FOG_DENSE;
constexpr int EnvironmentalConditions_Fog_Fog_ARRAYSIZE = EnvironmentalConditions_Fog_Fog_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_Fog_descriptor();
template<typename T>
inline const std::string& EnvironmentalConditions_Fog_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvironmentalConditions_Fog>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvironmentalConditions_Fog_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvironmentalConditions_Fog_descriptor(), enum_t_value);
}
inline bool EnvironmentalConditions_Fog_Parse(
    const std::string& name, EnvironmentalConditions_Fog* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvironmentalConditions_Fog>(
    EnvironmentalConditions_Fog_descriptor(), name, value);
}
enum EnvironmentalConditions_AmbientIllumination : int {
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_UNKNOWN = 0,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_OTHER = 1,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL1 = 2,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL2 = 3,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL3 = 4,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL4 = 5,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL5 = 6,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL6 = 7,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL7 = 8,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL8 = 9,
  EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL9 = 10
};
bool EnvironmentalConditions_AmbientIllumination_IsValid(int value);
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MIN = EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_UNKNOWN;
constexpr EnvironmentalConditions_AmbientIllumination EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MAX = EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL9;
constexpr int EnvironmentalConditions_AmbientIllumination_AmbientIllumination_ARRAYSIZE = EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EnvironmentalConditions_AmbientIllumination_descriptor();
template<typename T>
inline const std::string& EnvironmentalConditions_AmbientIllumination_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EnvironmentalConditions_AmbientIllumination>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EnvironmentalConditions_AmbientIllumination_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EnvironmentalConditions_AmbientIllumination_descriptor(), enum_t_value);
}
inline bool EnvironmentalConditions_AmbientIllumination_Parse(
    const std::string& name, EnvironmentalConditions_AmbientIllumination* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EnvironmentalConditions_AmbientIllumination>(
    EnvironmentalConditions_AmbientIllumination_descriptor(), name, value);
}
// ===================================================================

class EnvironmentalConditions_TimeOfDay :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.EnvironmentalConditions.TimeOfDay) */ {
 public:
  EnvironmentalConditions_TimeOfDay();
  virtual ~EnvironmentalConditions_TimeOfDay();

  EnvironmentalConditions_TimeOfDay(const EnvironmentalConditions_TimeOfDay& from);
  EnvironmentalConditions_TimeOfDay(EnvironmentalConditions_TimeOfDay&& from) noexcept
    : EnvironmentalConditions_TimeOfDay() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions_TimeOfDay& operator=(const EnvironmentalConditions_TimeOfDay& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions_TimeOfDay& operator=(EnvironmentalConditions_TimeOfDay&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions_TimeOfDay& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions_TimeOfDay* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions_TimeOfDay*>(
               &_EnvironmentalConditions_TimeOfDay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EnvironmentalConditions_TimeOfDay& a, EnvironmentalConditions_TimeOfDay& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions_TimeOfDay* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions_TimeOfDay* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions_TimeOfDay>(nullptr);
  }

  EnvironmentalConditions_TimeOfDay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions_TimeOfDay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions_TimeOfDay& from);
  void MergeFrom(const EnvironmentalConditions_TimeOfDay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions_TimeOfDay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.EnvironmentalConditions.TimeOfDay";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fenvironment_2eproto);
    return ::descriptor_table_osi_5fenvironment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsSinceMidnightFieldNumber = 1,
  };
  // optional uint32 seconds_since_midnight = 1;
  bool has_seconds_since_midnight() const;
  private:
  bool _internal_has_seconds_since_midnight() const;
  public:
  void clear_seconds_since_midnight();
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_since_midnight() const;
  void set_seconds_since_midnight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seconds_since_midnight() const;
  void _internal_set_seconds_since_midnight(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.EnvironmentalConditions.TimeOfDay)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seconds_since_midnight_;
  friend struct ::TableStruct_osi_5fenvironment_2eproto;
};
// -------------------------------------------------------------------

class EnvironmentalConditions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.EnvironmentalConditions) */ {
 public:
  EnvironmentalConditions();
  virtual ~EnvironmentalConditions();

  EnvironmentalConditions(const EnvironmentalConditions& from);
  EnvironmentalConditions(EnvironmentalConditions&& from) noexcept
    : EnvironmentalConditions() {
    *this = ::std::move(from);
  }

  inline EnvironmentalConditions& operator=(const EnvironmentalConditions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnvironmentalConditions& operator=(EnvironmentalConditions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EnvironmentalConditions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnvironmentalConditions* internal_default_instance() {
    return reinterpret_cast<const EnvironmentalConditions*>(
               &_EnvironmentalConditions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EnvironmentalConditions& a, EnvironmentalConditions& b) {
    a.Swap(&b);
  }
  inline void Swap(EnvironmentalConditions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EnvironmentalConditions* New() const final {
    return CreateMaybeMessage<EnvironmentalConditions>(nullptr);
  }

  EnvironmentalConditions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EnvironmentalConditions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EnvironmentalConditions& from);
  void MergeFrom(const EnvironmentalConditions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnvironmentalConditions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.EnvironmentalConditions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_osi_5fenvironment_2eproto);
    return ::descriptor_table_osi_5fenvironment_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef EnvironmentalConditions_TimeOfDay TimeOfDay;

  typedef EnvironmentalConditions_Precipitation Precipitation;
  static constexpr Precipitation PRECIPITATION_UNKNOWN =
    EnvironmentalConditions_Precipitation_PRECIPITATION_UNKNOWN;
  static constexpr Precipitation PRECIPITATION_OTHER =
    EnvironmentalConditions_Precipitation_PRECIPITATION_OTHER;
  static constexpr Precipitation PRECIPITATION_NONE =
    EnvironmentalConditions_Precipitation_PRECIPITATION_NONE;
  static constexpr Precipitation PRECIPITATION_VERY_LIGHT =
    EnvironmentalConditions_Precipitation_PRECIPITATION_VERY_LIGHT;
  static constexpr Precipitation PRECIPITATION_LIGHT =
    EnvironmentalConditions_Precipitation_PRECIPITATION_LIGHT;
  static constexpr Precipitation PRECIPITATION_MODERATE =
    EnvironmentalConditions_Precipitation_PRECIPITATION_MODERATE;
  static constexpr Precipitation PRECIPITATION_HEAVY =
    EnvironmentalConditions_Precipitation_PRECIPITATION_HEAVY;
  static constexpr Precipitation PRECIPITATION_VERY_HEAVY =
    EnvironmentalConditions_Precipitation_PRECIPITATION_VERY_HEAVY;
  static constexpr Precipitation PRECIPITATION_EXTREME =
    EnvironmentalConditions_Precipitation_PRECIPITATION_EXTREME;
  static inline bool Precipitation_IsValid(int value) {
    return EnvironmentalConditions_Precipitation_IsValid(value);
  }
  static constexpr Precipitation Precipitation_MIN =
    EnvironmentalConditions_Precipitation_Precipitation_MIN;
  static constexpr Precipitation Precipitation_MAX =
    EnvironmentalConditions_Precipitation_Precipitation_MAX;
  static constexpr int Precipitation_ARRAYSIZE =
    EnvironmentalConditions_Precipitation_Precipitation_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Precipitation_descriptor() {
    return EnvironmentalConditions_Precipitation_descriptor();
  }
  template<typename T>
  static inline const std::string& Precipitation_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Precipitation>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Precipitation_Name.");
    return EnvironmentalConditions_Precipitation_Name(enum_t_value);
  }
  static inline bool Precipitation_Parse(const std::string& name,
      Precipitation* value) {
    return EnvironmentalConditions_Precipitation_Parse(name, value);
  }

  typedef EnvironmentalConditions_Fog Fog;
  static constexpr Fog FOG_UNKNOWN =
    EnvironmentalConditions_Fog_FOG_UNKNOWN;
  static constexpr Fog FOG_OTHER =
    EnvironmentalConditions_Fog_FOG_OTHER;
  static constexpr Fog FOG_EXCELLENT_VISIBILITY =
    EnvironmentalConditions_Fog_FOG_EXCELLENT_VISIBILITY;
  static constexpr Fog FOG_GOOD_VISIBILITY =
    EnvironmentalConditions_Fog_FOG_GOOD_VISIBILITY;
  static constexpr Fog FOG_MODERATE_VISIBILITY =
    EnvironmentalConditions_Fog_FOG_MODERATE_VISIBILITY;
  static constexpr Fog FOG_POOR_VISIBILITY =
    EnvironmentalConditions_Fog_FOG_POOR_VISIBILITY;
  static constexpr Fog FOG_MIST =
    EnvironmentalConditions_Fog_FOG_MIST;
  static constexpr Fog FOG_LIGHT =
    EnvironmentalConditions_Fog_FOG_LIGHT;
  static constexpr Fog FOG_THICK =
    EnvironmentalConditions_Fog_FOG_THICK;
  static constexpr Fog FOG_DENSE =
    EnvironmentalConditions_Fog_FOG_DENSE;
  static inline bool Fog_IsValid(int value) {
    return EnvironmentalConditions_Fog_IsValid(value);
  }
  static constexpr Fog Fog_MIN =
    EnvironmentalConditions_Fog_Fog_MIN;
  static constexpr Fog Fog_MAX =
    EnvironmentalConditions_Fog_Fog_MAX;
  static constexpr int Fog_ARRAYSIZE =
    EnvironmentalConditions_Fog_Fog_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Fog_descriptor() {
    return EnvironmentalConditions_Fog_descriptor();
  }
  template<typename T>
  static inline const std::string& Fog_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Fog>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Fog_Name.");
    return EnvironmentalConditions_Fog_Name(enum_t_value);
  }
  static inline bool Fog_Parse(const std::string& name,
      Fog* value) {
    return EnvironmentalConditions_Fog_Parse(name, value);
  }

  typedef EnvironmentalConditions_AmbientIllumination AmbientIllumination;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_UNKNOWN =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_UNKNOWN;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_OTHER =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_OTHER;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL1 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL1;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL2 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL2;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL3 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL3;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL4 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL4;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL5 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL5;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL6 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL6;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL7 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL7;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL8 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL8;
  static constexpr AmbientIllumination AMBIENT_ILLUMINATION_LEVEL9 =
    EnvironmentalConditions_AmbientIllumination_AMBIENT_ILLUMINATION_LEVEL9;
  static inline bool AmbientIllumination_IsValid(int value) {
    return EnvironmentalConditions_AmbientIllumination_IsValid(value);
  }
  static constexpr AmbientIllumination AmbientIllumination_MIN =
    EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MIN;
  static constexpr AmbientIllumination AmbientIllumination_MAX =
    EnvironmentalConditions_AmbientIllumination_AmbientIllumination_MAX;
  static constexpr int AmbientIllumination_ARRAYSIZE =
    EnvironmentalConditions_AmbientIllumination_AmbientIllumination_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AmbientIllumination_descriptor() {
    return EnvironmentalConditions_AmbientIllumination_descriptor();
  }
  template<typename T>
  static inline const std::string& AmbientIllumination_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AmbientIllumination>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AmbientIllumination_Name.");
    return EnvironmentalConditions_AmbientIllumination_Name(enum_t_value);
  }
  static inline bool AmbientIllumination_Parse(const std::string& name,
      AmbientIllumination* value) {
    return EnvironmentalConditions_AmbientIllumination_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceReferenceFieldNumber = 9,
    kTimeOfDayFieldNumber = 2,
    kAtmosphericPressureFieldNumber = 3,
    kAmbientIlluminationFieldNumber = 1,
    kPrecipitationFieldNumber = 6,
    kTemperatureFieldNumber = 4,
    kRelativeHumidityFieldNumber = 5,
    kUnixTimestampFieldNumber = 8,
    kFogFieldNumber = 7,
  };
  // repeated .osi3.ExternalReference source_reference = 9;
  int source_reference_size() const;
  private:
  int _internal_source_reference_size() const;
  public:
  void clear_source_reference();
  ::osi3::ExternalReference* mutable_source_reference(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >*
      mutable_source_reference();
  private:
  const ::osi3::ExternalReference& _internal_source_reference(int index) const;
  ::osi3::ExternalReference* _internal_add_source_reference();
  public:
  const ::osi3::ExternalReference& source_reference(int index) const;
  ::osi3::ExternalReference* add_source_reference();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >&
      source_reference() const;

  // optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
  bool has_time_of_day() const;
  private:
  bool _internal_has_time_of_day() const;
  public:
  void clear_time_of_day();
  const ::osi3::EnvironmentalConditions_TimeOfDay& time_of_day() const;
  ::osi3::EnvironmentalConditions_TimeOfDay* release_time_of_day();
  ::osi3::EnvironmentalConditions_TimeOfDay* mutable_time_of_day();
  void set_allocated_time_of_day(::osi3::EnvironmentalConditions_TimeOfDay* time_of_day);
  private:
  const ::osi3::EnvironmentalConditions_TimeOfDay& _internal_time_of_day() const;
  ::osi3::EnvironmentalConditions_TimeOfDay* _internal_mutable_time_of_day();
  public:

  // optional double atmospheric_pressure = 3;
  bool has_atmospheric_pressure() const;
  private:
  bool _internal_has_atmospheric_pressure() const;
  public:
  void clear_atmospheric_pressure();
  double atmospheric_pressure() const;
  void set_atmospheric_pressure(double value);
  private:
  double _internal_atmospheric_pressure() const;
  void _internal_set_atmospheric_pressure(double value);
  public:

  // optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
  bool has_ambient_illumination() const;
  private:
  bool _internal_has_ambient_illumination() const;
  public:
  void clear_ambient_illumination();
  ::osi3::EnvironmentalConditions_AmbientIllumination ambient_illumination() const;
  void set_ambient_illumination(::osi3::EnvironmentalConditions_AmbientIllumination value);
  private:
  ::osi3::EnvironmentalConditions_AmbientIllumination _internal_ambient_illumination() const;
  void _internal_set_ambient_illumination(::osi3::EnvironmentalConditions_AmbientIllumination value);
  public:

  // optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
  bool has_precipitation() const;
  private:
  bool _internal_has_precipitation() const;
  public:
  void clear_precipitation();
  ::osi3::EnvironmentalConditions_Precipitation precipitation() const;
  void set_precipitation(::osi3::EnvironmentalConditions_Precipitation value);
  private:
  ::osi3::EnvironmentalConditions_Precipitation _internal_precipitation() const;
  void _internal_set_precipitation(::osi3::EnvironmentalConditions_Precipitation value);
  public:

  // optional double temperature = 4;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  double temperature() const;
  void set_temperature(double value);
  private:
  double _internal_temperature() const;
  void _internal_set_temperature(double value);
  public:

  // optional double relative_humidity = 5;
  bool has_relative_humidity() const;
  private:
  bool _internal_has_relative_humidity() const;
  public:
  void clear_relative_humidity();
  double relative_humidity() const;
  void set_relative_humidity(double value);
  private:
  double _internal_relative_humidity() const;
  void _internal_set_relative_humidity(double value);
  public:

  // optional int64 unix_timestamp = 8;
  bool has_unix_timestamp() const;
  private:
  bool _internal_has_unix_timestamp() const;
  public:
  void clear_unix_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 unix_timestamp() const;
  void set_unix_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_unix_timestamp() const;
  void _internal_set_unix_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // optional .osi3.EnvironmentalConditions.Fog fog = 7;
  bool has_fog() const;
  private:
  bool _internal_has_fog() const;
  public:
  void clear_fog();
  ::osi3::EnvironmentalConditions_Fog fog() const;
  void set_fog(::osi3::EnvironmentalConditions_Fog value);
  private:
  ::osi3::EnvironmentalConditions_Fog _internal_fog() const;
  void _internal_set_fog(::osi3::EnvironmentalConditions_Fog value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.EnvironmentalConditions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference > source_reference_;
  ::osi3::EnvironmentalConditions_TimeOfDay* time_of_day_;
  double atmospheric_pressure_;
  int ambient_illumination_;
  int precipitation_;
  double temperature_;
  double relative_humidity_;
  ::PROTOBUF_NAMESPACE_ID::int64 unix_timestamp_;
  int fog_;
  friend struct ::TableStruct_osi_5fenvironment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnvironmentalConditions_TimeOfDay

// optional uint32 seconds_since_midnight = 1;
inline bool EnvironmentalConditions_TimeOfDay::_internal_has_seconds_since_midnight() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool EnvironmentalConditions_TimeOfDay::has_seconds_since_midnight() const {
  return _internal_has_seconds_since_midnight();
}
inline void EnvironmentalConditions_TimeOfDay::clear_seconds_since_midnight() {
  seconds_since_midnight_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvironmentalConditions_TimeOfDay::_internal_seconds_since_midnight() const {
  return seconds_since_midnight_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EnvironmentalConditions_TimeOfDay::seconds_since_midnight() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.TimeOfDay.seconds_since_midnight)
  return _internal_seconds_since_midnight();
}
inline void EnvironmentalConditions_TimeOfDay::_internal_set_seconds_since_midnight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  seconds_since_midnight_ = value;
}
inline void EnvironmentalConditions_TimeOfDay::set_seconds_since_midnight(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seconds_since_midnight(value);
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.TimeOfDay.seconds_since_midnight)
}

// -------------------------------------------------------------------

// EnvironmentalConditions

// optional .osi3.EnvironmentalConditions.AmbientIllumination ambient_illumination = 1;
inline bool EnvironmentalConditions::_internal_has_ambient_illumination() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool EnvironmentalConditions::has_ambient_illumination() const {
  return _internal_has_ambient_illumination();
}
inline void EnvironmentalConditions::clear_ambient_illumination() {
  ambient_illumination_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::osi3::EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::_internal_ambient_illumination() const {
  return static_cast< ::osi3::EnvironmentalConditions_AmbientIllumination >(ambient_illumination_);
}
inline ::osi3::EnvironmentalConditions_AmbientIllumination EnvironmentalConditions::ambient_illumination() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.ambient_illumination)
  return _internal_ambient_illumination();
}
inline void EnvironmentalConditions::_internal_set_ambient_illumination(::osi3::EnvironmentalConditions_AmbientIllumination value) {
  assert(::osi3::EnvironmentalConditions_AmbientIllumination_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  ambient_illumination_ = value;
}
inline void EnvironmentalConditions::set_ambient_illumination(::osi3::EnvironmentalConditions_AmbientIllumination value) {
  _internal_set_ambient_illumination(value);
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.ambient_illumination)
}

// optional .osi3.EnvironmentalConditions.TimeOfDay time_of_day = 2;
inline bool EnvironmentalConditions::_internal_has_time_of_day() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || time_of_day_ != nullptr);
  return value;
}
inline bool EnvironmentalConditions::has_time_of_day() const {
  return _internal_has_time_of_day();
}
inline void EnvironmentalConditions::clear_time_of_day() {
  if (time_of_day_ != nullptr) time_of_day_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::osi3::EnvironmentalConditions_TimeOfDay& EnvironmentalConditions::_internal_time_of_day() const {
  const ::osi3::EnvironmentalConditions_TimeOfDay* p = time_of_day_;
  return p != nullptr ? *p : *reinterpret_cast<const ::osi3::EnvironmentalConditions_TimeOfDay*>(
      &::osi3::_EnvironmentalConditions_TimeOfDay_default_instance_);
}
inline const ::osi3::EnvironmentalConditions_TimeOfDay& EnvironmentalConditions::time_of_day() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.time_of_day)
  return _internal_time_of_day();
}
inline ::osi3::EnvironmentalConditions_TimeOfDay* EnvironmentalConditions::release_time_of_day() {
  // @@protoc_insertion_point(field_release:osi3.EnvironmentalConditions.time_of_day)
  _has_bits_[0] &= ~0x00000001u;
  ::osi3::EnvironmentalConditions_TimeOfDay* temp = time_of_day_;
  time_of_day_ = nullptr;
  return temp;
}
inline ::osi3::EnvironmentalConditions_TimeOfDay* EnvironmentalConditions::_internal_mutable_time_of_day() {
  _has_bits_[0] |= 0x00000001u;
  if (time_of_day_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::EnvironmentalConditions_TimeOfDay>(GetArenaNoVirtual());
    time_of_day_ = p;
  }
  return time_of_day_;
}
inline ::osi3::EnvironmentalConditions_TimeOfDay* EnvironmentalConditions::mutable_time_of_day() {
  // @@protoc_insertion_point(field_mutable:osi3.EnvironmentalConditions.time_of_day)
  return _internal_mutable_time_of_day();
}
inline void EnvironmentalConditions::set_allocated_time_of_day(::osi3::EnvironmentalConditions_TimeOfDay* time_of_day) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete time_of_day_;
  }
  if (time_of_day) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      time_of_day = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time_of_day, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_of_day_ = time_of_day;
  // @@protoc_insertion_point(field_set_allocated:osi3.EnvironmentalConditions.time_of_day)
}

// optional int64 unix_timestamp = 8;
inline bool EnvironmentalConditions::_internal_has_unix_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool EnvironmentalConditions::has_unix_timestamp() const {
  return _internal_has_unix_timestamp();
}
inline void EnvironmentalConditions::clear_unix_timestamp() {
  unix_timestamp_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EnvironmentalConditions::_internal_unix_timestamp() const {
  return unix_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EnvironmentalConditions::unix_timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.unix_timestamp)
  return _internal_unix_timestamp();
}
inline void EnvironmentalConditions::_internal_set_unix_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000040u;
  unix_timestamp_ = value;
}
inline void EnvironmentalConditions::set_unix_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_unix_timestamp(value);
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.unix_timestamp)
}

// optional double atmospheric_pressure = 3;
inline bool EnvironmentalConditions::_internal_has_atmospheric_pressure() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool EnvironmentalConditions::has_atmospheric_pressure() const {
  return _internal_has_atmospheric_pressure();
}
inline void EnvironmentalConditions::clear_atmospheric_pressure() {
  atmospheric_pressure_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double EnvironmentalConditions::_internal_atmospheric_pressure() const {
  return atmospheric_pressure_;
}
inline double EnvironmentalConditions::atmospheric_pressure() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.atmospheric_pressure)
  return _internal_atmospheric_pressure();
}
inline void EnvironmentalConditions::_internal_set_atmospheric_pressure(double value) {
  _has_bits_[0] |= 0x00000002u;
  atmospheric_pressure_ = value;
}
inline void EnvironmentalConditions::set_atmospheric_pressure(double value) {
  _internal_set_atmospheric_pressure(value);
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.atmospheric_pressure)
}

// optional double temperature = 4;
inline bool EnvironmentalConditions::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool EnvironmentalConditions::has_temperature() const {
  return _internal_has_temperature();
}
inline void EnvironmentalConditions::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double EnvironmentalConditions::_internal_temperature() const {
  return temperature_;
}
inline double EnvironmentalConditions::temperature() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.temperature)
  return _internal_temperature();
}
inline void EnvironmentalConditions::_internal_set_temperature(double value) {
  _has_bits_[0] |= 0x00000010u;
  temperature_ = value;
}
inline void EnvironmentalConditions::set_temperature(double value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.temperature)
}

// optional double relative_humidity = 5;
inline bool EnvironmentalConditions::_internal_has_relative_humidity() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool EnvironmentalConditions::has_relative_humidity() const {
  return _internal_has_relative_humidity();
}
inline void EnvironmentalConditions::clear_relative_humidity() {
  relative_humidity_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double EnvironmentalConditions::_internal_relative_humidity() const {
  return relative_humidity_;
}
inline double EnvironmentalConditions::relative_humidity() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.relative_humidity)
  return _internal_relative_humidity();
}
inline void EnvironmentalConditions::_internal_set_relative_humidity(double value) {
  _has_bits_[0] |= 0x00000020u;
  relative_humidity_ = value;
}
inline void EnvironmentalConditions::set_relative_humidity(double value) {
  _internal_set_relative_humidity(value);
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.relative_humidity)
}

// optional .osi3.EnvironmentalConditions.Precipitation precipitation = 6;
inline bool EnvironmentalConditions::_internal_has_precipitation() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool EnvironmentalConditions::has_precipitation() const {
  return _internal_has_precipitation();
}
inline void EnvironmentalConditions::clear_precipitation() {
  precipitation_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::osi3::EnvironmentalConditions_Precipitation EnvironmentalConditions::_internal_precipitation() const {
  return static_cast< ::osi3::EnvironmentalConditions_Precipitation >(precipitation_);
}
inline ::osi3::EnvironmentalConditions_Precipitation EnvironmentalConditions::precipitation() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.precipitation)
  return _internal_precipitation();
}
inline void EnvironmentalConditions::_internal_set_precipitation(::osi3::EnvironmentalConditions_Precipitation value) {
  assert(::osi3::EnvironmentalConditions_Precipitation_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  precipitation_ = value;
}
inline void EnvironmentalConditions::set_precipitation(::osi3::EnvironmentalConditions_Precipitation value) {
  _internal_set_precipitation(value);
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.precipitation)
}

// optional .osi3.EnvironmentalConditions.Fog fog = 7;
inline bool EnvironmentalConditions::_internal_has_fog() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool EnvironmentalConditions::has_fog() const {
  return _internal_has_fog();
}
inline void EnvironmentalConditions::clear_fog() {
  fog_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::osi3::EnvironmentalConditions_Fog EnvironmentalConditions::_internal_fog() const {
  return static_cast< ::osi3::EnvironmentalConditions_Fog >(fog_);
}
inline ::osi3::EnvironmentalConditions_Fog EnvironmentalConditions::fog() const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.fog)
  return _internal_fog();
}
inline void EnvironmentalConditions::_internal_set_fog(::osi3::EnvironmentalConditions_Fog value) {
  assert(::osi3::EnvironmentalConditions_Fog_IsValid(value));
  _has_bits_[0] |= 0x00000080u;
  fog_ = value;
}
inline void EnvironmentalConditions::set_fog(::osi3::EnvironmentalConditions_Fog value) {
  _internal_set_fog(value);
  // @@protoc_insertion_point(field_set:osi3.EnvironmentalConditions.fog)
}

// repeated .osi3.ExternalReference source_reference = 9;
inline int EnvironmentalConditions::_internal_source_reference_size() const {
  return source_reference_.size();
}
inline int EnvironmentalConditions::source_reference_size() const {
  return _internal_source_reference_size();
}
inline ::osi3::ExternalReference* EnvironmentalConditions::mutable_source_reference(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.EnvironmentalConditions.source_reference)
  return source_reference_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >*
EnvironmentalConditions::mutable_source_reference() {
  // @@protoc_insertion_point(field_mutable_list:osi3.EnvironmentalConditions.source_reference)
  return &source_reference_;
}
inline const ::osi3::ExternalReference& EnvironmentalConditions::_internal_source_reference(int index) const {
  return source_reference_.Get(index);
}
inline const ::osi3::ExternalReference& EnvironmentalConditions::source_reference(int index) const {
  // @@protoc_insertion_point(field_get:osi3.EnvironmentalConditions.source_reference)
  return _internal_source_reference(index);
}
inline ::osi3::ExternalReference* EnvironmentalConditions::_internal_add_source_reference() {
  return source_reference_.Add();
}
inline ::osi3::ExternalReference* EnvironmentalConditions::add_source_reference() {
  // @@protoc_insertion_point(field_add:osi3.EnvironmentalConditions.source_reference)
  return _internal_add_source_reference();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::ExternalReference >&
EnvironmentalConditions::source_reference() const {
  // @@protoc_insertion_point(field_list:osi3.EnvironmentalConditions.source_reference)
  return source_reference_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::EnvironmentalConditions_Precipitation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::EnvironmentalConditions_Precipitation>() {
  return ::osi3::EnvironmentalConditions_Precipitation_descriptor();
}
template <> struct is_proto_enum< ::osi3::EnvironmentalConditions_Fog> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::EnvironmentalConditions_Fog>() {
  return ::osi3::EnvironmentalConditions_Fog_descriptor();
}
template <> struct is_proto_enum< ::osi3::EnvironmentalConditions_AmbientIllumination> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::EnvironmentalConditions_AmbientIllumination>() {
  return ::osi3::EnvironmentalConditions_AmbientIllumination_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fenvironment_2eproto
